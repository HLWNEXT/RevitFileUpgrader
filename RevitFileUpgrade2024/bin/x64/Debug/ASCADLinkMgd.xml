<?xml version="1.0"?>
<doc>
    <assembly>
        "ASCADLinkMgd"
    </assembly>
    <members>
        <member name="M:AcDbLoftProfile.op_Assign(AcDb3dProfile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Assignment operator.  Copies the entity and edge data from the
input object, but does not change the continuity or magnitude.
</summary>
            <param name="src"> 
Source object to be copied. 
</param>
            <returns>
Reference to this object.
</returns>
        </member>
        <member name="M:AcDbLoftProfile.op_Assign(AcDbLoftProfile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Assignment operator.
</summary>
            <param name="src"> 
Source object to be copied. 
</param>
            <returns>
Reference to this object.
</returns>
        </member>
        <member name="M:AcDbLoftProfile.setMagnitude(System.Double)">
            <summary> 
Set the magnitude of the takeoff vector for the profile if
the continuity is 1 or 2.
</summary>
            <param name="value"> 
Magnitude of takeoff vector. 
</param>
        </member>
        <member name="M:AcDbLoftProfile.magnitude">
            <summary> 
Return the magnitude of the takeoff vector if the continuity is
1 or 2.  By default, this value is 0.5 unless it has been
explicitly set to another value.
</summary>
            <returns>
Magnitude of the takeoff vector.
</returns>
        </member>
        <member name="M:AcDbLoftProfile.setContinuity(System.Int16)">
            <summary> 
Set the continuity for the profile.
</summary>
            <param name="value"> 
Must be 0, 1, or 2, which corresponds to a continuity of
G0, G1, or G2. 
</param>
        </member>
        <member name="M:AcDbLoftProfile.continuity">
            <summary> 
Return the continuity for the profile: 0, 1, or 2, which
corresponds to a continuity of G0, G1, or G2.  By default, the
continuity is 1 unless it has been explicitly set to another
value.
</summary>
            <returns>
Continuity for the profile: 0, 1, or 2, which
corresponds to a continuity of G0, G1, or G2.
</returns>
        </member>
        <member name="M:AcDbLoftProfile.copyFrom(AcRxObject!System.Runtime.CompilerServices.IsConst*)">
            <summary> 
Copies the contents of input object into this object.
</summary>
            <param name="src"> 
Source object to be copied.
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbLoftProfile.#ctor(AcDbLoftProfile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Copy constructor.
</summary>
            <param name="src"> 
Source object to be copied. 
</param>
        </member>
        <member name="M:AcDbLoftProfile.#ctor(AcGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Constructor for a profile that is a point.
</summary>
            <param name="pnt"> 
An AcGePoint3d that is to be used as a profile to create
a surface such as an extrusion or loft. 
</param>
        </member>
        <member name="M:AcDbLoftProfile.#ctor(AcDbPathRef!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Constructor for a profile that is an edge or a sequence of connected
edges.
</summary>
            <param name="pathRef"> 
Subent paths of the edges that make up the profile. 
</param>
        </member>
        <member name="M:AcDbLoftProfile.#ctor(AcDbEntity*)">
            <summary> 
Constructor for a profile that is an entity such as a curve or region.
</summary>
            <param name="pEntity"> 
Pointer to an AcDbEntity that is to be used as a profile to create
a surface such as an extrusion or loft. 
</param>
        </member>
        <member name="M:AcDbLoftProfile.#ctor">
            <summary>
Default constructor.
</summary>
        </member>
        <member name="T:AcDbLoftProfile">
            <summary>
                <para>
This class is used to represent a profile that can be used as input to
createLoftedSurface().  An object of this class can represent an entity
such as a curve or a region, or it can represent an edge or a set of edges
that form a connected chain.  This class also maintains continuity data
if the profile is for an edge or point and the profile is the first or
last profile of the loft.
</para>
            </summary>
        </member>
        <member name="M:AcDb3dProfile.op_Assign(AcDb3dProfile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Assignment operator.
</summary>
            <param name="src"> 
Source object to be copied. 
</param>
            <returns>
Reference to this object.  
</returns>
        </member>
        <member name="M:AcDb3dProfile.mergeProfiles(AcArray&lt;AcDb3dProfile**,AcArrayMemCopyReallocator&lt;AcDb3dProfile**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,AcArray&lt;AcDb3dProfile**,AcArrayMemCopyReallocator&lt;AcDb3dProfile**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Merge connected sets of profiles into one or more profiles.
</summary>
            <param name="profileArr"> 
Input array of profiles that are to be merged.
</param>
            <param name="mergeEdges"> 
If this parameter is false then any edge profiles in the input array will
not be merged and will be copied directly to the ouput array.
</param>
            <param name="mergeCurves"> 
If this parameter is false then any curve profiles in the input array will
not be merged and will be copied directly to the ouput array.
</param>
            <param name="mergedProfileArr"> 
Output array of merged profiles.  The caller is responsible for deleting all
objects that are returned in this array.
</param>
            <returns>
eOk if successful.  
</returns>
        </member>
        <member name="M:AcDb3dProfile.isValid">
            <summary> 
Return whether the profile is valid and may be used to
create a surface.
</summary>
            <returns>
True if profile is a valid entity, edge, or face.
</returns>
        </member>
        <member name="M:AcDb3dProfile.isEdge">
            <summary> 
Return whether the profile is an edge.
</summary>
            <returns>
True if profile is an edge, false otherwise.
</returns>
        </member>
        <member name="M:AcDb3dProfile.isFace">
            <summary> 
Return whether the profile is a face.
</summary>
            <returns>
True if profile is a face, false otherwise.
</returns>
        </member>
        <member name="M:AcDb3dProfile.isSubent">
            <summary> 
Return whether the profile is an edge or face.
</summary>
            <returns>
True if profile is an edge or face, false otherwise.
</returns>
        </member>
        <member name="M:AcDb3dProfile.isPlanar">
            <summary> 
Return whether the profile is planar.
</summary>
            <returns>
True if profile is planar, false otherwise.
</returns>
        </member>
        <member name="M:AcDb3dProfile.isClosed">
            <summary> 
Return whether the profile forms a closed loop.
</summary>
            <returns>
True if profile is closed, false otherwise.
</returns>
        </member>
        <member name="M:AcDb3dProfile.set(AcDbEntity*)">
            <summary> 
Set the profile to an entity such as a curve or region.
</summary>
            <param name="pEntity"> 
Pointer to an AcDbEntity that is to be used as a profile to create
a surface such as an extrusion or loft. 
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDb3dProfile.set(AcDbVertexRef!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Set the profile to a vertex.
</summary>
            <param name="vertexRef"> 
reference to the vertex
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDb3dProfile.set(AcDbPathRef!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Set the profile to a path.
</summary>
            <param name="pathRef"> 
reference to the path
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDb3dProfile.convertProfile(System.Boolean,System.Boolean,System.Boolean,System.Boolean,AcArray&lt;AcDb3dProfile**,AcArrayMemCopyReallocator&lt;AcDb3dProfile**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Converts profile into new profiles that are of a type that can be used for
extrude, revolve, sweep, or loft operations.  The converted profiles are returned in
the output array.  If this profile is of type AcDbTrace, AcDbSolid, or AcDbFace then
the converted profile will be for a region.  If this profile is of type
AcDb3dPolyline and the profile is linear or whose 'Fit' property is quadratic or
cubic then the converted profile will be a line or a spline.
</summary>
            <param name="explodeMultiFaceRegions"> 
If this profile is of type AcDbSurface or AcDbRegion and has more than one face,
then we explode to get multiple surface or region profiles that each have only
one face. 
</param>
            <param name="convertSurfaceToEdges"> 
If this profile is a face or is of type AcDbSurface, AcDbRegion, AcDbTrace,
AcDbSolid, or AcDbFace then we convert to an edge profile that is defined by
the surface or region edges.
</param>
            <param name="nonPlanarOnly"> 
This parameter is only relevant when convertSurfaceToEdges is set to true.
If this parameter is true then only non-planar surfaces will be converted to
edge profiles.  Regions and planar surfaces will not be converted.
</param>
            <param name="outerLoopOnly"> 
This parameter is only relevant when convertSurfaceToEdges is set to true.
If this parameter is true then only the outer loop of the surface or region
will be converted to an edge profile.
</param>
            <param name="convertedProfileArr"> 
Output list of converted profiles.  The caller is responsible for
deleting the objects in this list.
</param>
            <returns>
eOk if successful.  Even when this function returns eOk, it is possible for
the output list to be empty depending on the profile type and the values of
the other parameters.
</returns>
        </member>
        <member name="M:AcDb3dProfile.getVertexRef(AcDbVertexRef*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Returns the vertex reference of the vertex if the profile is a vertex.
If the profile is not an edge or set of edges, vertexRef will be
empty and eInvalidInput will be returned
</summary>
            <param name="vertexRef"> 
vertex reference 
</param>
            <returns>
Acad::ErrorStatus
</returns>
        </member>
        <member name="M:AcDb3dProfile.getPathRef(AcDbPathRef*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Returns the path reference of the edge if the profile is an edge or
set of edges.  If the profile is not an edge or set of edges, pathRef will be
empty and eInvalidInput will be returned
</summary>
            <param name="pathRef"> 
path reference of the edge(s) 
</param>
            <returns>
Acad::ErrorStatus
</returns>
        </member>
        <member name="M:AcDb3dProfile.entity">
            <summary> 
Returns the profile entity.  If the profile is for an edge or set of
edges then the returned entity will be an AcDbCurve of the edge or edges.
The caller should not delete this pointer or post it to the database.
</summary>
            <returns>
Profile entity. The caller should not delete this pointer.
</returns>
        </member>
        <member name="M:AcDb3dProfile.copyFrom(AcRxObject!System.Runtime.CompilerServices.IsConst*)">
            <summary> 
Copies the contents of input object into this object.
</summary>
            <param name="src"> 
Source object to be copied.
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDb3dProfile.Dispose">
            <summary> 
Destructor.
</summary>
        </member>
        <member name="M:AcDb3dProfile.#ctor(AcDb3dProfile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Copy constructor.
</summary>
            <param name="src"> 
Source object to be copied. 
</param>
        </member>
        <member name="M:AcDb3dProfile.#ctor(AcDbVertexRef!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Constructor for a profile that is a vertex
</summary>
            <param name="vertexRef"> 
reference to the vertex
</param>
        </member>
        <member name="M:AcDb3dProfile.#ctor(AcDbPathRef!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Constructor for a profile that is a path.
</summary>
            <param name="pathRef"> 
reference to the path
</param>
        </member>
        <member name="M:AcDb3dProfile.#ctor(AcDbFullSubentPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Constructor for a profile that is a face.  The profile will consist of
the outer edges of the face.
</summary>
            <param name="faceSubentPath"> 
Subent path of the face. 
</param>
        </member>
        <member name="M:AcDb3dProfile.#ctor(AcDbEntity*)">
            <summary> 
Constructor for a profile that is an entity such as a curve or region.
</summary>
            <param name="pEntity"> 
Pointer to an AcDbEntity that is to be used as a profile to create
a surface such as an extrusion or loft. 
</param>
        </member>
        <member name="M:AcDb3dProfile.#ctor">
            <summary>
Default constructor.
</summary>
        </member>
        <member name="T:AcDb3dProfile">
            <summary>
                <para>
This class is used to represent a 3d profile that can be used as input to
functions such as createExtrudedSurface(), createRevolvedSurface(), and
createSweptSurface().  An object of this class can represent an entity
such as a curve or a region, or it can represent an edge or a set of edges
that form a connected chain.
</para>
            </summary>
        </member>
        <member name="M:AcDbCoordSystemRef.evaluateAndCacheGeometry">
            <summary> 
Calls evaluateAndCacheGeometry on all owned AcDbSubentRefs and then updates
the cached coordinate system.
</summary>
        </member>
        <member name="M:AcDbCoordSystemRef.createEntity">
            <summary> 
There is no AcDbEntity created from AcDbCoordSystemRef. 
</summary>
        </member>
        <member name="T:AcDbCoordSystemRef">
            <summary>
Coordinate system, actually an arbitrary matrix. The axes do not need to be
unit lengths, perpendicular, or form right-hand coord system (may be mirrored).
</summary>
            <remarks> For internal use only. </remarks>
        </member>
        <member name="M:AcDbVectorRef.evaluateAndCacheGeometry">
            <summary> 
TBD
</summary>
        </member>
        <member name="M:AcDbVectorRef.createEntity">
            <summary> 
TBD
</summary>
        </member>
        <member name="T:AcDbVectorRef">
            <summary>
Arbitrary 3D vector, of any length.
</summary>
            <remarks> For internal use only. </remarks>
        </member>
        <member name="M:AcDbPathRef.evaluateAndCacheGeometry">
            <summary> 
Calls evaluateAndCacheGeometry() on all the owned AcDbEdgeRefs.
</summary>
        </member>
        <member name="M:AcDbPathRef.isReferencePath">
            <summary> 
Returns true if all elements of the path are references to entities, i.e.
they are not constant geometries.
</summary>
        </member>
        <member name="M:AcDbPathRef.isEqualTo(AcGeCurve3d!System.Runtime.CompilerServices.IsConst*)">
            <summary> Returns true if the geometry of the path is equal to the geometry of the given curve. </summary>
        </member>
        <member name="M:AcDbPathRef.edgeRefs">
            <summary> Returns the array of AcDbEdgeRefs kept in the AcDbPathRef. </summary>
        </member>
        <member name="M:AcDbPathRef.getEntityArray(AcArray&lt;AcDbEntity**,AcArrayMemCopyReallocator&lt;AcDbEntity**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary> 
Returns an array of AcDbEntities created from the individual AcDbEdgeRefs
in the path. If concatenate is true, it tries to concatenate them.
</summary>
        </member>
        <member name="M:AcDbPathRef.setEdgeRefs(AcArray&lt;AcDbEdgeRef,AcArrayObjectCopyReallocator&lt;AcDbEdgeRef&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the AcDbPathRef from a sequence of AcDbEdgeRefs. </summary>
        </member>
        <member name="M:AcDbPathRef.#ctor(AcArray&lt;AcDbFullSubentPath,AcArrayObjectCopyReallocator&lt;AcDbFullSubentPath&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcArray&lt;AcDbFullSubentPath,AcArrayObjectCopyReallocator&lt;AcDbFullSubentPath&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Constructor an AcDbPathRef that is a sequence of connected edges.
</summary>
            <param name="edgeSubentPathArr"> 
Subent paths of the edges that make up the path. 
</param>
            <param name="faceSubentPathArr"> 
Optional subent paths of the faces for each edge.  The number of elements in
this array must be 0 or be the same as the number of elements in
edgeSubentPathArr. 
</param>
        </member>
        <member name="M:AcDbPathRef.#ctor(AcArray&lt;AcDbEdgeRef,AcArrayObjectCopyReallocator&lt;AcDbEdgeRef&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Creates an AcDbPathRef from a sequence of AcDbEdgeRefs.
</summary>
        </member>
        <member name="M:AcDbPathRef.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:AcDbPathRef">
            <summary>
Reference to a path, which is just a sequence of edges. If the path has an 
array of edges which happen to be connected at their end points, it will try 
to concatenate the curves into one composite curve.
</summary>
        </member>
        <member name="M:AcDbVertexRef.evaluateAndCacheGeometry">
            <summary> 
Calls evaluatePoint() and replaces the current constant AcGePoint3d with the
newly evaluated point.
</summary>
        </member>
        <member name="T:AcDbEntity">
            <summary> 
Creates a new non-database resident AcDbPoint from then data the AcDbVertexRef
holds, and returns it to the caller. The caller is responsible for deleting 
the AcDbPoint after it is no more needed. 
</summary>
        </member>
        <member name="M:AcDbVertexRef.evaluatePoint(AcGePoint3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Evaluates the point from the referenced geometry. If no geometry, 
returns the cached point coordinates.
</summary>
        </member>
        <member name="M:AcDbVertexRef.point">
            <summary> 
Returns the AcGePoint3d directly held in the AcDbVertexRef. 
</summary>
        </member>
        <member name="M:AcDbVertexRef.impliedType">
            <summary> 
The following are for implied vertex refs (see more comments comments 
at ImpliedType enum). The returned referenced AcDbGeomRef is currently 
always an AcDbEdgeRef but we want to keep the protocol general.
</summary>
        </member>
        <member name="M:AcDbVertexRef.subentId">
            <summary> 
If referencedRef() is not NULL, returns kNussSubentId, otherwise returns 
AcDbSubentId from the base-class AcDbSubentRef.

TODO Jiri kripac:
The semantics of this method is questionable and should be revisited
because an implied vertex does identify a subentity, but there is no 
simple AcDbSubentId for it.
</summary>
        </member>
        <member name="M:AcDbVertexRef.entity">
            <summary> 
If referencedRef() is not NULL, returns its AcDbCompoundObjectId, otherwise 
returns AcDbCompoundObjectId from the base-class AcDbSubentRef.
</summary>
        </member>
        <member name="M:AcDbVertexRef.#ctor(AcDbVertexRef.ImpliedType,AcDbEdgeRef!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,AcGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructor for creating implied vertex refs, i.e. a vertex being defined 
as being a special point on an AcDbEdgeRef. See more comments at the 
ImpliedType enum.
</summary>
        </member>
        <member name="M:AcDbVertexRef.#ctor(AcGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
The constructor makes the AcDbVertexRef keep the AcGePoint3d.
</summary>
        </member>
        <member name="M:AcDbVertexRef.#ctor(AcDbEntity!System.Runtime.CompilerServices.IsConst*)">
            <summary> 
The constructor makes the AcDbVertexRef keep the AcDbObjectId of the given 
AcDbEntity. Moreover, if the entity is derived from AcDbPoint, it keeps 
its AcGePoint3d as AcGePoint3d.
</summary>
        </member>
        <member name="M:AcDbVertexRef.#ctor(AcDbFullSubentPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Creates AcDbVertexRef from an entity in a block table record
and referenced via a path of block inserts.
</summary>
        </member>
        <member name="M:AcDbVertexRef.#ctor(AcDbCompoundObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbSubentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> The constructor sets the data members of the AcDbEdgeRef. </summary>
        </member>
        <member name="M:AcDbVertexRef.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:AcDbVertexRef.ImpliedType">
            <summary>
                <para>
An implied vertex ref is a special point on another AcDbGeomRef.
</para>
                <para>
Currently we only have implied vertex ref types for the most common case of 
special points on an AcDbEdgeRef. I am not sure if we should keep extending this 
mechanism in the future. Other mechanisms, such as derivation from AcDbVertexRef, 
should be used for more specialized and/or less common cases. 
</para>
            </summary>
        </member>
        <member name="T:AcDbVertexRef">
            <summary>
Reference to a vertex, i.e. a subentity whose geometry is a point. It may 
either be whole AcDbPoint entity, kVertexSubentType subentity of an entity, or 
a constant AcGePoint3d. Notice that this reference is generally non-persistent, 
because it uses transient AcDbSubentId. 
</summary>
        </member>
        <member name="M:AcDbEdgeRef.evaluateAndCacheGeometry">
            <summary> 
Calls evaluateCurve() and replaces the current constant AcGeCurve3d* with the
newly evaluated curve.
</summary>
        </member>
        <member name="M:AcDbEdgeRef.createEntity">
            <summary> 
Creates a new non-database resident AcDbEntity from then data the AcDbEdgeRef
holds, and returns it to the caller. The caller is responsible for deleting 
the entity after it is no more needed. 
</summary>
        </member>
        <member name="M:AcDbEdgeRef.evaluateCurve(AcGeCurve3d**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Evaluates the curve from the referenced entity geometry. If no entity 
is referenced, returns the cached curve. The caller is responsible for
deleting the returned AcGeCurve3d*
</summary>
        </member>
        <member name="M:AcDbEdgeRef.curve">
            <summary> 
Returns the constant AcGeCurve3d* that the AcDbEdgeRef may hold.
</summary>
        </member>
        <member name="M:AcDbEdgeRef.faceSubentId">
            <summary> 
Returns the optional face AcDbSubentId of one of the faces adjacent to the
referenced edge.
</summary>
        </member>
        <member name="M:AcDbEdgeRef.setFaceSubentity(AcDbSubentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
The AcDbEdgeRef can also hold AcDbSubentId of a face subentity. The face
needs to bounded by the referenced edge subentity. The additional face 
information is needed in cases like when an edge shared by two adjacent 
faces is referenced and used for a smooth blend operation. It needs to
be known which face to use to create the smooth blend to.
</summary>
        </member>
        <member name="M:AcDbEdgeRef.#ctor(AcGeCurve3d!System.Runtime.CompilerServices.IsConst*)">
            <summary> 
The constructor makes the AcDbEdgeRef keep the AcGeCurve3d.
</summary>
        </member>
        <member name="M:AcDbEdgeRef.#ctor(AcDbEntity!System.Runtime.CompilerServices.IsConst*)">
            <summary> 
The constructor makes the AcDbEdgeRef keep the AcDbObjectId of the given 
AcDbEntity. Moreover, if the entity is derived from AcDbCurve, it obtains 
a copy of the AcGeCurve3d and keeps in it the AcDbEdgeRef.
</summary>
        </member>
        <member name="M:AcDbEdgeRef.#ctor(AcDbFullSubentPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Creates AcDbEdgeRef from an entity in a block table record
and referenced via a path of block inserts.
</summary>
        </member>
        <member name="M:AcDbEdgeRef.#ctor(AcDbCompoundObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbSubentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbSubentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcGeCurve3d!System.Runtime.CompilerServices.IsConst*)">
            <summary> The constructor sets the data members of the AcDbEdgeRef. </summary>
        </member>
        <member name="M:AcDbEdgeRef.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:AcDbEdgeRef">
            <summary>
                <para>
Reference to an edge, i.e. a subentity whose geometry is a simple curve. 
</para>
                <para>
It may either be the whole entity that itself is a single curve, kEdgeSubentType 
subentity of an entity, or a constant AcGeCurve3d. Notice that this reference
is generally non-persistent, because it uses transient AcDbSubentId. 
</para>
                <para>
The option to reference the whole entity is questionable and has been provided
just for the compatibility with old code that takes the whole entity. We should 
probably always represent edges by kEdgeSubentType subentities of entities, even
if the whole entity is just a single edge, such as line, arc, or circle.
</para>
            </summary>
        </member>
        <member name="M:AcDbFaceRef.evaluateAndCacheGeometry">
            <summary>
For now this method does nothing.
</summary>
        </member>
        <member name="M:AcDbFaceRef.createEntity">
            <summary> 
Creates a new non-database resident AcDbEntity from the data the AcDbFaceRef
holds, and returns it to the caller. The caller is responsible for deleting 
the entity after it is no more needed. 
</summary>
        </member>
        <member name="T:BODY">
            <summary> 
The constructor sets the data members of the AcDbFaceRef. The provided
ASM BODY is not copied, the caller is responsible for providing a copy,
if needed.
</summary>
            <summary> 
Returns the ASM BODY that the AcDbFaceRef may hold. It does not return a 
copy of the ASM BODY, therefore the client code needs to make a copy if 
it needs to do any modifications to this ASM BODY.
</summary>
        </member>
        <member name="M:AcDbFaceRef.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:AcDbFaceRef">
            <summary>
Reference to a face. It can either be represented by a face AcDbSubentId of 
an ASM-based AcDbEntity (AcDbSurface, AcDb3dSolid, AcDbRegion) or by
a constant ASM BODY and the AcDbSubentId then specifies the index of the 
face in the constant ASM BODY.
</summary>
        </member>
        <member name="M:AcDbSubentRef.setFromSubentPath(AcDbFullSubentPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets mEntity and mSubentId data members. </summary>
        </member>
        <member name="M:AcDbSubentRef.setSubent(AcDbSubentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets mSubentId data member. </summary>
        </member>
        <member name="M:AcDbSubentRef.setEntity(AcDbCompoundObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets mEntity data member. </summary>
        </member>
        <member name="M:AcDbSubentRef.evaluateAndCacheGeometry">
            <summary>
No cached constant geoemtry held in AcDbSubentRef base class.
</summary>
        </member>
        <member name="M:AcDbSubentRef.createEntity">
            <summary> 
Creates an AcDbEntity from the subentity of the entity.
</summary>
        </member>
        <member name="M:AcDbSubentRef.subentId">
            <summary> 
Returns the AcDbSubentId in an AcDbEntity that the AcDbSubentRef references. 
May be null if whole AcDbEntity is referenced.
</summary>
        </member>
        <member name="M:AcDbSubentRef.entity">
            <summary> 
Returns the AcDbCompoundObjectId of the entity that the AcDbSubentRef references.
May be empty if a derived class holds constant geometry and does not 
reference any existing AcDbEntity.
</summary>
        </member>
        <member name="M:AcDbSubentRef.#ctor(AcDbCompoundObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbSubentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> The constructor sets data members of the AcDbSubentRef. </summary>
        </member>
        <member name="M:AcDbSubentRef.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:AcDbSubentRef">
            <summary>
                <para>
Base class for AcDbFaceRef, AcDbEdgeRef and AcDbVertexRef. It keeps an 
AcDbCompoundObjectId of an AcDbEntity and AcDbSubentId of a subentity of 
this entity.
</para>
            </summary>
        </member>
        <member name="M:AcDbGeomRef.evaluateAndCacheGeometry">
            <summary> 
If the AcDbGeomRef references some entities and also caches the constant
geometry, this method evaluates the current geometry from the referenced
entities and caches it in the constant geometry.
</summary>
        </member>
        <member name="M:AcDbGeomRef.createEntity">
            <summary> 
Creates a new non-database resident AcDbEntity from the data the AcDbGeomRef
holds, and returns it to the caller. The caller is responsible for deleting 
the entity after it is no more needed. 
</summary>
        </member>
        <member name="M:AcDbGeomRef.isEmpty">
            <summary> 
Checks if the AcDbGeomRef is empty, i.e. not referencing any entity,
subentity, and not holding any constant geometry. 
</summary>
        </member>
        <member name="M:AcDbGeomRef.isValid">
            <summary> Checks is the contents of this AcDbGeomRef is valid. </summary>
        </member>
        <member name="M:AcDbGeomRef.reset">
            <summary> Resets the contents of the AcDbGeomRef to empty. </summary>
        </member>
        <member name="T:AcDbGeomRef">
            <summary>
                <para>
Base class for the concrete derived classes like AcDbFaceRef, AcDbEdgeRef, 
AcDbVertexRef, and AcDbPathRef. These are simple classes that keep a reference 
to a subentity of an entity and can represent this subentity information in 
various ways. They are used mainly to pass around information about geometry 
of a subentity or of an entity, not to keep this information.
</para>
                <para>
The subentity references are non-presistent. Anytime the referenced entity 
is changed or re-evaluated, the subentity reference becomes invalid.
Persistent references can be established using AcDbAssocEdgeActionParam, 
AcDbAssocPathActionParam, AcDbAssocVertexActionParam, or directly using 
AcDbAssocGeomDependencies.
</para>
            </summary>
        </member>
        <member name="M:AcDbSurface.usesGraphicsCache">
            <summary>
This method is used by AutoCAD to determine whether or not to use
cached graphics for the object.  If the method returns true, then
cached graphics will be used.  The default implementation is to
return true. Only database resident entities can use graphics
caching, so this method is not called for entities not in an AcDbDatabase.
</summary>
        </member>
        <member name="M:AcDbSurface.convertToNurbSurface(AcArray&lt;AcDbNurbSurface**,AcArrayMemCopyReallocator&lt;AcDbNurbSurface**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Convert to nurb surfaces. The caller should free the returned nurb surface.
</summary>
            <param name="nsArray"> 
The generated Nurb Surface array
</param>
            <returns>
Return Acad::eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.rayTest(AcGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,AcArray&lt;AcDbSubentId,AcArrayObjectCopyReallocator&lt;AcDbSubentId&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcArray&lt;System.Double,AcArrayMemCopyReallocator&lt;System.Double&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Ray test with the surface. This function will create a ray starting
from rayBasePoint with ray direction defined by rayDir. The rayRadius
defines the tolerance during the intersection check. The returned
subentities could be faces/edges/vertices.
</summary>
            <param name="rayBasePoint"> 
Input base point of the ray.
</param>
            <param name="rayDir"> 
Input ray direction.
</param>
            <param name="rayRadius"> 
input tolerance during the intersection check.
</param>
            <param name="subEntIds"> 
Returned array including faces, edges and vertices.
</param>
            <param name="parameters"> 
Returned array of doubles indicating the intersection
parameter on the ray with the returned subentities.
The smaller of the parameter, the closer to the base point.
</param>
            <returns>
Return Acad::eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.extendEdges(AcArray&lt;AcDbFullSubentPath,AcArrayObjectCopyReallocator&lt;AcDbFullSubentPath&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,AcDbSurface.EdgeExtensionType,System.Boolean)">
            <summary>
Extends the edges of this surface by mergeing the extended/stretched
edges to existing surface.
</summary>
            <param name="edges"> 
Input full sub-entity paths of the edges, that needs to be extended.
</param>
            <param name="extDist"> 
Input distance by which surface needs to be extended.
</param>
            <param name="extOption"> 
Extension option, if edges needs to be extended or stretched.
</param>
            <param name="bAssociativeEnabled"> 
Specifies whether extend surface associativity is enabled. 
</param>
            <returns>
Acad::eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.modificationActionBodyIds(AcArray&lt;AcDbObjectId,AcArrayMemCopyReallocator&lt;AcDbObjectId&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Get moddification action body IDs. 
</summary>
            <param name="modificationActionBodyIds"> 
An array to store the returned action body IDs.
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.creationActionBodyId">
            <summary> 
Get creation action body ID.
</summary>
            <returns>
Creation action body id.
</returns>
        </member>
        <member name="M:AcDbSurface.getPerimeter(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Return the perimeter of surface.
</summary>
            <param name="perimeter"> 
Perimeter of surface.
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.setWireframeType(AcDbSurface.WireframeType)">
            <summary> 
Set WireframeType.
</summary>
            <param name="type"> 
WireframeType to set.
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.getWireframeType">
            <summary> 
Get WireframeType.
</summary>
            <returns>
WireframeType.
</returns>
        </member>
        <member name="M:AcDbSurface.filletEdges(AcArray&lt;AcDbSubentId**,AcArrayMemCopyReallocator&lt;AcDbSubentId**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Boolean)">
            <summary> 
This method creates associative fillets at the specified edges of the 
surface based on input bAssociativeEnabled.
</summary>
            <param name="edgeSubentIds"> 
Input object ids of the edges where the fillet will be applied.
</param>
            <param name="radius"> 
Input fillet radius. 
</param>
            <param name="bAssociativeEnabled"> 
A flag to indicate whether chamfer needs to be associative.
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.chamferEdges(AcArray&lt;AcDbSubentId**,AcArrayMemCopyReallocator&lt;AcDbSubentId**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbSubentId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double,System.Boolean)">
            <summary> 
This method creates associative chamfers at the specified edges of the 
surface based on input bAssociativeEnabled.
</summary>
            <param name="edgeSubentIds"> 
Input object ids of edges at which the chamfer will be applied.
</param>
            <param name="baseFaceSubentId"> 
Input object id of the base face where the chamfer will be applied.
</param>
            <param name="baseDist"> 
Input chamfer distance on the base face.
</param>
            <param name="otherDist"> 
Input chamfer distance on the other faces. 
</param>
            <param name="bAssociativeEnabled"> 
A flag to indicate whether chamfer needs to be associative.
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.trimSurface(AcDbObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcArray&lt;AcDbObjectId,AcArrayMemCopyReallocator&lt;AcDbObjectId&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcArray&lt;AcDbObjectId,AcArrayMemCopyReallocator&lt;AcDbObjectId&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcArray&lt;AcGeVector3d,AcArrayMemCopyReallocator&lt;AcGeVector3d&gt;&gt;!System.Runtime.CompilerServices.IsConst,AcGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenc">
            <summary> 
Trims a surface with given cutting surfaces/curves. A surface can be trimmed by other surfaces
or curves. When curves are used, the actual trimming boundary is formed by projecting the curves
onto the surface, so the additional information of project direction needs to be provided.
</summary>
            <param name="blankSurfaceId"> 
Original input surface to be trimmed. 
</param>
            <param name="toolIds"> 
array of ids of cutting entities that their bodies will be directly used to trim the 
surface without further treatment such as projection. 
</param>
            <param name="toolCurveIds"> 
array of ids of cutting curves that will be used to trim the surface by first 
projecting them to the surface 
</param>
            <param name="projVectors"> 
array of projection direction of each cutting curve in toolCurveIds, so the length of projVectors
should be equal to the length of toolCurveIds
</param>
            <param name="pickPoint"> 
pick point that is used to specify which area of a surface should be trimmed. 
</param>
            <param name="viewVector"> 
when using pick point to find out which area to trim, caller should also specify the view direction
which will be used form a ray starting from the pick point in the view direction and see which area
is hit by the ray first. 
</param>
            <param name="bAutoExtend"> 
If this option is set then when a tool body consists of a single face with analytic geometry, 
the underlying geometry will be extended as much as possible to make sure the surface is trimmed. 
The tool body supplied will not be modified.
</param>
            <param name="bAssociativeEnabled"> 
Specifies whether the surface trimming operation should be associative. 
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.createExtendSurface(AcDbObjectId,AcArray&lt;AcDbSubentId,AcArrayObjectCopyReallocator&lt;AcDbSubentId&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,AcDbSurface.EdgeExtensionType,System.Boolean,AcDbObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Creates an extend surface from the given set of edges from a surface
and adds the surface to the current database. All input edges 
should be connected and coming from same surface.
</summary>
            <param name="sourceSurface">
Surface id from which edges needs to be extended to create extend surface.
</param>
            <param name="edges"> 
Input full sub-entity paths of the edges, that needs to be extended.
</param>
            <param name="extDist"> 
Input distance by which surface needs to be extended.
</param>
            <param name="extOption"> 
Extension option, if edges needs to be extended or stretched.
</param>
            <param name="bAssociativeEnabled"> 
Specifies whether extend surface associativity is enabled. 
</param>
            <param name="newExtendSurfaceId"> 
ObjectId to the extend surface if created successfully. 
</param>
            <returns>
Acad::eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.createOffsetSurface(AcDbEntity*,System.Double,System.Boolean,AcDbObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Creates an offset surface and adds it to the current database.
</summary>
            <param name="pInputSurface"> 
Original input surface to be offset. 
</param>
            <param name="offsetDistance"> 
Input distance to offset the input surface. 
</param>
            <param name="bAssociativeEnabled"> 
Specifies whether patch surface associativity is enabled. 
</param>
            <param name="offsetSurfaceId"> 
Object id of offset surface if created successfully. 
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.createOffsetSurface(AcDbEntity*,System.Double,AcDbEntity**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Creates an offset surface.
</summary>
            <param name="pInputSurface"> 
Original input surface to be offset. 
</param>
            <param name="offsetDistance"> 
Input distance to offset the input surface. 
</param>
            <param name="offsetSurface"> 
Pointer to the new offset surface if created successfully. 
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.createFilletSurface(AcDbObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,AcDb.FilletTrimMode,AcGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,AcDbObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
 Creates a tangent surface between two surface edges with constant radius
 and trim or no trim the original surfaces to it.
</summary>
            <param name="surfId1"> 
Input objectID of the first source surface.
</param>
            <param name="pickPt1"> 
Input 3D point specifying the side on the first source surface you want to  
keep after filleting.
</param>
            <param name="surfId2"> 
Input objectID of the second source surface.
</param>
            <param name="pickPt2"> 
Input 3D point specifying the side on the second source surface you want to 
keep after filleting.
</param>
            <param name="radius"> 
Input positive value specifying radius for fillet operation.
</param>
            <param name="trimMode"> 
Input flag specifying enum value of kTrimNone, kTrimFirst, kTrimSecond or 
kTrimBoth. 
</param>
            <param name="projDir"> 
Input 3D vector specifying the projection (view) direction for pick points.
This vector is used for calculation of the projection point on the source
surfaces for pickPt1 and pickPt2. 
</param>
            <param name="bAssociativeEnabled"> 
Specifies whether filltet surface associativity is enabled. 
</param>
            <param name="newSurfaceId"> 
Object id of fillet surface if created successfully. 
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.createFilletSurface(AcDbObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,AcDb.FilletTrimMode,AcGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbSurface**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
 Creates a tangent surface between two surface edges with constant radius
 and trim or no trim the original surfaces to it.
</summary>
            <param name="surfId1"> 
Input objectID of the first source surface.
</param>
            <param name="pickPt1"> 
Input 3D point specifying the side on the first source surface you want to  
keep after filleting.
</param>
            <param name="surfId2"> 
Input objectID of the second source surface.
</param>
            <param name="pickPt2"> 
Input 3D point specifying the side on the second source surface you want to 
keep after filleting.
</param>
            <param name="radius"> 
Input positive value specifying radius for fillet operation.
</param>
            <param name="trimMode"> 
Input flag specifying enum value of kTrimNone, kTrimFirst, kTrimSecond or 
kTrimBoth. 
</param>
            <param name="projDir"> 
Input 3D vector specifying the projection (view) direction for pick points.
This vector is used for calculation of the projection point on the source
surfaces for pickPt1 and pickPt2. 
</param>
            <param name="filletSurface"> 
Pointer to the fillet surface if created successfully. 
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.createBlendSurface(AcDbLoftProfile*,AcDbLoftProfile*,AcDbBlendOptions*,System.Boolean,AcDbObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
 Creates a blend surface from the given profiles using the specified options
 and adds it to the current database. The startProfile and endProfile must
 be edges or a set of connected edges. 
</summary>
            <param name="startProfile"> 
Input profile to be used as the start for blend operation. 
</param>
            <param name="endProfile"> 
Input profile to be used as the end for blend operation. 
</param>
            <param name="blendOptions"> 
Input blend options.
</param>
            <param name="bAssociativeEnabled"> 
Specifies whether blend surface associativity is enabled. 
</param>
            <param name="newSurfaceId"> 
Object id of blend surface if created successfully. 
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.createBlendSurface(AcDbLoftProfile*,AcDbLoftProfile*,AcDbBlendOptions*,AcDbSurface**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
 Creates a blend surface from the given profiles using the specified options
 and adds it to the current database. The startProfile and endProfile must
 be edges or a set of connected edges. 
</summary>
            <param name="startProfile"> 
Input profile to be used as the start for blend operation. 
</param>
            <param name="endProfile"> 
Input profile to be used as the end for blend operation. 
</param>
            <param name="blendOptions"> 
Input blend options.
</param>
            <param name="blendSurface"> 
Pointer to the blend surface if created successfully. 
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.createPatchSurface(AcDbPathRef!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcArray&lt;AcDbObjectId,AcArrayMemCopyReallocator&lt;AcDbObjectId&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Double,System.Boolean,AcDbObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Create an associative patch surface by specifying one of the following:
  + edges which must form a closed loop. 
  + profile curves which must form a closed loop
The API doesn't support mixing the two yet.

The constraintIds are optional which specify the objectID of curve or point 
to be passed by the patch surface as constraint. 
Continuity and bulge only apply to boundary edges, not the constraint curves.

</summary>
            <param name="pathRef"> 
Input edge reference which can be edges of entities or proflie curves 
</param>
            <param name="constraintIds"> 
Optional contrainted curve or point. 
</param>
            <param name="continuity"> 
Optional continuity for patch created with edges 
</param>
            <param name="bulge"> 
Optional bulge for patch created with edges
</param>
            <param name="bAssociativeEnabled"> 
Specifies whether patch surface associativity is enabled. 
</param>
            <param name="newSurfaceId"> 
Object id of patch surface if created successfully. 
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.createPatchSurface(AcDbPathRef!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcArray&lt;AcDbObjectId,AcArrayMemCopyReallocator&lt;AcDbObjectId&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Double,AcDbSurface**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Create patch surface by specifying one of the following:
  + edges which must form a closed loop. 
  + profile curves which must form a closed loop
The API doesn't support mixing the two yet.

The constraintIds are optional which specify the objectID of curve or point 
to be passed by the patch surface as constraint. 
Continuity and bulge only apply to boundary edges, not the constraint curves.

</summary>
            <param name="pathRef"> 
Input edge reference which can be edges of entities or proflie curves 
</param>
            <param name="constraintIds"> 
Optional contrainted curve or point. 
</param>
            <param name="continuity"> 
Optional continuity for patch created with edges 
</param>
            <param name="bulge"> 
Optional bulge for patch created with edges
</param>
            <param name="newSurface"> 
Pointer to the new patch surface if created successfully. 
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.createNetworkSurface(AcArray&lt;AcDb3dProfile**,AcArrayMemCopyReallocator&lt;AcDb3dProfile**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcArray&lt;AcDb3dProfile**,AcArrayMemCopyReallocator&lt;AcDb3dProfile**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,AcDbObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Creates a network surface and adds it to the current database.
A network surface is similar to a lofted surface where the u profiles are
cross sections and the v profiles are guides.  But unlike the lofted surface,
the v profiles do not need to intersect the u profiles.  If the two sets of 
profiles do not all intersect then in general the profiles will not lie on
the resulting surface.
</summary>
            <param name="crossSections"> 
Input array of u-direction profiles. 
</param>
            <param name="guides"> 
Input array of v-direction profiles. 
</param>
            <param name="bAssociativeEnabled"> 
Specifies whether network surface associativity is enabled. 
</param>
            <param name="newSurfaceId"> 
Object id of network surface if created successfully. 
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.createNetworkSurface(AcArray&lt;AcDb3dProfile**,AcArrayMemCopyReallocator&lt;AcDb3dProfile**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcArray&lt;AcDb3dProfile**,AcArrayMemCopyReallocator&lt;AcDb3dProfile**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbSurface**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Creates a network surface and adds it to the current database.
A network surface is similar to a lofted surface where the u profiles are
cross sections and the v profiles are guides.  But unlike the lofted surface,
the v profiles do not need to intersect the u profiles.  If the two sets of 
profiles do not all intersect then in general the profiles will not lie on
the resulting surface.
</summary>
            <param name="crossSections"> 
Input array of u-direction profiles. 
</param>
            <param name="guides"> 
Input array of v-direction profiles. 
</param>
            <param name="newSurface"> 
Pointer to the new network surface if created successfully. 
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.createLoftedSurface(AcArray&lt;AcDbLoftProfile**,AcArrayMemCopyReallocator&lt;AcDbLoftProfile**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcArray&lt;AcDbLoftProfile**,AcArrayMemCopyReallocator&lt;AcDbLoftProfile**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbLoftProfile*,AcDbLoftOptions*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,AcDbObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Creates a lofted surface from the given profiles using the specified options
and adds it to the current database.  The cross sections, guides, and path
may be entities such as curves or points, or they may be edges or sets of
connected edges.  The cross sections must be either all open or all closed.
If the cross sections are all closed, then this function will accept a point
entity as the first and/or last list entry.  Each profile in the guides list
must intersect each of the cross-section profiles, so the guides form a
net-like structure with the cross-sections. Both the cross-section profiles
and the guide profiles will lie on the resulting surface. If any guide profiles
are passed in this list, then pPath should be null. If pPath is non-null, then
the resulting surface will follow the shape of this profile as much as possible.
This profile does not need to intersect the cross-section profiles and does not
even need to be near the cross sections.
</summary>
            <param name="crossSections"> 
Input array of profiles to be used as cross sections for the lofting operation. 
</param>
            <param name="guides"> 
Input optional array of guide profiles. 
</param>
            <param name="pPath"> 
Input optional path profile. 
</param>
            <param name="loftOptions"> 
Input loft options. 
</param>
            <param name="bAssociativeEnabled"> 
Specifies whether lofted surface associativity is enabled. 
</param>
            <param name="newSurfaceId"> 
Object id of lofted surface if created successfully. 
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.createLoftedSurface(AcArray&lt;AcDbLoftProfile**,AcArrayMemCopyReallocator&lt;AcDbLoftProfile**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcArray&lt;AcDbLoftProfile**,AcArrayMemCopyReallocator&lt;AcDbLoftProfile**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbLoftProfile*,AcDbLoftOptions*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbSurface**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Creates a lofted surface from the given profiles using the specified options
and adds it to the current database.  The cross sections, guides, and path
may be entities such as curves or points, or they may be edges or sets of
connected edges.  The cross sections must be either all open or all closed.
If the cross sections are all closed, then this function will accept a point
entity as the first and/or last list entry.  Each profile in the guides list
must intersect each of the cross-section profiles, so the guides form a
net-like structure with the cross-sections. Both the cross-section profiles
and the guide profiles will lie on the resulting surface. If any guide profiles
are passed in this list, then pPath should be null. If pPath is non-null, then
the resulting surface will follow the shape of this profile as much as possible.
This profile does not need to intersect the cross-section profiles and does not
even need to be near the cross sections.
</summary>
            <param name="crossSections"> 
Input array of profiles to be used as cross sections for the lofting operation. 
</param>
            <param name="guides"> 
Input optional array of guide profiles. 
</param>
            <param name="pPath"> 
Input optional path profile. 
</param>
            <param name="loftOptions"> 
Input loft options. 
</param>
            <param name="newSurface"> 
Pointer to the new lofted surface if created successfully. 
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.createSweptSurface(AcDb3dProfile*,AcDb3dProfile*,AcDbSweepOptions*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,AcDbObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Creates a swept surface from the given profile using the specified options.
</summary>
            <param name="pSweep"> 
Input profile to be swept.  This may be an entity such as a curve or
planar surface or it may be an edge or set of connected edges. 
</param>
            <param name="pPath"> 
Input profile along which pSweep is to be swept.  This must be a curve or
an edge.
</param>
            <param name="sweepOptions"> 
Input sweep options. 
</param>
            <param name="bAssociativeEnabled"> 
Specifies whether swept surface associativity is enabled. 
</param>
            <param name="newSurfaceId"> 
Object id of swept surface if created successfully. 
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.createSweptSurface(AcDb3dProfile*,AcDb3dProfile*,AcDbSweepOptions*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbSweptSurface**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Creates a swept surface from the given profile using the specified options.
</summary>
            <param name="pSweep"> 
Input profile to be swept.  This may be an entity such as a curve or
planar surface or it may be an edge or set of connected edges. 
</param>
            <param name="pPath"> 
Input profile along which pSweep is to be swept.  This must be a curve or
an edge.
</param>
            <param name="sweepOptions"> 
Input sweep options. 
</param>
            <param name="newSweptSurface"> 
Pointer to the new swept surface if created successfully. 
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.createRevolvedSurface(AcDb3dProfile*,AcDb3dProfile*,System.Boolean,System.Double,System.Double,AcDbRevolveOptions*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,AcDbObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Creates a revolved surface from the given profile using the specified options.
</summary>
            <param name="pRev"> 
Input profile to be revolved.  This may be an entity such as a curve or
planar surface or it may be an edge or set of connected edges. 
</param>
            <param name="pAxis"> 
Profile which is either a line or a linear edge of a surface or solid.
</param>
            <param name="flipAxisDirection"> 
True if the direction of the axis should be taken in the opposite direction of
the entity defined by pAxis.
</param>
            <param name="revAngle"> 
Angle through which the profile is to be revolved.  This angle is taken to be
counter-clockwise about the axis of revolution.
</param>
            <param name="startAngle"> 
Starting angle of the profile.  If this parameter is 0.0 then the profile will
be revolved from its current position.  This angle is taken to be
counter-clockwise about the axis of revolution.
</param>
            <param name="flipAxisDirection"> 
This parameter is only relevant when pAxisEnt is non-null.
In this case this parameter specifies 
</param>
            <param name="revolveOptions"> 
Input revolve options. 
</param>
            <param name="bAssociativeEnabled"> 
Specifies whether revolved surface associativity is enabled. 
</param>
            <param name="newRevolvedSurfaceId"> 
ObjectId to te new revolved surface if created successfully. 
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.createRevolvedSurface(AcDb3dProfile*,AcDb3dProfile*,System.Boolean,System.Double,System.Double,AcDbRevolveOptions*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbRevolvedSurface**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Creates a revolved surface from the given profile using the specified options.
</summary>
            <param name="pRev"> 
Input profile to be revolved.  This may be an entity such as a curve or
planar surface or it may be an edge or set of connected edges. 
</param>
            <param name="pAxis"> 
Profile which is either a line or a linear edge of a surface or solid.
</param>
            <param name="flipAxisDirection"> 
True if the direction of the axis should be taken in the opposite direction of
the entity defined by pAxis.
</param>
            <param name="revAngle"> 
Angle through which the profile is to be revolved.  This angle is taken to be
counter-clockwise about the axis of revolution.
</param>
            <param name="startAngle"> 
Starting angle of the profile.  If this parameter is 0.0 then the profile will
be revolved from its current position.  This angle is taken to be
counter-clockwise about the axis of revolution.
</param>
            <param name="flipAxisDirection"> 
This parameter is only relevant when pAxisEnt is non-null.
In this case this parameter specifies 
</param>
            <param name="revolveOptions"> 
Input revolve options. 
</param>
            <param name="newRevolvedSurface"> 
Pointer to te new revolved surface if created successfully. 
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.createRevolvedSurface(AcDb3dProfile*,AcGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double,AcDbRevolveOptions*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,AcDbObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Creates a revolved surface from the given profile using the specified options.
</summary>
            <param name="pRev"> 
Input profile to be revolved.  This may be an entity such as a curve or
planar surface or it may be an edge or set of connected edges. 
</param>
            <param name="axisPnt"> 
Any point on the axis of revolution. 
</param>
            <param name="axisDir"> 
Direction vector of the axis of revolution.  This vector must not be zero-length.  
</param>
            <param name="revAngle"> 
Angle through which the profile is to be revolved.  This angle is taken to be
counter-clockwise about the axis of revolution.
</param>
            <param name="startAngle"> 
Starting angle of the profile.  If this parameter is 0.0 then the profile will
be revolved from its current position.  This angle is taken to be
counter-clockwise about the axis of revolution.
</param>
            <param name="revolveOptions"> 
Input revolve options. 
</param>
            <param name="bAssociativeEnabled"> 
Specifies whether revolved surface associativity is enabled. 
</param>
            <param name="newRevolvedSurface"> 
Pointer to new revolved surface if created successfully. 
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.createRevolvedSurface(AcDb3dProfile*,AcGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double,AcDbRevolveOptions*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbRevolvedSurface**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Creates a revolved surface from the given profile using the specified options.
</summary>
            <param name="pRev"> 
Input profile to be revolved.  This may be an entity such as a curve or
planar surface or it may be an edge or set of connected edges. 
</param>
            <param name="axisPnt"> 
Any point on the axis of revolution. 
</param>
            <param name="axisDir"> 
Direction vector of the axis of revolution.  This vector must not be zero-length.  
</param>
            <param name="revAngle"> 
Angle through which the profile is to be revolved.  This angle is taken to be
counter-clockwise about the axis of revolution.
</param>
            <param name="startAngle"> 
Starting angle of the profile.  If this parameter is 0.0 then the profile will
be revolved from its current position.  This angle is taken to be
counter-clockwise about the axis of revolution.
</param>
            <param name="revolveOptions"> 
Input revolve options. 
</param>
            <param name="newRevolvedSurface"> 
Pointer to new revolved surface if created successfully. 
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.createExtrudedSurface(AcDb3dProfile*,AcGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbSweepOptions*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,AcDbObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Creates an extruded surface from the given profile using the specified options
and adds the surface to the current database.
</summary>
            <param name="pSweep"> 
Input profile to be extruded.  This may be an entity such as a curve or
planar surface or it may be an edge or set of connected edges.
</param>
            <param name="directionVec"> 
Input direction of extrusion.  This vector must not be zero-length. 
</param>
            <param name="sweepOptions"> 
Input sweep options. 
</param>
            <param name="bAssociativeEnabled"> 
Specifies whether extruded surface associativity is enabled. 
</param>
            <param name="newExtrudedSurfaceId"> 
ObjectId to the extruded surface if created successfully. 
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="M:AcDbSurface.createExtrudedSurface(AcDb3dProfile*,AcGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbSweepOptions*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbExtrudedSurface**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Creates an extruded surface from the given profile using the specified options
and adds the surface to the current database.
</summary>
            <param name="pSweep"> 
Input profile to be extruded.  This may be an entity such as a curve or
planar surface or it may be an edge or set of connected edges.
</param>
            <param name="directionVec"> 
Input direction of extrusion.  This vector must not be zero-length. 
</param>
            <param name="sweepOptions"> 
Input sweep options. 
</param>
            <param name="newExtrudedSurface"> 
Pointer to the extruded surface if created successfully. 
</param>
            <returns>
eOk if successful.
</returns>
        </member>
        <member name="F:kStretchEdge">
            <summary> Edges will be stretched. </summary>
        </member>
        <member name="F:kExtendEdge">
            <summary> Edges will be extended. </summary>
        </member>
        <member name="T:AcDbSurface.EdgeExtensionType">
            <summary>
Defines possible edge extension types as input for extendEdges or 
createExtendSurface methods.
</summary>
        </member>
        <member name="F:kIsoparms">
            <summary> 
The quilt representation is based on the projection of
the knot structure of surface.
</summary>
        </member>
        <member name="T:AcDbSurface.WireframeType">
            <summary> 
Control the internal wireframe quilt display when the "edge mode" is 
set to Isolines in any of the Visual Styles.
</summary>
        </member>
        <member name="M:AcDbParentTransformOfChildPE.getParentTransformOfChild(AcDbObject!System.Runtime.CompilerServices.IsConst*,AcDbObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcGeMatrix3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns the transform of the child object in the parent object.
</summary>
        </member>
        <member name="T:AcDbParentTransformOfChildPE">
            <summary>
Protocol extension used by AcDbCompoundObjectId::getTransform() to find the 
transform that the parent object applies to its child object, if the AcDbCompoundObjectId 
contains a whole path of objects. For example for AcDbBlockReference the returned 
transform is AcDbBlockReference::blockTransform(). If the path contains other parent 
objects than AcDbBlockReference (it seems to be allowed, e.g. the parent object may
be a custom entity), the parent object may specify the transform. If the parent object
does not expose this PE, an identify transform is assumed.
</summary>
        </member>
        <member name="M:AcDbCompoundObjectId.nullId">
            <summary> Returns an empty AcDbCompoundObjectId. </summary>
        </member>
        <member name="M:AcDbCompoundObjectId.dxfInFields(AcDbDxfFiler*,AcDbDatabase*,System.Int32)">
            <remarks>
The ownerVersion greater or equal to 0 means the new format, less than 0
means the old format (w/o the class name and object version) that we need 
to maintain only to be able to read Beta1/2 drawings.
</remarks>
        </member>
        <member name="M:AcDbCompoundObjectId.dwgInFields(AcDbDwgFiler*,System.Int32)">
            <remarks>
The ownerVersion greater or equal to 0 means the new format, less than 0
means the old format (w/o the class name and object version) that we need 
to maintain only to be able to read Beta1/2 drawings.
</remarks>
        </member>
        <member name="M:AcDbCompoundObjectId.remap(AcDbIdMapping!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Remaps all the AcDbObjectIds in this AcDbCompoundObjectId by 
the given AcDbIdMapping. Returns true if any remapping actually happened, 
false otherwise. </summary>
            <param name="idMap"> See the description of the AcDbIdMapping class. </param>
            <returns> True if some ids actually changed, false otherwise. </returns>
        </member>
        <member name="M:AcDbCompoundObjectId.getTransform(AcGeMatrix3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> 
Returns the compound transform from the leaf object to the world,
concatennating all the AcDbBlockReference transforms, from the most nested
one to the topmost one. This transformation represents mapping of the
coordinates of the leaf-level object from its AcDbBlockTableRecord 
coordinate space to the world coordinate space.
</summary>
            <param name="trans"> The returned compound transform. </param>
            <returns> Acad::ErrorStatus. </returns>
        </member>
        <member name="M:AcDbCompoundObjectId.isSimpleObjectId">
            <summary> Returns true if there is no path, only the leaf id (which may be null). 
</summary>
        </member>
        <member name="M:AcDbCompoundObjectId.isExternal">
            <summary> Returns true if the AcDbCompoundObjectId is from an external 
drawing. </summary>
        </member>
        <member name="M:AcDbCompoundObjectId.isValid(System.Int32)">
            <summary> Returns true if the AcDbCompoundObjectId is valid. The given
validityCheckingLevel specifies the level of testing. Bigger number means
more thorough checks are being performed. At this moment the 
validityCheckingLevel argument is unused but will be used in the future.
</summary>
        </member>
        <member name="M:AcDbCompoundObjectId.isEmpty">
            <summary> Checks if the AcDbCompoundObjectId contains no data. </summary>
        </member>
        <member name="M:AcDbCompoundObjectId.setFullPath(AcArray&lt;AcDbObjectId,AcArrayMemCopyReallocator&lt;AcDbObjectId&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbDatabase*)">
            <summary> Sets this AcDbCompoundObjectId from the path that contains the 
path of AcDbBlockReferences apppended by the leaf AcDbObjectId. 
</summary>
            <param name="fullPath"> The path of AcDbBlockReferences and the leaf level 
object itself as the last element of the array.
</param>
            <param name="pHostDatabase"> The host database. If null, the database 
is taken from the first AcDbBlockReference id in the fullPath. </param>
            <returns> Acad::ErrorStatus. </returns>
        </member>
        <member name="M:AcDbCompoundObjectId.set(AcDbObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcArray&lt;AcDbObjectId,AcArrayMemCopyReallocator&lt;AcDbObjectId&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbDatabase*)">
            <summary> 
Sets this AcDbCompoundObjectId from an ordinary AcDbObjectId and a path
of AcDbBlockReferences. If the host database is null, the host database 
is obtained from the first id in the path. Even if it is in XREF database, 
the database hosting the XREF is obtained.
</summary>
            <param name="id"> AcDbObjectId of the AcDbObject that this AcDbCompoundObjectId 
is going to reference. </param>
            <param name="path"> The path of AcDbBlockReferences that lead to the
referenced object. The first AcDbBlockReference in the path resides in the 
host database, the second AcDbBlockReference is from the AcDbBlockTableRecord
that the first AcDbBlockReference references, the third AcDbBlockReference 
is from the AcDbBlockTableRecord that the second AcDbBlockReference 
references, etc. </param>
            <param name="pHostDatabase"> The host database. If null, the database 
is taken from the first AcDbBlockReference id in the path (even if it is 
in XREF database). </param>
            <returns> Acad::ErrorStatus. </returns>
        </member>
        <member name="M:AcDbCompoundObjectId.set(AcDbCompoundObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbDatabase*)">
            <summary> Sets this AcDbCompoundObjectId from another AcDbCompoundObjectId. </summary>
        </member>
        <member name="M:AcDbCompoundObjectId.set(AcDbObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbDatabase*)">
            <summary> 
Sets this AcDbCompoundObjectId from an ordinary AcDbObjectId. If the
host database is null, the host database is obtained from the given 
AcDbObjectId. Even if it is in XREF database, the database hosting the 
XREF is obtained.
</summary>
            <param name="id"> AcDbObjectId of the AcDbObject that this AcDbCompoundObjectId 
is going to reference. </param>
            <param name="pHostDatabase"> The host database. If null, the database 
is taken from the AcDbObjectId (even if it is in XREF database). </param>
        </member>
        <member name="M:AcDbCompoundObjectId.setEmpty">
            <summary> Sets the AcDbCompoundObjectId to be empty, containing no data. </summary>
        </member>
        <member name="M:AcDbCompoundObjectId.getPath(AcArray&lt;AcDbObjectId,AcArrayMemCopyReallocator&lt;AcDbObjectId&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns the AcDbBlockReference path. </summary>
        </member>
        <member name="M:AcDbCompoundObjectId.getFullPath(AcArray&lt;AcDbObjectId,AcArrayMemCopyReallocator&lt;AcDbObjectId&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Returns the full path, i.e. the given path of AcDbBlockReference
ids appended with the leaf AcDbObjectId.
</summary>
        </member>
        <member name="M:AcDbCompoundObjectId.leafId">
            <summary> Returns the leaf-node AcDbObjectId that resides in the 
AcDbBlockTableRecord that the last AcDbBlockReference in the path references, 
or simply the AcDbObjectId if there is no path. 
</summary>
        </member>
        <member name="M:AcDbCompoundObjectId.topId">
            <summary> Returns the first AcDbObjectId (of an AcDbBlockReference) 
in the path, or the leaf-node AcDbObjectId, if there is no path.
</summary>
        </member>
        <member name="M:AcDbCompoundObjectId.#ctor(AcDbObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcArray&lt;AcDbObjectId,AcArrayMemCopyReallocator&lt;AcDbObjectId&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbDatabase*)">
            <summary> 
Creates AcDbCompoundObjectId from an ordinary AcDbObjectId and a path
of AcDbBlockReferences. If the host database is null, the host database 
is obtained from the first id in the path. Even if it is in XREF database, 
the database hosting the XREF is obtained.
</summary>
            <param name="id"> AcDbObjectId of the AcDbObject that this AcDbCompoundObjectId 
is going to reference. </param>
            <param name="path"> The path of AcDbBlockReferences that lead to the
referenced object. The first AcDbBlockReference in the path resides in the 
host database, the second AcDbBlockReference is from the AcDbBlockTableRecord
that the first AcDbBlockReference references, the third AcDbBlockReference 
is from the AcDbBlockTableRecord that the second AcDbBlockReference 
references, etc. </param>
            <param name="pHostDatabase"> The host database. If null, the database 
is taken from the first AcDbBlockReference id in the path (even if it is 
in XREF database). </param>
        </member>
        <member name="M:AcDbCompoundObjectId.#ctor(AcDbCompoundObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Copy constructor. </summary>
        </member>
        <member name="M:AcDbCompoundObjectId.#ctor(AcDbObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbDatabase*)">
            <summary> 
Creates AcDbCompoundObjectId from an ordinary AcDbObjectId. If the
host database is null, the host database is obtained from the given 
AcDbObjectId. Even if it is in XREF database, the database hosting the 
XREF is obtained.
</summary>
            <param name="id"> AcDbObjectId of the AcDbObject that this AcDbCompoundObjectId 
is going to reference. </param>
            <param name="pHostDatabase"> The host database. If null, the database 
is taken from the AcDbObjectId (even if it is in XREF database). </param>
        </member>
        <member name="M:AcDbCompoundObjectId.#ctor">
            <summary> 
The default constructor creates an empty AcDbCompoundObjectId.
</summary>
        </member>
        <member name="T:AcDbCompoundObjectId">
            <summary>
                <para>
Class used to identify an AcDbObject in an AcDbDatabase when the object is
references via a path of AcDbBlockReferences, and possibly by some other
ways in the future. The object may reside in the host database (the same 
database as the AcDbCompoundObjectId belongs to) or it may reside in an XREF
database or even in an unrelated database.
</para>
                <para>
Notice that if the AcDbCompoundObjectId references an object in another 
database, reactors will be created to keep tract of relevant events happening 
to the database, such as database deletion or XREF unload/reload.
</para>
            </summary>
        </member>
        <member name="M:AcDbSubentGeometry.curve">
            <summary> Returns pointer to the curve of the edge subentity. </summary>
            <returns> Pointer to the curve of the edge subentity. The curve is not
owned by this AcDbSubentGeometry. </returns>
        </member>
        <member name="M:AcDbSubentGeometry.point">
            <summary> Returns coordinates of the vertex subentity. </summary>
            <returns> Coordinates of the vertex subentity. </returns>
        </member>
        <member name="M:AcDbSubentGeometry.type">
            <summary> Returns AcDb::SubentType of the subentity. </summary>
            <returns> AcDb::SubentType. </returns>
        </member>
        <member name="M:AcDbSubentGeometry.#ctor(AcGeCurve3d*)">
            <summary> Constructor initializing with an edge subnetity. </summary>
            <param name="pCurve"> The curve is not owned by this AcDbSubentGeometry. </param>
        </member>
        <member name="M:AcDbSubentGeometry.#ctor(AcGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Constructor initializing with a vertex subentity. </summary>
            <param name="pnt"> The coordinates of the point subentity. </param>
        </member>
        <member name="M:AcDbSubentGeometry.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:AcDbSubentGeometry">
            <summary>
A simple class that just keeps geometry of a vertex or edge subentity.
</summary>
            <remarks>
Notice that no copy constructor, assignment operator or destructor are 
implemented that would manage the referenced curve. The AcDbSubentGeometry
is not the owner of the curve, it just references it.
</remarks>
        </member>
        <member name="T:AcDbAssocConstraintType">
            <summary> Dimensional constraint type. </summary>
        </member>
        <member name="F:kDiameterAssocConstraintType">
            <summary> Diameter Associate Constraint </summary>
        </member>
        <member name="F:kRadiusAssocConstraintType">
            <summary> Radius Associate Constraint </summary>
        </member>
        <member name="F:kAngle3AssocConstraintType">
            <summary> AcAngleConstraint::kAntiParallelAntiClockwise Associate Constraint </summary>
        </member>
        <member name="F:kAngle2AssocConstraintType">
            <summary> AcAngleConstraint::kParallelClockwise Associate Constraint </summary>
        </member>
        <member name="F:kAngle1AssocConstraintType">
            <summary> AcAngleConstraint::kAntiParallelClockwise Associate Constraint </summary>
        </member>
        <member name="F:kAngle0AssocConstraintType">
            <summary> AcAngleConstraint::kParallelAntiClockwise Associate Constraint </summary>
        </member>
        <member name="F:kVerticalDistanceAssocConstraintType">
            <summary> Vertical Distance Associate Constraint </summary>
        </member>
        <member name="F:kHorizontalDistanceAssocConstraintType">
            <summary> Horizontal Distance Associate Constraint </summary>
        </member>
        <member name="F:kDistanceAssocConstraintType">
            <summary> Distance Associate Constraint </summary>
        </member>
        <member name="F:kNoneAssocConstraintType">
            <summary> None Associate Constraint </summary>
        </member>
        <member name="T:AcDbAssocCreateImpObject">
            <summary>
                <para> 
This is mostly for internal use.
</para>
                <para>
A way to tell the API class constructor whether it should create the 
corresponding imp object derived from AcDbImpObject, or whether the derived 
API class constructor is going to create its derived imp object.
</para>
                <para>
When the base class constructor is called from the derived class 
constructor, the AcDbAssocCreateImpObject argument should be passed as 
kAcDbAssocDoNotCreateImpObject so that the base class does not create an 
imp object, the derived class constructor will create its own derived-class 
imp object. When the base class constructor is called by client code in 
order to create a concrete object, the AcDbAssocCreateImpObject argument 
should be passed as kAcDbAssocCreateImpObject, or omitted, and the constructor
will then create the corresponding imp object.
</para>
            </summary>
        </member>
        <member name="F:kAcDbAssocDoNotCreateImpObject">
            <summary> The API class should not create the corresponding imp object. </summary>
        </member>
        <member name="F:kAcDbAssocCreateImpObject">
            <summary> The API class should create the corresponding imp object. </summary>
        </member>
        <member name="M:AcDbActionsToEvaluateCallback.needsToEvaluate(AcDbObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbAssocStatus,System.Boolean)">
            <summary>
                <para>
This callback method is called by AcDbAssocAction::getDependentActionsToEvaluate().
It is a mechanism by which getDependentActionsToEvaluate() informs that 
an AcDbAssocAction, AcDbAssocDependency, or an AcDbObject needs to be 
evaluated and suggests new status for them that the callback implementation 
should set. If the given AcDbObjectId is not of an action or of a dependency, 
but of an arbitrary AcDbObject, the callback implementation should simply 
recursively call needsToEvaluate() for all dependencies on that object.
</para>
                <para>
This callback does not need to be implemented by the client code. The 
Associative Framework evaluation mechanism provides a default implementation 
that it uses when calculating a transitive closure of all actions that 
need to be evaluated.
</para>
            </summary>
            <param name="objectId"> 
AcDbObjectId of an AcDbAssocAction, AcDbAssocDependency or an arbitrary 
AcDbObject that needs to be evaluated. 
</param>
            <param name="newStatus"> 
The new evaluation request status of the action or dependency. If it
is not an evaluation request, the needsToEvaluate() implementation 
should not change the status of the action or dependency.
</param>
            <param name="ownedActionsAlso"> 
If the action that needs to evaluate is an AcDbAssocNetwork, this argument
controls whether all the actions owned by the network also need to be 
evaluated. The caller usually passes true.
</param>
        </member>
        <member name="M:AcDbActionsToEvaluateCallback.Dispose">
            <summary> Virtual destructor. </summary>
        </member>
        <member name="M:AcDbActionsToEvaluateCallback.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:AcDbActionsToEvaluateCallback">
            <summary>
This callback is used by AcDbAssocAction::getDependentActionsToEvaluate() 
method to inform about other actions, dependencies or arbitrary objects that 
should also be evaluated because they depend on the given action that is to 
be evaluated.
</summary>
        </member>
        <member name="M:isDraggingProvidingSubstituteObjects(AcDbAssocEvaluationCallback!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Returns true iff in the middle of dragging and the AcDbAssocDraggingState 
indicates that the dragger is providing substitute non-database resident
objects that are clones of the original database-resident objects.
</summary>
            <param name="pEvaluationCallback"> 
The current AcDbAssocEvaluationCallback. NULL pointer is allowed.
</param>
        </member>
        <member name="M:AcDbAssocEvaluationCallback.getTransformationType">
            <summary> 
Allows the custom evaluation callback code to pass information about what 
type of transformation (which AutoCAD command) has been performed with 
the entities prior to action evaluation. The default implementation 
returns kNotSpecified.
</summary>
            <returns> AcDbAssocTransformationType. </returns>
        </member>
        <member name="M:AcDbAssocEvaluationCallback.getAdditionalData">
            <summary> 
Allows the custom evaluation callback code to pass arbitrary data 
to the actions that are being evaluated. The default implementation 
returns NULL.
</summary>
            <returns> Pointer to AcDbEvalContext or NULL. </returns>
        </member>
        <member name="M:AcDbAssocEvaluationCallback.cancelActionEvaluation">
            <summary>
                <para>
The custom evaluation callback code can request that the action evaluation 
should be cancelled by implementing this callback predicate. The 
AcDbAssocAction::evaluate() method checks this predicate just after 
issuing the beginActionEvaluation() callback, i.e. just before the action 
evaluateOverride() method is called. If a whole associative network is 
evaluated, this predicate is also checked after evaluating each action 
in the network to see if the network evaluation should continue. Custom 
actions can freely add their own calls to check this predicate, 
particularly if the action evaluation is time consuming. 
</para>
                <para>
Once this predicate returns true, requesting the evaluation to be 
cancelled, it should keep returning true, to make sure the evaluation
of the whole associative network is cancelled.
</para>
                <para>
When the evaluation is cancelled, the status of the not-yet evaluated 
actions/networks stays unchanged. The status of the actions/networks 
that have already been evaluated also stays unchanged, i.e. there is no
roll-back of the already made changes. 
</para>
                <para>
This predicate should be used to cancel the evaluation of the whole
associative network, not to selectively control the evaluation of the
individual actions. To selectively enable/disable the evaluation of 
individual actions, the beginActionEvaluation() callback can bse used. 
Inside this callback the client code can change the status of the action 
being evaluated to a status that is not an evaluation request, such as 
change it to kSuppressedAssocStatus, kFailedToEvaluateAssocStatus, 
kIsUpToDateAssocStatus, and the action is then not going to be evaluated.
</para>
            </summary>
            <returns> Returns true iff the evaluation should be cancelled. </returns>
        </member>
        <member name="M:AcDbAssocEvaluationCallback.draggingState">
            <summary> 
The action may inquire the client code whether the evaluation is 
happening from inside of the dragging loop and at which stage the 
dragging is. The custom evaluation callback code may provide this 
information by implementing this callback.
</summary>
            <returns> Returns the dragging state. </returns>
        </member>
        <member name="M:AcDbAssocEvaluationCallback.allDependentActionsMarkedToEvaluate(AcDbAssocNetwork*)">
            <summary>
                <para>
Called during the network evaluation to notify that all actions that need to
be evaluated have been marked to evaluate. This concludes the first phase of
the evaluation process. After this notification all the marked actions are 
then sequentially evaluated. 
</para>
                <para>
The notification is only issued once, for the top-level network that is being 
evaluated, not for the individual subnetworks of the top-level network.
</para>
            </summary>
            <param name="pNetwork"> AcDbAssocNetwork whose all actions that need to 
be evaluated have been marked to evaluate. 
</param>
        </member>
        <member name="M:AcDbAssocEvaluationCallback.endActionEvaluationUsingObject(AcDbAssocAction*,AcDbObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbObject*)">
            <summary> 
The action informs that it is done with using or modifying an AcDbObject. 
The action issues this callback just before it closes the object. If the 
object is a substitute object provided by the client code, the action 
does not close it.
</summary>
            <param name="pAction"> The action that is being evaluated. </param>
            <param name="objectId"> 
The same AcDbObjectId that has been previously passed to the matching
beginActionEvaluationUsingObject() callback.
</param>
            <param name="pObject"> 
The object that has been used or modified by the action. It may be NULL
if the original object couldn't be opened or if the substitute object 
was not of the expected type.
</param>
        </member>
        <member name="M:AcDbAssocEvaluationCallback.beginActionEvaluationUsingObject(AcDbAssocAction*,AcDbObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,AcDbObject**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
                <para>
The action informs that it is going to use or modify an AcDbObject. The 
action issues this callback just before it opens the object for read or 
write. 
<para />
The custom evaluation callback code may pass back a pointer to a 
substitute AcDbObject. If it happens, the action should use or modify this 
substitute object instead of the original object. The substitute object 
is expected to already be correctly open for read or write (if it is a 
database-resident object), the action does not need to open or close it. 
Also, the substitute object may possibly be a non-database-resident 
object and the action should be ok with it.
<para />
This allows the custom evaluation callback code to redirect the action 
evaluation to use or modify other objects than the action depends on. 
A common example is dragging, when the action may be redirected to use 
and modify temporary non-database resident clones of the original objects. 
The custom evaluation callback code creates non-database resident clones 
of any relevant AcDbEnities when notified by the action that the action 
is going to modify them, and the action then modifies these temporary 
clones. The modified clones are then drawn and discarded, the original 
objects remain untouched. 
<para />
There is an AcDbAssocObjectPointer template class that is
modelled after AcDbObjectPointer template class and that simplifies
the client action evaluation code that needs to perform this redirection.
The AcDbAssocObjectPointer constructor automatically calls
the beginActionEvaluationUsingObject() method and the destructor calls
the endActionEvaluationUsingObject() method. All the client code needs
to do is to use this template class and then use the AcDbObject pointer
this template class provides. The pointer will point either to the 
original database-resident object or to the substitute object, if the 
evaluation is in progress and the client evaluation callback provided 
a substitute object.
</para>
            </summary>
            <param name="pAction"> The action that is being evaluated. </param>
            <param name="objectId"> The AcDbObject that is going to be used or modified by the action. </param>
            <param name="objectIsGoingToBeUsed"> The object contents is going to be used. </param>
            <param name="objectIsGoingToBeModified"> The object contents is going to be modified. </param>
            <param name="pSubstituteObject"> 
An AcDbObject optionally provided by the custom evaluation callback code. 
The custom evaluation callback code should not assign NULL to this output 
argument if it does not want to provide a substitute object. It should 
only assign a non-NULL pointer if it intends to provide a substitute object.
</param>
        </member>
        <member name="M:AcDbAssocEvaluationCallback.setActionEvaluationErrorStatus(AcDbAssocAction*,Acad.ErrorStatus,AcDbObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbObject*,System.Void*)">
            <summary> 
The action informs that an error happened during its evaluation. It does
not need to inform if no error happened. The action may also inform about 
which object caused the failure, giving its id, pointer or both, and 
provide arbitrary additional info.
</summary>
            <param name="pAction"> The action that is being evaluated. </param>
            <param name="errorStatus"> Action evaluation error status. </param>
            <param name="objectId"> The failed object id (such as of an AcDbAssocDependency). </param>
            <param name="pObject"> The failed object pointer (such as of an AcDbAssocDependency). </param>
            <param name="pErrorInfo"> Additional info about the error. </param>
        </member>
        <member name="M:AcDbAssocEvaluationCallback.endActionEvaluation(AcDbAssocAction*)">
            <summary> 
The action informs that it has finished its evaluation. This callback
is issued at the end of AcDbAssocAction::evaluate() call 
and should not be issued from the individual evaluate() method calls.
The action is open for write when this callback is issued.
</summary>
            <param name="pAction"> The action that is being evaluated. </param>
        </member>
        <member name="M:AcDbAssocEvaluationCallback.beginActionEvaluation(AcDbAssocAction*)">
            <summary> 
The action informs that it is starting its evaluation. This callback 
is issued at the beginning of AcDbAssocAction::evaluate() call 
and should not be issued from the individual evaluateOverride() method 
calls. The action is open for write when this callback is issued.
</summary>
            <param name="pAction"> The action that is being evaluated. </param>
        </member>
        <member name="M:AcDbAssocEvaluationCallback.evaluationMode">
            <summary> 
The action needs to call this method at the beginning of the evaluate()
code to obtain the mode in which it should evaluate itself. 
The default implementation returns kModifyObjectsEvaluationMode.
</summary>
            <returns> The requested evaluation mode. </returns>
        </member>
        <member name="M:AcDbAssocEvaluationCallback.Dispose">
            <summary> Virtual destructor. </summary>
        </member>
        <member name="M:AcDbAssocEvaluationCallback.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="T:AcDbAssocEvaluationCallback">
            <summary>
                <para>
A mechanism for AcDbAssocActions to notify about the progress of evaluation, 
to report success or failure, notify about which objects the action is
going to use and modify, to allow the evaluation to be cancelled by the
client, etc.
</para>
                <para>
Pointer to an object of AcDbAssocEvaluationCallback class in a mandatory
argument to the AcDbAssocAction::evaluate() method. AcDbAssocManager manages 
an ordered collection of global AcDbAssocEvaluationCallbacks grouped in an
AcDbAssocEvaluationMultiCallback. AcDbAssocManager::evaluateTopLevelNetwork() 
passes this multi-callback to the AcDbAssocAction::evaluate() method of the 
top-level network.
</para>
            </summary>
        </member>
        <member name="T:AcDbAssocTransformationType">
            <summary>
Information about what type of transformation (which AutoCAD command) has 
been performed with the entities before the actions that have dependencies
on these entities are evaluated.
</summary>
        </member>
        <member name="F:kMove">
            <summary> Geometries have been changed through move command. </summary>
        </member>
        <member name="F:kRotate">
            <summary> Geometries have been changed through rotate command. </summary>
        </member>
        <member name="F:kStretch">
            <summary> Geometries have been changed through strech command. </summary>
        </member>
        <member name="F:kNotSpecified">
            <summary> Transformation type not specified. </summary>
        </member>
        <member name="T:AcDbAssocDraggingState">
            <summary>
While in the middle of evaluation, the action may inquire the client code 
whether the evaluation is happening from inside of the dragging loop and 
at which stage the dragging is.
</summary>
        </member>
        <member name="F:kLastSampleAssocDraggingState">
            <summary> The last drag sample of the dragging loop. </summary>
        </member>
        <member name="F:kIntermediateSampleAssocDraggingState">
            <summary> An intemediate drag sample of the dragging loop. </summary>
        </member>
        <member name="F:kFirstSampleAssocDraggingState">
            <summary> The first drag sample of the dragging loop. </summary>
        </member>
        <member name="F:kNotDraggingAssocDraggingState">
            <summary> Not inside the dragging loop. </summary>
        </member>
        <member name="T:AcDbAssocEvaluationMode">
            <summary>
At the beginning of AcDbAssocActionBody::evaluateOverride() implementation, 
the custom code needs to query the mode in which it should evaluate itself. 
</summary>
        </member>
        <member name="F:kModifyActionAssocEvaluationMode">
            <summary>
                <para> 
The action evaluation mode in which the action is modified so that it 
satisfies the objects the action depends on. The objects are not 
modified, the internal data in the action or its dependencies are. An
example is an AcDbAssoc2dConstraintGroup action that may remove the 
constraints that are not satisfied by the current geometry configuration.
</para>
                <para>
If this cannot be achieved, the action needs to report an error and 
set its status to kFailedToEvaluateAssocStatus or possibly to 
kErasedAssocStatus (if it wants itself to be erased.)
</para>
            </summary>
        </member>
        <member name="F:kModifyObjectsAssocEvaluationMode">
            <summary>
                <para> 
The standard action evaluation mode in which the objects the action 
depends-on via write-dependencies are modified so that they satisfy 
the requirements imposed on them by the action. 
</para>
                <para>
If this cannot be achieved, the action needs to report an error and 
set its status to kFailedToEvaluateAssocStatus or possibly to 
kErasedAssocStatus (if it wants itself to be erased.)
</para>
            </summary>
        </member>
        <member name="T:AcDbAssocEvaluationPriority">
            <summary>
Negative numbers mean that an AcDbAssocAction cannot be evaluated at this 
time, positive numbers mean that the action can now be evaluated. Higher 
positive priority numbers mean that the action should be evaluated sooner, 
ahead of actions with lower positive priority. The negative numbers mean 
how much the action cannot be evaluated. The smaller the number, the less 
the action can be evaluated.
</summary>
        </member>
        <member name="F:kCanBeEvaluatedAssocEvaluationPriority">
            <summary> Default "can be evaluated" priority. </summary>
        </member>
        <member name="F:kCannotDermineAssocEvaluationPriority">
            <summary> The action evaluatability cannot be determined at this time. </summary>
        </member>
        <member name="F:kCannotBeEvaluatedAssocEvaluationPriority">
            <summary> Default "can not be evaluated" priority. </summary>
        </member>
        <member name="M:isToBeSkipped(AcDbAssocStatus)">
            <summary>
Returns true iff the AcDbAssocStatus indicates that the action or dependency 
should be skipped and treated as it it were not there.
</summary>
            <param name="status"> The AcDbAssocStatus. </param>
            <returns> 
Returns true iff the AcDbAssocStatus indicates that the action or dependency 
should be skipped and treated as it it were not there.
</returns>
        </member>
        <member name="M:isEvaluationRequest(AcDbAssocStatus)">
            <summary>
Returns true for the AcDbAssocStatus values that are a request for an 
AcDbAssocAction or AcDbAssocDependency to be evaluated, and false for 
other AcDbAssocStatus values.
</summary>
            <param name="status"> The AcDbAssocStatus. </param>
            <returns> 
Returns true iff the value of the AcDbAssocStatus indicates that an 
AcDbAssocAction or AcDbAssocDependency needs to be evaluated.
</returns>
        </member>
        <member name="M:evaluationRequestSeverityLevel(AcDbAssocStatus)">
            <summary>
Returns the severity level (positive integer) of those status values that
indicate a request for an AcDbAssocAction or an AcDbAssocDependency to be
evaluated, or 0 if the status does not indicate an evaluation request.
Higher numbers mean more "severe" requests to evaluate.
</summary>
            <param name="status"> The AcDbAssocStatus. </param>
            <returns> 
Evaluation request severity level (positive integer) if or 0 if not a 
request to evaluate.
</returns>
        </member>
        <member name="T:AcDbAssocStatus">
            <summary>
The status of AcDbAssocActions and AcDbAssocDependencies. In case of an
action it relates to the action itself, in case of a dependency it relates
to the object the dependency depends on.
</summary>
        </member>
        <member name="F:kUnresolvedAssocStatus">
            <summary> Dependent-on object is un-resolved (e.g the xref is unloaded). </summary>
        </member>
        <member name="F:kSuppressedAssocStatus">
            <summary> Action evaluation suppressed, treated as if evaluated. </summary>
        </member>
        <member name="F:kErasedAssocStatus">
            <summary> Dependent-on object erased or action is to be erased. </summary>
        </member>
        <member name="F:kFailedToEvaluateAssocStatus">
            <summary> Action failed to evaluate but evaluation continues. 
Otherwise identical to kIsUpToDateAssocStatus. </summary>
        </member>
        <member name="F:kChangedNoDifferenceAssocStatus">
            <summary> No real change, only forces to evaluate. </summary>
        </member>
        <member name="F:kChangedTransitivelyAssocStatus">
            <summary> Changed indirectly due to something else changed. </summary>
        </member>
        <member name="F:kChangedDirectlyAssocStatus">
            <summary> Explicitly changed (such as by the user). </summary>
        </member>
        <member name="F:kIsUpToDateAssocStatus">
            <summary> Everything is in sync. </summary>
        </member>
        <member name="M:AcRxBoxedValueOnStack.value">
            <summary>
Returns the value that is boxed.
</summary>
            <returns>
Returns const reference to an AcRxValue object.
</returns>
            <summary>
Returns the value that is boxed.
</summary>
            <returns>
Returns reference to an AcRxValue object.
</returns>
        </member>
        <member name="M:AcRxBoxedValueOnStack.#ctor(AcRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructor
</summary>
            <param name="value">
Reference to the AcRxValue object that needs to boxed.
</param>
        </member>
        <member name="T:AcRxBoxedValueOnStack">
            <summary>
This class provides the functionality to create fast stack resident 
instances.
</summary>
        </member>
        <member name="M:AcRxBoxedValue.comparedTo(AcRxObject!System.Runtime.CompilerServices.IsConst*)">
            <summary>
For internal use only.
</summary>
        </member>
        <member name="M:AcRxBoxedValue.isEqualTo(AcRxObject!System.Runtime.CompilerServices.IsConst*)">
            <summary>
This method can be used to compare to boxed values.
</summary>
            <param name="other">
Input pointer to object to be compared with this object.
</param>
            <returns>
Returns true if the values are same; otherwise, returns false.
</returns>
        </member>
        <member name="M:AcRxBoxedValue.copyFrom(AcRxObject!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Copies the contents of other into this object, whenever feasible.
</summary>
            <param name="other">
Input pointer to object to copy from.
</param>
            <returns>
Returns Acad::eOk if successful; otherwise, returns an AutoCAD error status.
</returns>
        </member>
        <member name="M:AcRxBoxedValue.clone">
            <summary>
This function creates a clone of the object and returns a pointer to the clone. 
If the function is not successful in creating the clone, then NULL is returned. 
</summary>
            <returns>
Returns pointer to the clone if successful; otherwise it returns NULL.
</returns>
        </member>
        <member name="M:AcRxBoxedValue.newBoxedValueOnHeap(AcRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This function can be used to created heap resident instance of AcRxBoxedValue
object.
</summary>
            <param name="value">
Reference to the AcRxValue object that needs to boxed.
</param>
            <returns>
Returns pointer to the AcRxBoxedValue object that was created on the heap.
</returns>
        </member>
        <member name="M:AcRxBoxedValue.value">
            <summary>
Returns the value that is boxed. The derived class must implement this method.
</summary>
            <returns>
Returns const reference to an AcRxValue object.
</returns>
            <summary>
Returns the value that is boxed. The derived class must implement this method.
</summary>
            <returns>
Returns reference to an AcRxValue object.
</returns>
        </member>
        <member name="T:AcRxBoxedValue">
            <summary>
This is the base class for all boxed types. This class can be used to wrap 
the AcRxValue in an AcRxObject. There are instances where we need to treat the 
non-AcRxObject derived object as an AcRxObject. An example is querying the 
properties of AcGePoint3d which is a non-AcRxObject derived type. In this case we 
can box the AcGePoint3d value, pass the AcRxBoxedValue object that is obtained 
to the property engine to get its properties. 
</summary>
        </member>
        <member name="M:AcRxValue.serializeIn(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt64)">
            <summary>
The function can be used to serialize the AcRxValue in from a byte
array.  The function delegates to the IAcRxNonBlittableType interface
if the underlying type is not blittable. 
</summary>
            <param name="pBytes">
A pointer to the array of bytes to serialize the value from.
</param>
            <param name="maxBytesToRead">
The maximum number of bytest to read from pBytes. May be zero if the 
size of the buffer is unknown.
</param>
            <returns>
Returns the number of bytes serialized in. 
</returns>
        </member>
        <member name="M:AcRxValue.serializeOut(System.Void*,System.UInt64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
The function can be used to serialize the AcRxValue out to a byte
array.  The function delegates to the IAcRxNonBlittableType interface
if the underlying type is not blittable.
</summary>
            <param name="pByteArray"> 
Returned pointer to buffer allocated by the function containing the serialized
bytes of the value.
</param>
            <param name="maxBytesToWrite">
Input size of the pBytes array. On failure the function returns the number of 
bytes needed in this parameter.
</param>
            <returns>
Returns the number of bytes serialized out. The caller is responsible
allocating the input array large enough to hold the value, and passing
the size of the allocated array to this method. On error the method
returns 0 and sets maxBytesToWrite to the size of the buffer required to
hold the value.
</returns>
        </member>
        <member name="M:AcRxValue.getEnumTag">
            <summary>
The function can be used to obtain the AcRxEnumTag from this value. The 
The value type must be an enum. 
</summary>
            <returns> Returns pointer to the AcRxEnumTag object if successful, returns NULL on error. </returns>
        </member>
        <member name="M:AcRxValue.unbox(AcRxObject*)">
            <summary>
The function can be used to get the AcRxValue from AcRxBoxedValue object.
</summary>
            <returns> Returns pointer to AcRxValue object if successful; otherwise it returns NULL </returns>
        </member>
        <member name="M:AcRxValue.unbox(AcRxObject!System.Runtime.CompilerServices.IsConst*)">
            <summary>
The function can be used to get the AcRxValue from AcRxBoxedValue object.
</summary>
            <returns> Returns pointer to AcRxValue object if successful; otherwise it returns NULL </returns>
        </member>
        <member name="M:AcRxValue.op_Equality(AcRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Compares the value for equality with another AcRxValue.
</summary>
            <param name="value">
Input reference to an AcRxValue.
</param>
            <returns>
Returns true if the values are same; otherwise, returns false.
</returns>
        </member>
        <member name="M:AcRxValue.toString(System.Char*,System.UInt64,AcRxValueType.StringFormat)">
            <summary>
This method can be used to obtain the string representation of the value.
</summary>
            <param name="buffer">
Output pointer to the buffer that receives the text.
</param>
            <param name="sizeInACHARs">
Input maximum number of characters to copy to the buffer, including the NULL character.
</param>
            <param name="format">
This information is used while formatting the text, if the string needs to be formatted 
depending on the current locale.
</param>
            <returns>
Returns the number of characters that was written.
</returns>
        </member>
        <member name="M:AcRxValue.varies">
            <summary>
Returns a value that has the type set to varies.
</summary>
            <returns>
Returns const reference to an AcRxValue object that has the type set to varies.
</returns>
        </member>
        <member name="M:AcRxValue.isVaries">
            <summary>
Returns true if the value is varying.
</summary>
            <returns>
Returns true if the value is varying; otherwise, returns false.
</returns>
        </member>
        <member name="M:AcRxValue.empty">
            <summary>
Returns a value that is empty.
</summary>
            <returns>
Returns const reference to an AcRxValue object that is empty.
</returns>
        </member>
        <member name="M:AcRxValue.isEmpty">
            <summary>
Returns true if the current value is empty.
</summary>
            <returns>
Returns true if the current value is empty; otherwise, returns false.
</returns>
        </member>
        <member name="M:AcRxValue.type">
            <summary>
Returns the type of the value.
</summary>
            <returns>
Returns the type of the AcRxValue object.
</returns>
        </member>
        <member name="M:AcRxValue.Dispose">
            <summary>
Destructor

If the type is non-blittable then destructor of the type is called.
</summary>
        </member>
        <member name="M:AcRxValue.op_Assign(AcRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Assignment operator. Copies all the data from the input AcRxValue 
object to this object.

</summary>
            <param name="rhs">
Input source AcRxValue object.
</param>
            <returns>
Returns const reference to this AcRxValue object.
</returns>
        </member>
        <member name="M:AcRxValue.#ctor(AcRxValueType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
The object can be constructed using the type and value.
For example, we can use this to create an enumerated type from an integer.

</summary>
            <param name="type">
The type of the object.
</param>
            <param name="value">
Input value of the object.
</param>
        </member>
        <member name="M:AcRxValue.#ctor(AcRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Copy constructor. Instantiates an object initialized to the same content as the input object.
</summary>
            <param name="rhs">
Another AcRxValue object.
</param>
        </member>
        <member name="M:AcRxValue.#ctor">
            <summary>
Default constructor, the value type is empty.
</summary>
        </member>
        <member name="T:AcRxValue">
            <summary>
This is a variant type, an instance of this class can hold any 
AcRxValueType.
</summary>
        </member>
        <member name="M:AcRxMemberOverrule.removeOverrules(AcArray&lt;AcRxMemberOverrule.Record,AcArrayObjectCopyReallocator&lt;AcRxMemberOverrule.Record&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Removes overrules
</summary>
            <param name="overrules">
Member, overrule pairs to remove.
</param>
        </member>
        <member name="M:AcRxMemberOverrule.removeOverrule(AcRxMember*,AcRxMemberOverrule*)">
            <summary>
Removes an overrule from the specified member.
</summary>
            <param name="pOverruledSubject">
The member from which to remove the overrule from.
</param>
            <param name="pOverrule">
The overrule object to be removed.
</param>
        </member>
        <member name="M:AcRxMemberOverrule.addOverrule(AcRxMember*,AcRxMemberOverrule*,System.Boolean)">
            <summary>
Adds an overrule for the specified member.
</summary>
            <param name="pOverruledSubject">
The member whose behavior is to be modified.
</param>
            <param name="pOverrule">
The overrule object to be added.
</param>
            <param name="bAddAtLast">
Parameter the determines what order the overrules are executed. Normally, the last overrule
to be added is the one to be executed first.
</param>
        </member>
        <member name="T:AcRxMemberOverrule">
            <summary>
Base class for overrules for AcRxMember.
</summary>
        </member>
        <member name="M:AcRxMemberQueryEngine.removeReactor(AcRxMemberReactor*)">
            <summary>
Removes AcRxMemberReactor reactor
</summary>
            <param name="pReactor">
Input AcRxMemberReactor to remove
</param>
        </member>
        <member name="M:AcRxMemberQueryEngine.addReactor(AcRxMemberReactor*)">
            <summary>
Adds AcRxMemberReactor reactor
</summary>
            <param name="pReactor">
Input AcRxMemberReactor to add
</param>
        </member>
        <member name="M:AcRxMemberQueryEngine.removeFacetProvider(AcRxFacetProvider*)">
            <summary>
This method can be be used to remove a facet provider. 
</summary>
            <param name="pProvider">
Input facet provider that is to be removed.
</param>
            <returns> Returns Acad::eOk if successful; otherwise, returns an AutoCAD error status. </returns>
        </member>
        <member name="M:AcRxMemberQueryEngine.addFacetProvider(AcRxFacetProvider*)">
            <summary>
This method can be be used to add a facet provider. 
</summary>
            <param name="pProvider">
Input facet provider that is to be added.
</param>
            <returns> Returns Acad::eOk if successful; otherwise, returns an AutoCAD error status. </returns>
        </member>
        <member name="M:AcRxMemberQueryEngine.promotingContext">
            <summary>
This method can be used to query the promotingContext that can be 
used to query for members. The promoting context can be used when 
certain members need to be promoted with respect to certain other 
members. For example using the promoting context we can get 
three promoted members Start X, Start Y and Start Z, instead of 
a StartPoint member. 
</summary>
            <returns> 
Returns pointer to AcRxPromotingQueryContext.
</returns>
        </member>
        <member name="M:AcRxMemberQueryEngine.defaultContext">
            <summary>
This method can be used to query the defaultContext that can be 
used to query for members.
</summary>
            <returns> 
Returns pointer to AcRxMemberQueryContext.
</returns>
        </member>
        <member name="M:AcRxMemberQueryEngine.newMemberIterator(AcRxObject!System.Runtime.CompilerServices.IsConst*,AcRxMemberQueryContext!System.Runtime.CompilerServices.IsConst*)">
            <summary>
This method can be used to get the members of an object.
</summary>
            <param name="pO">
Input object to query for members.
</param>
            <param name="pContext">
Optional. Input the context data that is used to query the members.
</param>
            <returns> 
Returns pointer to AcRxMemberIterator if there are members, otherwise returns NULL.
</returns>
        </member>
        <member name="M:AcRxMemberQueryEngine.find(AcRxObject!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,AcRxMemberQueryContext!System.Runtime.CompilerServices.IsConst*)">
            <summary>
This method can be used to find an AcRxMember of an object using the name.
</summary>
            <param name="pO">
Input object that need to be searched for the member.
</param>
            <param name="name">
Input the name of the member to find.
</param>
            <param name="pContext">
Optional. Input the context data that is used to query the member.
</param>
            <returns> 
Returns pointer to an AcRxMember if successful, otherwise returns NULL.
</returns>
        </member>
        <member name="M:AcRxMemberQueryEngine.theEngine">
            <summary>
Returns the singleton object
</summary>
            <returns> 
Returns pointer to an AcRxMemberQueryEngine if successful, otherwise returns NULL.
</returns>
        </member>
        <member name="T:AcRxMemberQueryEngine">
            <summary>
The AcRxMemberQueryEngine object is used to query the members and register the 
facet providers. This class is a singleton with a static method that returns 
a global instance of the object.
</summary>
        </member>
        <member name="M:AcRxMemberReactor.goodbye(AcRxMember!System.Runtime.CompilerServices.IsConst*)">
            <summary>
This function is invoked when the member is being deleted from memory.
</summary>
            <param name="pMember">
Passed in const pointer to the object being destroyed.
</param>
        </member>
        <member name="M:AcRxMemberReactor.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="T:AcRxMemberReactor">
            <summary>
The AcRxMemberReactor can be used to get AcRxMember notifications, like 
when the member is destroyed.
</summary>
        </member>
        <member name="M:AcRxFacetProvider.getFacets(AcRxObject!System.Runtime.CompilerServices.IsConst*,AcRxMemberQueryContext!System.Runtime.CompilerServices.IsConst*,AcArray&lt;AcRxClass!System.Runtime.CompilerServices.IsConst**,AcArrayMemCopyReallocator&lt;AcRxClass!System.Runtime.CompilerServices.IsConst**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This method is called by AcRxMemberQueryEngine everytime AcRxMemberQueryEngine::newMemberIterator
is called. The derived class can add the facets that supply additional 
members in a given context, to the passed collection.
</summary>
            <param name="pO">
Input object, which is queried for its members.
</param>
            <param name="pContext">
Input query context object. 
</param>
            <param name="facets">
Reference to the facet collection. The class can add facets that 
supply additonal members.
</param>
        </member>
        <member name="T:AcRxFacetProvider">
            <summary>
Abstract base class for all facet providers. The class provides a mechanism 
to supply additional members for a given class in a given context. The 
derived class can register as a facet provider using AcRxMemberQueryEngine 
engine. The engine will call getFacets with the object whose members are 
being queried, along with the context. The class can add the facet objects 
that supply the additional members to the facet collection that is passed.
</summary>
        </member>
        <member name="M:AcRxMemberQueryContext.subNewMemberIterator(AcArray&lt;AcRxClass!System.Runtime.CompilerServices.IsConst**,AcArrayMemCopyReallocator&lt;AcRxClass!System.Runtime.CompilerServices.IsConst**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
The derived class must override this method and return the members 
appropriate to the context.
</summary>
            <param name="facets">
Input reference to an AcArray object, to receive the facets. 
</param>
            <returns> 
Returns pointer to AcRxMemberIterator if there are members; otherwise, returns NULL.
</returns>
        </member>
        <member name="M:AcRxMemberQueryContext.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:AcRxMemberQueryContext.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="M:AcRxMemberQueryContext.newMemberIterator(AcArray&lt;AcRxClass!System.Runtime.CompilerServices.IsConst**,AcArrayMemCopyReallocator&lt;AcRxClass!System.Runtime.CompilerServices.IsConst**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This method is called by AcRxMemberQueryEngine::newMemberIterator to 
get the members relevant to the context.
</summary>
            <param name="facets">
Input set of classes for which to get the members.
</param>
            <returns> 
Returns the pointer to AcRxMemberIterator if there are members, otherwise it returns NULL.
</returns>
        </member>
        <member name="T:AcRxMemberQueryContext">
            <summary>
This class provides other contextual data about the query to influence 
the set of members. The derived classes can implement their own context 
and return the members relevant to the context. 
</summary>
        </member>
        <member name="M:AcRxMemberIterator.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="M:AcRxMemberIterator.find(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Returns a member identified by the name.
</summary>
            <param name="name">
Input the name that identifies the member to find.
</param>
            <returns> 
Returns the pointer to AcRxMember identified by the string name, or NULL 
if there is no such AcRxMember with the name.
</returns>
        </member>
        <member name="M:AcRxMemberIterator.current">
            <summary>
The function tries to return the value at the iterator's 
current location.
</summary>
            <returns> 
Returns a pointer to AcRxMember if successful, otherwise it returns NULL.
</returns>
        </member>
        <member name="M:AcRxMemberIterator.next">
            <summary>
Positions the iterator to the next object in the structure. 
</summary>
            <returns> 
Returns true if and only if the iterator is not done.
</returns>
        </member>
        <member name="M:AcRxMemberIterator.done">
            <summary>
The function reports whether the iterator has iterated to the end.
</summary>
            <returns> 
It returns true if it has reached the end, otherwise it returns false.
</returns>
        </member>
        <member name="M:AcRxMemberIterator.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="T:AcRxMemberIterator">
            <summary>
This class provides the ability to iterate through all AcRxMember objects 
of an object
</summary>
        </member>
        <member name="M:AcRxMemberCollectionBuilder.owner">
            <summary>
returns the owner of the collection
</summary>
        </member>
        <member name="M:AcRxMemberCollectionBuilder.add(AcRxMember*)">
            <summary>
This method adds the AcRxMember object to the AcRxMemberCollectionBuilder
object collection.
</summary>
            <param name="member">
Input member object to add to the collection
</param>
            <returns> Returns Acad::eOk if successful; otherwise, returns an AutoCAD error status. </returns>
        </member>
        <member name="T:AcRxMemberCollectionBuilder">
            <summary>
This class can be used to return collection of AcRxMember objects
</summary>
        </member>
        <member name="M:AcRxMemberCollection.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="M:AcRxMemberCollection.getAt(System.Int32)">
            <summary>
This method returns a member at the passed in index.
</summary>
            <param name="index">
Passed in index of interest
</param>
            <returns>
Returns a pointer to AcRxMember object at the passed in index.
</returns>
        </member>
        <member name="M:AcRxMemberCollection.count">
            <summary>
Returns the number of members in the collection.
</summary>
            <returns>
Returns the number of AcRxMember objects in the collection 
</returns>
        </member>
        <member name="M:AcRxMemberCollection.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="T:AcRxMemberCollection">
            <summary>
This class is a collection of AcRxMember objects.
</summary>
        </member>
        <member name="M:AcRxEnumTag.subAlternateLocalName">
            <summary>
Derived class can override this method to provide custom implementation.
</summary>
            <returns>
Returns AcString object that contains the name 
</returns>
        </member>
        <member name="M:AcRxEnumTag.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:AcRxEnumTag.alternateLocalName">
            <summary>
Returns a localized string representation of the 
enumeration constant, if available. If the member has 
alternate localized name attribute, then it tries to return
the alternate localized string representation using the 
AcRxAlternateLocalizedNameAttribute information.
</summary>
            <returns>
Returns AcString object that contains the name 
</returns>
        </member>
        <member name="M:AcRxEnumTag.value">
            <summary>
Returns the value of the enumeration constant.
</summary>
            <returns>
Returns const reference to an AcRxValue value 
</returns>
        </member>
        <member name="M:AcRxEnumTag.#ctor(System.Char!System.Runtime.CompilerServices.IsConst*,AcRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructor
</summary>
            <param name="name">
The text that is used for the string representation of the constant.
</param>
            <param name="value">
The value of the enumeration constant.
</param>
        </member>
        <member name="T:AcRxEnumTag">
            <summary>
This class is used to store the enumeration constant value.
</summary>
        </member>
        <member name="M:AcRxMember.subChildrenEx(AcArray&lt;AcRxMember!System.Runtime.CompilerServices.IsConst**,AcArrayMemCopyReallocator&lt;AcRxMember!System.Runtime.CompilerServices.IsConst**&gt;&gt;**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
The function returns the children of the member.
The difference between subChildren and subChildrenEx is in memory management. 
Derived classes that override this function are responsible for managing the pChildren 
array - allocationg and deleting. the base class will not hold on to the array and will not call it 
The default implementation calls subChildren first. If that method returns Acad::eNotApplicable,
the subChildrenEx is called. 

</summary>
            <param name="children">
Output reference to an AcArray object, that contains the children. 
</param>
            <returns> Returns Acad::eOk if successful; otherwise, returns an AutoCAD error status. </returns>
        </member>
        <member name="M:AcRxMember.subChildren(AcArray&lt;AcRxMember!System.Runtime.CompilerServices.IsConst**,AcArrayMemCopyReallocator&lt;AcRxMember!System.Runtime.CompilerServices.IsConst**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
The function returns the children of the member.
The difference between subChildren and subChildrenEx is in memory management. 
Derived class can override function to provide custom implementation. The changes to the children array
are cached after the initial call and the derived class will not have a chance to modify the array 
on subsequent calls to children()
The default implementation calls subChildren first. If that method returns Acad::eNotApplicable,
then subChildrenEx is called. 
</summary>
            <param name="children">
Input reference to an AcArray object, to receive the children. 
</param>
            <returns> Returns Acad::eOk if successful; otherwise, returns an AutoCAD error status. </returns>
        </member>
        <member name="M:AcRxMember.subLocalName">
            <summary>
The function returns the localized name of the member, if any.
Derived class can override function to provide custom implementation.
</summary>
            <returns>
Returns AcString object that contains the name 
</returns>
        </member>
        <member name="M:AcRxMember.new(System.UInt64,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
            <summary>
debug new operator
</summary>
        </member>
        <member name="M:AcRxMember.new(System.UInt64)">
            <summary>
new operator
</summary>
        </member>
        <member name="M:AcRxMember.deleteMember(AcRxMember!System.Runtime.CompilerServices.IsConst*)">
            <summary>
deletes the member passed in and sends "goodbye" notification via AcRxMemberReactor.
</summary>
        </member>
        <member name="M:AcRxMember.children">
            <summary>
Returns the children of this member.
</summary>
            <returns>
Returns pointer to an AcArray object if it has children 
</returns>
        </member>
        <member name="M:AcRxMember.owner">
            <summary>
Returns the owner of this member.
</summary>
            <returns>
Returns pointer to an AcRxObject if it has an owner, otherwise it returns NULL 
</returns>
        </member>
        <member name="M:AcRxMember.attributes">
            <summary>
Returns the immutable collection of attributes for this member.
</summary>
            <returns>
Returns const reference to an AcRxAttributeCollection object 
</returns>
            <summary>
Returns the collection of attributes for this member.
</summary>
            <returns>
Returns reference to an AcRxAttributeCollection object 
</returns>
        </member>
        <member name="M:AcRxMember.type">
            <summary>
Returns the type of the member.
</summary>
            <returns>
Returns const reference to an AcRxValueType object 
</returns>
        </member>
        <member name="M:AcRxMember.localName">
            <summary>
Returns the localized name of the member, if any.
</summary>
            <returns>
Returns AcString object that contains the name 
</returns>
        </member>
        <member name="M:AcRxMember.name">
            <summary>
Returns the name of the member
</summary>
            <returns>
Returns const ACHAR* that points to the name 
</returns>
        </member>
        <member name="T:AcRxMember">
            <summary>
Base class for all members. Encapsulates common member properties and 
behavior.
</summary>
        </member>
        <member name="M:AcDbHostApplicationServices.getPassword(System.Char!System.Runtime.CompilerServices.IsConst*,AcDbHostApplicationServices.PasswordOptions,AcString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This function is called internally by host applications such as AutoCAD and other ObjectARX applications 
(via the readDwgFile() and acedSyncFileOpen() functions) to display a password-request dialog box. 
</summary>
            <param name="dwgName">Name of the drawing file that is requiring a password </param>
            <param name="options">Boolean indicating whether dwgName refers to an xref'd drawing </param>
            <param name="password">Return password obtained from the user </param>
            <returns>Return true if succeed, false otherwise.</returns>
        </member>
        <member name="M:AcDbHostApplicationServices.getDefaultPlotCfgInfo(AcString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This function allows host applications to specify a default device name and style for new AcDbPlotSettings objects
</summary>
            <param name="devName">Default device name (Plot Config Name)</param>
            <param name="styleName">Default style sheet name</param>
        </member>
        <member name="M:AcLocale.op_Implicit~System.Int32">
            <description>
allow implicit conversion to Windows Locale LCID
</description>
        </member>
        <member name="M:AcLocale.#ctor(System.Int32)">
            <description>
allow implicit conversion from Windows Locale LCID
</description>
            <param name="lcid">Windows locale ID</param>
        </member>
        <member name="M:AcLocale.isValid">
            <description>
 Check if the locale object is valid. If there is no language name
 or it can't supported by system, it is invalid.
</description>
            <returns>
 Return true if it is a valide locale object, otherwise false
</returns>
        </member>
        <member name="M:AcLocale.iso2CountryName">
            <description>
 Get the ISO-3166 country name
</description>
            <returns>
 Return a buffer contains iso country name
</returns>
        </member>
        <member name="M:AcLocale.iso2LangName">
            <description>
 Get the ISO-639-1 language name
</description>
            <returns>
 Return a buffer contains iso language name
</returns>
        </member>
        <member name="M:AcLocale.op_Inequality(AcLocale!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <description>
 Check if two locale objects are not equal
</description>
        </member>
        <member name="M:AcLocale.op_Equality(AcLocale!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <description>
 Check if two locale objects are equal
</description>
        </member>
        <member name="M:AcLocale.op_Assign(AcLocale*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <description>
 Move assignment
</description>
        </member>
        <member name="M:AcLocale.#ctor(AcLocale*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <description>
 Move constructor
</description>
        </member>
        <member name="M:AcLocale.op_Assign(AcLocale!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <description>
 Operator assignment
</description>
        </member>
        <member name="M:AcLocale.#ctor(AcLocale!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <description>
 Copy constructor
</description>
        </member>
        <member name="M:AcLocale.Dispose">
            <description>
 Destructor
</description>
        </member>
        <member name="M:AcLocale.#ctor(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <description>
 Create a locale class with language name and country name. If the input country name and
language name is nullptr or empty, it will get the current system locale.
</description>
            <param name="isoLangName">lower-case two-letter codes as defined by ISO-639-1.</param>
            <param name="isoCountryName">the upper-case two-letter codes as defined by ISO-3166. It can be nullptr.</param>
        </member>
        <member name="T:AcFileSelectFlags">
            <summary>
These enum values are used as flags bits in the nFlags argument of
AcDbHostApplicationServices::selectFile(). Some of them are used by
AutoCAD's calls to selectFile() and should not be used by other
callers.  They are included here because they may be seen by
selectFile callback handlers (see
AcadHostApplicationServices::registerSelectFileCallback()).
</summary>
        </member>
        <member name="F:kDLFCloudControls">
            <summary>
Control display on the right side of dialog.
</summary>
        </member>
        <member name="F:kDLFUseCloud">
            <summary>
Force the intial directory to the Autodesk Cloud (only works with anav).
</summary>
        </member>
        <member name="F:kDLFOpenSample">
            <summary>
Open dialog but for opening local/Online sample files.
</summary>
        </member>
        <member name="F:kDLFEnableRememberFolders">
            <summary>
Enable support for REMEMBERFOLDERS sysvar
</summary>
        </member>
        <member name="F:kDLFExport">
            <summary>
AutoCAD EXPORT dialog. Distinguish 2ddwf and 3ddwf action
</summary>
        </member>
        <member name="F:kDLFNoTemplate">
            <summary>
Open with no Template - Imperial or Metric
</summary>
        </member>
        <member name="F:kDLFNoExtensions">
            <summary>
Do not show shell namespace extension sites at all (only works with anav).
</summary>
        </member>
        <member name="F:kDLFFolders">
            <summary>
Select folders only (only works with anav).
</summary>
        </member>
        <member name="F:kDLFNoAnav">
            <summary>
Do not use the anav dialog, force use of Microsoft common file dialog.
</summary>
        </member>
        <member name="F:kDLFNoFTP">
            <summary>
Do not show FTP site (only works with anav).
</summary>
        </member>
        <member name="F:kDLFForceDir">
            <summary>
Force the initial directory to be the argument (only works with anav).
</summary>
        </member>
        <member name="F:kDLFRecover">
            <summary>
Doing a recover.
</summary>
        </member>
        <member name="F:kDLFCLI">
            <summary>
Use the command line to get file name.
</summary>
        </member>
        <member name="F:kDLFMulti">
            <summary>
Allow multiple drawing opens.

WARNING: This flag must not be used in any AutoCAD command
dialogs other then the OPEN command.  It is ok to use it for
non-AutoCAD command dialogs.  For example, it is used in the
acedGetFileNavDialog API to allow multiple file selection and
return multiple file names to the caller.
</summary>
        </member>
        <member name="F:kDLFFrcWarn">
            <summary>
Force overwrite warning in scripts and Lisp
</summary>
        </member>
        <member name="F:kDLFNoPopup">
            <summary>
Don't use last pop-up as the parent window
</summary>
        </member>
        <member name="F:kDLFOpts">
            <summary>
Display the "Options" item
</summary>
        </member>
        <member name="F:kDLFDwt">
            <summary>
Flag templates to lock directories
</summary>
        </member>
        <member name="F:kDLFDvc">
            <summary>
Allow device names to be returned
</summary>
        </member>
        <member name="F:kDLFOpenDef">
            <summary>
Special dialog definition for OPEN
</summary>
        </member>
        <member name="F:kDLFDwgDef">
            <summary>
Default is derived from DWG name
</summary>
        </member>
        <member name="F:kDLFNoURLs">
            <summary>
Internet: do not allow URLs at all
</summary>
        </member>
        <member name="F:kDLFNoXfer">
            <summary>
Internet: do not transfer file
</summary>
        </member>
        <member name="F:kDLFNoLib">
            <summary>
Don't perform library search
</summary>
        </member>
        <member name="F:kDLFSaveas">
            <summary>
SAVEAS use of the dialog. Distinguish .dwg action
</summary>
        </member>
        <member name="F:kDLFRqBox">
            <summary>
User requested dialogue box via ~
</summary>
        </member>
        <member name="F:kDLFAnyExt">
            <summary>
Accept any extension, don't strip
</summary>
        </member>
        <member name="F:kDLFNoExistOk">
            <summary>
Don't check if file exists in Open dialog
</summary>
        </member>
        <member name="F:kDLFNoWarn">
            <summary>
No overwrite warning on Put file
</summary>
        </member>
        <member name="F:kDLFPathOnly">
            <summary>
Default name is path only
</summary>
        </member>
        <member name="F:kDLFDwg">
            <summary>
Special action for drawing file
</summary>
        </member>
        <member name="F:kDLFPut">
            <summary>
Creating file
</summary>
        </member>
        <member name="F:kDLFNoType">
            <summary>
No typeit button. This bit is obsolete.
</summary>
        </member>
        <member name="M:AcGiVisualStyleTraits.acgiVisualStyle">
            <summary>
Reports the visual style that is currently captured in this drawable traits.
</summary>
            <returns>
Returns AcGiVisualStyle const reference to the visual style that is 
currently captured in this drawable traits.
</returns>
        </member>
        <member name="M:AcGiVisualStyleTraits.setAcGiVisualStyle(AcGiVisualStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets the visual style to capture in the drawable traits.
</summary>
            <param name="visualStyle">
Input AcGiVisualStyle const reference to the visual style to capture.
</param>
        </member>
        <member name="T:AcGiVisualStyleTraits">
            <summary> 
This class defines the visual style traits.  Derived from AcGiDrawableTraits,
this class provides the interfaces to implement for setting and returning the
visual style via drawable traits.
</summary>
            <remarks />
        </member>
        <member name="M:AcGiVisualStyle.propertyType(AcGiVisualStyleProperties.Property)">
            <summary>
Gets data type of the specified visual style property.
</summary>
            <param name="prop">
Input enum AcGiVisualStyleProperties::Property.
</param>
            <returns>
Returns the AcGiVariant::VariantType of the specified visual style property.
</returns>
        </member>
        <member name="M:AcGiVisualStyle.traitFlag(AcGiVisualStyleProperties.Property,System.UInt32)">
            <summary>
Gets a property flag from the visual style, for properties which are bitfield enums.
</summary>
            <param name="flagProp">
Input bitfield enum AcGiVisualStyleProperties::Property to get from the visual style.
</param>
            <param name="flagVal">
Input bit flag enum unsigned long property to get from the visual style.
</param>
            <returns>
Returns true if flag is enabled, false otherwise. 
</returns>
            <example>

using namespace AcGiVisualStyleProperties;
bool bJitterEnabled = acgiVisualStyle.traitFlag(kEdgeModifier, kJitter);

</example>
        </member>
        <member name="M:AcGiVisualStyle.setTraitFlag(AcGiVisualStyleProperties.Property,System.UInt32,System.Boolean)">
            <summary>
Sets a property flag into the visual style, for properties which are bitfield enums.
</summary>
            <param name="flagProp">
Input bitfield enum AcGiVisualStyleProperties::Property to set into the visual style.
</param>
            <param name="flagVal">
Input bit flag enum unsigned long property to set into the visual style.
</param>
            <param name="bEnable">
Input bool set to true to enable the flag, false to disable. 
</param>
            <returns>
Returns true if successful; otherwise, returns false.
</returns>
            <example>

using namespace AcGiVisualStyleProperties;
acgiVisualStyle.setTraitFlag (kEdgeModifier, kJitter, true);

</example>
        </member>
        <member name="M:AcGiVisualStyle.operation(AcGiVisualStyleProperties.Property)">
            <summary>
Gets the operation associated with a property.
</summary>
            <param name="prop">
Name of the property for which to get the associated operation value.
</param>
            <returns>
The operation associated with the property.  For invalid property
values, the return value is kInvalidOperation.
</returns>
        </member>
        <member name="M:AcGiVisualStyle.trait(AcGiVisualStyleProperties.Property,AcGiVisualStyleOperations.Operation*)">
            <summary>
Gets a property of the visual style.  
</summary>
            <param name="prop">
Input AcGiVisualStyleProperties::Property to get from the visual style.
</param>
            <param name="pOp">
Output AcGiVisualStyleOperations::Operation to get the operation 
currently in effect for this property.  If NULL, nothing is returned.
</param>
            <returns>
Returns the AcGiVariant value of the property if successful; otherwise,
returns an AcGiVariant of type AcGiVariant::kUndefined.
</returns>
            <example>

AcGiVariant displayBrightness = 
    acgiVisualStyle.trait (AcGiVisualStyleProperties::kDisplayBrightness);

</example>
        </member>
        <member name="M:AcGiVisualStyle.setTrait(AcGiVisualStyleProperties.Property,System.Double,System.Double,System.Double,AcGiVisualStyleOperations.Operation)">
            <summary>
Sets a color property of the visual style.
</summary>
            <param name="prop">
Input AcGiVisualStyleProperties::Property to set into the visual style.  Valid
Property values for this method are:
</param>
            <param name="red">
Input red color value to set into the visual style.  Valid value is from 0.0 to 1.0.
</param>
            <param name="green">
Input green color value to set into the visual style.  Valid value is from 0.0 to 1.0.
</param>
            <param name="blue">
Input blue color value to set into the visual style.  Valid value is from 0.0 to 1.0.
</param>
            <param name="op">
Input AcGiVisualStyleOperations::Operation to use when setting the property into the visual style. 
</param>
            <returns>
Returns true if successful; otherwise, returns false.
</returns>
            <example>

// Set edge intersection color to 110% red
acgiVisualStyle.setTrait (AcGiVisualStyleProperties::kEdgeIntersectionColor, 1.1, 1.0, 1.0);

</example>
        </member>
        <member name="M:AcGiVisualStyle.setTrait(AcGiVisualStyleProperties.Property,System.Double,AcGiVisualStyleOperations.Operation)">
            <summary>
Sets a double property of the visual style.
</summary>
            <param name="prop">
Input AcGiVisualStyleProperties::Property to set into the visual style.  Valid
Property values for this method are:
</param>
            <param name="dVal">
Input double property value to set into the visual style.
</param>
            <param name="op">
Input AcGiVisualStyleOperations::Operation to use when setting the property into the visual style. 
</param>
            <returns>
Returns true if successful; otherwise, returns false.
</returns>
            <example>

// Set brightness to 1.0
acgiVisualStyle.setTrait (AcGiVisualStyleProperties::kDisplayBrightness, 1.0);

</example>
        </member>
        <member name="M:AcGiVisualStyle.setTrait(AcGiVisualStyleProperties.Property,System.Boolean,AcGiVisualStyleOperations.Operation)">
            <summary>
Sets a boolean property of the visual style.
</summary>
            <param name="prop">
Input AcGiVisualStyleProperties::Property to set into the visual style.  Valid
Property values for this method are:
</param>
            <param name="bVal">
Input boolean property value to set into the visual style.
</param>
            <param name="op">
Input AcGiVisualStyleOperations::Operation to use when setting the property into the visual style. 
</param>
            <returns>
Returns true if successful; otherwise, returns false.
</returns>
            <example>

// Set hide precision to false
acgiVisualStyle.setTrait (AcGiVisualStyleProperties::kEdgeHidePrecision, false);

</example>
        </member>
        <member name="M:AcGiVisualStyle.setTrait(AcGiVisualStyleProperties.Property,System.Int32,AcGiVisualStyleOperations.Operation)">
            <summary>
Sets an integer property of the visual style.
</summary>
            <param name="prop">
Input AcGiVisualStyleProperties::Property to set into the visual style.  Valid
Property values for this method are:
</param>
            <param name="nVal">
Input integer property value to set into the visual style.
</param>
            <param name="op">
Input AcGiVisualStyleOperations::Operation to use when setting the property into the visual style. 
</param>
            <returns>
Returns true if successful; otherwise, returns false.
</returns>
            <example>

// Set lighting model to kGooch
using namespace AcGiVisualStyleProperties;
acgiVisualStyle.setTrait (kFaceLightingModel, kGooch);

// Set halogap to 20
acgiVisualStyle.setTrait (AcGiVisualStyleProperties::kEdgeHaloGap, 20);

</example>
        </member>
        <member name="M:AcGiVisualStyle.setTrait(AcGiVisualStyleProperties.Property,AcGiVisualStyleOperations.Operation)">
            <summary>
Sets the operation associated with a property.
</summary>
            <param name="prop">
The AcGiVisualStyleProperties::Property to set the operation for.
</param>
            <param name="op">
The AcGiVisualStyleOperations::Operation for the property to use. 
</param>
            <returns>
Returns true if successful; otherwise, returns false.
</returns>
        </member>
        <member name="M:AcGiVisualStyle.type">
            <summary>
Gets the visual style type.
</summary>
            <returns>
Type of visual style.
</returns>
        </member>
        <member name="M:AcGiVisualStyle.setType(AcGiVisualStyle.Type)">
            <summary>
Sets the visual style type, modifying multiple properties as necessary to 
change the visual style into the specified type.
</summary>
            <param name="type">
Input enum Type to set into the visual style.
</param>
            <returns>
Returns true if successful; otherwise, returns false.
</returns>
        </member>
        <member name="M:AcGiVisualStyle.op_Equality(AcGiVisualStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Comparison operator.  Compares the given visual style with this visual style.
</summary>
            <param name="visualStyle">
Input AcGiVisualStyle. A constant reference to the visual style 
which will be compared to this visual style.
</param>
            <returns>
Returns boolean value representing whether the given visual style is equivalent
to this visual style.
</returns>
        </member>
        <member name="M:AcGiVisualStyle.op_Assign(AcGiVisualStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Assignment operator.  Copies the given visual style into this visual style.
</summary>
            <param name="visualStyle">
Input AcGiVisualStyle. A constant reference to the visual style 
which will be copied into this visual style.
</param>
            <returns>
Returns a reference to the visual style into which the copy was made.
</returns>
        </member>
        <member name="M:AcGiVisualStyle.Dispose">
            <summary>
Destructor.  Performs any necessary cleanup of the visual style.
</summary>
        </member>
        <member name="M:AcGiVisualStyle.#ctor(AcGiVisualStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Copy constructor.  Copies the given visual style into this visual style.
</summary>
            <param name="visualStyle">
Input AcGiVisualStyle. A constant reference to the visual style 
which will be copied into this visual style.
</param>
        </member>
        <member name="M:AcGiVisualStyle.#ctor(AcGiVisualStyle.Type)">
            <summary>
Constructor.
</summary>
            <param name="type">
Input Type. The type of visual style to configure - a built-in type or
custom.
</param>
        </member>
        <member name="M:AcGiVisualStyle.#ctor">
            <summary>
Default constructor.  Initializes members to default values.
</summary>
        </member>
        <member name="F:kEmptyStyle">
            <summary>
Visual style with all properties set to inherit.  This effectively
creates an empty style upon which a custom visual style can be built.
</summary>
        </member>
        <member name="F:kByBlock">
            <summary>
dummy visual style
</summary>
        </member>
        <member name="F:kByLayer">
            <summary>
dummy visual style
</summary>
        </member>
        <member name="F:kByViewport">
            <summary>
dummy visual style
</summary>
        </member>
        <member name="F:kShaded">
            <summary>
shaded visual style
</summary>
        </member>
        <member name="F:kShadedWithEdges">
            <summary>
shade with edges visual style
</summary>
        </member>
        <member name="F:kXRay">
            <summary>
xray visual style
</summary>
        </member>
        <member name="F:kSketchy">
            <summary>
sketchy visual style
</summary>
        </member>
        <member name="F:kShadesOfGray">
            <summary>
shades of gary visual style
</summary>
        </member>
        <member name="F:kEdgeColorOff">
            <summary>
Edge style override visual style with edge color off.  All other properties are
set to inherit.
</summary>
        </member>
        <member name="F:kOverhangOff">
            <summary>
Edge style override visual style with overhang edges off.  All other properties are
set to inherit.
</summary>
        </member>
        <member name="F:kJitterOff">
            <summary>
Edge style override visual style with jitter edges off.  All other properties are
set to inherit.
</summary>
        </member>
        <member name="F:kDisplayOnly">
            <summary>
Display properties only visual style.  All non-display properties are set to inherit.
</summary>
        </member>
        <member name="F:kEdgeOnly">
            <summary>
Edge properties only visual style.  All non-edge properties are set to inherit.
</summary>
        </member>
        <member name="F:kFaceOnly">
            <summary>
Face properties only visual style.  All non-face properties are set to inherit.
</summary>
        </member>
        <member name="F:kColorChange">
            <summary>
Visual style used to apply a change of color.
</summary>
        </member>
        <member name="F:kFacePattern">
            <summary>
Visual style used to apply a face pattern.
</summary>
        </member>
        <member name="F:kLinePattern">
            <summary>
Visual style used to apply a line pattern.
</summary>
        </member>
        <member name="F:kThicken">
            <summary>
Visual style used for a thickening effect.
</summary>
        </member>
        <member name="F:kBrighten">
            <summary>
Visual style used for a brightening effect.
</summary>
        </member>
        <member name="F:kDim">
            <summary>
Visual style used for a dimming effect.
</summary>
        </member>
        <member name="F:kCustom">
            <summary>
Custom, user defined visual visual style.
</summary>
        </member>
        <member name="F:kConceptual">
            <summary>
Gooch shaded visual style.
</summary>
        </member>
        <member name="F:kRealistic">
            <summary>
Phong shaded visual style.
</summary>
        </member>
        <member name="F:kBasic">
            <summary>
Basic default visual style.
</summary>
        </member>
        <member name="F:kHidden">
            <summary>
Hidden visual style.
</summary>
        </member>
        <member name="F:k3DWireframe">
            <summary>
3D wireframe visual style (using 3D graphics system).
</summary>
        </member>
        <member name="F:k2DWireframe">
            <summary>
2D wireframe visual style (using 2D graphics system).
</summary>
        </member>
        <member name="F:kGouraudWithEdges">
            <summary>
Gouraud shaded visual style with edges displayed.
</summary>
        </member>
        <member name="F:kGouraud">
            <summary>
Gouraud shaded visual style.
</summary>
        </member>
        <member name="F:kFlatWithEdges">
            <summary>
Flat shaded visual style with edges displayed.
</summary>
        </member>
        <member name="F:kFlat">
            <summary>
Flat shaded visual style.
</summary>
        </member>
        <member name="T:AcGiVisualStyle.Type">
            <summary>
Describes the visual style type, based on multiple property settings.
</summary>
        </member>
        <member name="T:AcGiVisualStyle">
            <summary> 
This class defines the collection of visual properties that can be 
applied to drawables.
</summary>
            <remarks />
        </member>
        <member name="T:AcGiVisualStyleOperations.Operation">
            <summary>
Describes what kind of operation to perform when setting a visual 
</summary>
        </member>
        <member name="F:kEnable">
            <summary>
Enable the specified bits in the property bitmask.
</summary>
        </member>
        <member name="F:kDisable">
            <summary>
Disable the specified bits in the property bitmask.
</summary>
        </member>
        <member name="F:kSet">
            <summary>
Replace the last property value with the one specified.
</summary>
        </member>
        <member name="F:kInherit">
            <summary>
Use the last property value specified.  NOTE: Reserved for future 
use.  Specifying this currently will be treated the same as kSet.
</summary>
        </member>
        <member name="T:AcGiVisualStyleProperties.DisplayShadowType">
            <summary>
Describes the type of shadow to enable.
</summary>
        </member>
        <member name="F:kShadowsFullAndGround">
            <summary>
Full and ground plane shadows are displayed.
</summary>
        </member>
        <member name="F:kShadowsFull">
            <summary>
Full shadows are displayed.
</summary>
        </member>
        <member name="F:kShadowsGroundPlane">
            <summary>
Ground plane shadows are displayed.
</summary>
        </member>
        <member name="F:kShadowsNone">
            <summary>
No shadows are displayed.
</summary>
        </member>
        <member name="T:AcGiVisualStyleProperties.DisplayStyles">
            <summary>
Bitfield which describes the combination of enabled display settings.
</summary>
        </member>
        <member name="F:kTexturesFlag">
            <summary>
Textures are displayed.
</summary>
        </member>
        <member name="F:kMaterialsFlag">
            <summary>
Materials are displayed.
</summary>
        </member>
        <member name="F:kLightingFlag">
            <summary>
Lighting is displayed.
</summary>
        </member>
        <member name="F:kBackgroundsFlag">
            <summary>
Backgrounds are displayed.
</summary>
        </member>
        <member name="F:kNoDisplayStyle">
            <summary>
No display settings are enabled.
</summary>
        </member>
        <member name="T:AcGiVisualStyleProperties.EdgeLinePattern">
            <summary>
Describes the raster-based line patterns to apply to edges.
</summary>
        </member>
        <member name="F:kSparseDot">
            <summary>
Display edges with a sparse dotted line pattern.
</summary>
        </member>
        <member name="F:kMediumLongDash">
            <summary>
Display edges with a medium long dashed line pattern.
</summary>
        </member>
        <member name="F:kDoubleLongDash">
            <summary>
Display edges with a double long dashed line pattern.
</summary>
        </member>
        <member name="F:kDoubleMediumDash">
            <summary>
Display edges with a double medium dashed line pattern.
</summary>
        </member>
        <member name="F:kDoubleShortDash">
            <summary>
Display edges with a double short dashed line pattern.
</summary>
        </member>
        <member name="F:kLongDash">
            <summary>
Display edges with a long dashed line pattern.
</summary>
        </member>
        <member name="F:kMediumDash">
            <summary>
Display edges with a medium dashed line pattern.
</summary>
        </member>
        <member name="F:kShortDash">
            <summary>
Display edges with a short dashed line pattern.
</summary>
        </member>
        <member name="F:kDotted">
            <summary>
Display edges with a dotted line pattern.
</summary>
        </member>
        <member name="F:kDashedLine">
            <summary>
Display edges with a dashed line pattern.
</summary>
        </member>
        <member name="F:kSolid">
            <summary>
Display edges with a solid line pattern.
</summary>
        </member>
        <member name="T:AcGiVisualStyleProperties.EdgeWiggleAmount">
            <summary>
Describes the amount of jitter effect to apply to edges.
</summary>
        </member>
        <member name="F:kWiggleHigh">
            <summary>
A large amount of perturbation will be applied to edges.
</summary>
        </member>
        <member name="F:kWiggleMedium">
            <summary>
A medium amount of perturbation will be applied to edges.
</summary>
        </member>
        <member name="F:kWiggleLow">
            <summary>
A small amount of perturbation will be applied to edges.
</summary>
        </member>
        <member name="T:AcGiVisualStyleProperties.EdgeJitterAmount">
            <summary>
Describes the amount of jitter effect to apply to edges.
</summary>
        </member>
        <member name="F:kJitterHigh">
            <summary>
A large amount of perturbation will be applied to edges.
</summary>
        </member>
        <member name="F:kJitterMedium">
            <summary>
A medium amount of perturbation will be applied to edges.
</summary>
        </member>
        <member name="F:kJitterLow">
            <summary>
A small amount of perturbation will be applied to edges.
</summary>
        </member>
        <member name="T:AcGiVisualStyleProperties.EdgeModifiers">
            <summary>
Bitfield which describes the combination of modifiers to apply to displayed edges.
</summary>
        </member>
        <member name="F:kEdgeTextureFlag">
            <summary>
Apply a texture effect to the edges.  The texture effect is produced by drawing
texure on the original line.
</summary>
        </member>
        <member name="F:kEdgeWiggleFlag">
            <summary>
Apply a wiggle effect to the edges.  The wiggle effect is produced by drawing
extra lines adjacent to the original line, with a specific amount of 
perturbation away from the original line.
</summary>
        </member>
        <member name="F:kEdgeOpacityFlag">
            <summary>
Apply an opacity value to the edges.  If unset, edges are displayed with
full opacity.  If set, edges are displayed with a specified degree of
opacity from completely opaque to completely transparent.
</summary>
        </member>
        <member name="F:kAlwaysOnTopFlag">
            <summary>
Force edges to be on top.  Edges will not participate in the Z-ordering
of the displayed drawables.
</summary>
        </member>
        <member name="F:kEdgeHaloGapFlag">
            <summary>
Apply a halo gap percentage to the edges of an object that is hidden
by another object, such that the specified gap is displayed between the
edges of the hidden object and the edges of the object which hides it.  
</summary>
        </member>
        <member name="F:kEdgeColorFlag">
            <summary>
Apply a color other than the drawable object color to the edges.
</summary>
        </member>
        <member name="F:kEdgeWidthFlag">
            <summary>
Apply a width &gt; 1 to the edges.
</summary>
        </member>
        <member name="F:kEdgeJitterFlag">
            <summary>
Apply a jitter effect to the edges.  The jitter effect is produced by drawing
extra lines adjacent to the original line, with a specific amount of 
perturbation away from the original line.
</summary>
        </member>
        <member name="F:kEdgeOverhangFlag">
            <summary>
Allow an edge to overhang its start and end points by a specified amount.
</summary>
        </member>
        <member name="F:kNoEdgeModifiers">
            <summary>
Apply no modifiers to the edges.
</summary>
        </member>
        <member name="T:AcGiVisualStyleProperties.EdgeStyles">
            <summary>
Bitfield which describes the combination of edge styles to display.
</summary>
        </member>
        <member name="F:kIntersectionFlag">
            <summary>
Intersection edges will be displayed.  An intersection edges is that
which is inferred from intersecting facets.
</summary>
        </member>
        <member name="F:kObscuredFlag">
            <summary>
Obscured edges will be displayed.  An obscured edge is that which
would not be normally be visible when in a shaded view.
</summary>
        </member>
        <member name="F:kSilhouetteFlag">
            <summary>
Silhouette edges will be displayed.  A silhouette edge is an edge
connecting a back facing polygon with a front facing polygon.
</summary>
        </member>
        <member name="F:kVisibleFlag">
            <summary>
Visible edges will be displayed.
</summary>
        </member>
        <member name="F:kNoEdgeStyle">
            <summary>
No edges styles will be displayed
</summary>
        </member>
        <member name="T:AcGiVisualStyleProperties.EdgeModel">
            <summary>
Describes the model to use as a source of edges.
</summary>
        </member>
        <member name="F:kFacetEdges">
            <summary>
Display facet edges, the edges between adjoining facets.
</summary>
        </member>
        <member name="F:kIsolines">
            <summary>
Display isolines, imaginary lines (edges) which represent the curvature
and shape of a drawable.
</summary>
            <summary> 
The quilt representation is controlled by the SURFV and SURFU
at creation time for surfaces.
</summary>
        </member>
        <member name="F:kNoEdges">
            <summary>
No edges will be displayed.
</summary>
        </member>
        <member name="T:AcGiVisualStyleProperties.FaceModifiers">
            <summary>
Bitfield that describes modifications to faces made before any
lighting and shading calculations have been performed.
</summary>
        </member>
        <member name="F:kSpecularFlag">
            <summary>
Apply a specular highlight (indicating reflection and shininess values)
to a material that is applied to the faces.  
</summary>
        </member>
        <member name="F:kFaceOpacityFlag">
            <summary>
Apply an opacity value to the faces.  If unset, faces are displayed with
full opacity.  If set, faces are displayed with a specified degree of
opacity from completely opaque to completely transparent.   
</summary>
        </member>
        <member name="F:kNoFaceModifiers">
            <summary>
Apply no face modifiers to the faces.
</summary>
        </member>
        <member name="T:AcGiVisualStyleProperties.FaceColorMode">
            <summary>
Describes modifications that affect the color of a face before 
any lighting and shading calculations have been performed.
</summary>
        </member>
        <member name="F:kDesaturate">
            <summary>
Apply a desaturation percentage to the diffuse color of a material.
</summary>
        </member>
        <member name="F:kTint">
            <summary>
All faces have the hue and saturation values of their color mapped 
to the hue and saturation values of a specific color, resulting in
a "tinted" effect.  The luminance value remains unchanged.
</summary>
        </member>
        <member name="F:kMono">
            <summary>
All faces are treated as having a specific color, resulting in a 
"monochromatic" effect.
</summary>
        </member>
        <member name="F:kBackgroundColor">
            <summary>
Apply the display background color to the faces.
</summary>
        </member>
        <member name="F:kObjectColor">
            <summary>
Apply the color of the drawable to the faces.
</summary>
        </member>
        <member name="F:kNoColorMode">
            <summary>
No modifications are to be applied to the faces.
</summary>
        </member>
        <member name="T:AcGiVisualStyleProperties.FaceLightingQuality">
            <summary>
Describes the calculation method used for application of
lighting effects to faces.
</summary>
        </member>
        <member name="F:kPerPixelLighting">
            <summary>
Each pixel of a face has its color calculated based on its 
orientation to the light source(s) of the scene. 
</summary>
        </member>
        <member name="F:kPerVertexLighting">
            <summary>
Each vertex of a face has its color calculated based on its 
orientation to the light source(s) of the scene. 
</summary>
        </member>
        <member name="F:kPerFaceLighting">
            <summary>
Each face has a color calculated based on its orientation to the 
light source(s) of the scene. 
</summary>
        </member>
        <member name="F:kNoLighting">
            <summary>
Apply no lighting calculations to the faces.
</summary>
        </member>
        <member name="T:AcGiVisualStyleProperties.FaceLightingModel">
            <summary>
Describes the lighting model to apply to the faces of drawables.
</summary>
        </member>
        <member name="F:kZebra">
            <summary>
Faces are drawn in zebra stripes for surface analysis.
</summary>
        </member>
        <member name="F:kGooch">
            <summary>
Gooch, A., Gooch, B., Shirley, P., and Cohen, E. 1998.  
A non-photorealistic lighting model for automatic technical
illustration.  In proceedings of the 25th Annual Conference
on Computer Graphics and Interactive Techniques SIGGRAPH '98.
ACM Press, New York, NY, 447-452.
</summary>
        </member>
        <member name="F:kPhong">
            <summary>
Faces are drawn to approximate realistic direct lighting.
</summary>
        </member>
        <member name="F:kConstant">
            <summary>
Faces are drawn in a constant color.
</summary>
        </member>
        <member name="F:kInvisible">
            <summary>
Faces are not drawn.
</summary>
        </member>
        <member name="T:AcGiVisualStyleProperties.Property">
            <summary>
Describes the properties that can be set/get on a visual style.
</summary>
        </member>
        <member name="F:kPropertyCountPre2013">
            <summary>
The number of visual style properties for Pre-2013 drawing formats
</summary>
        </member>
        <member name="F:kPropertyCount">
            <summary>
The number of visual style properties
</summary>
        </member>
        <member name="F:kFocusWidth">
            <summary>
Float specifies the distance from the focus distance to keep in focus.
</summary>
        </member>
        <member name="F:kFocusDistance">
            <summary>
Float specifies the distance from the camera to focus on.
</summary>
        </member>
        <member name="F:kDepthOfField">
            <summary>
Bool. Camera Effect. Keep objects in focus whose distance from the camera is within
the Focus Width around the Focus Distance.
</summary>
        </member>
        <member name="F:kEdgeTexturePath">
            <summary>
String overrides the edge texture path of drawables.
</summary>
        </member>
        <member name="F:kEdgeWiggleAmount">
            <summary>
Int indicating the amount of wiggle.
</summary>
        </member>
        <member name="F:kTransparency">
            <summary>
Float overrides the transparency of drawables. Range [0.0f, INF].
</summary>
        </member>
        <member name="F:kColor">
            <summary>
AcCmColor overrides the color of drawables
</summary>
        </member>
        <member name="F:kBloomIntensity">
            <summary>
Float indicating the intensity of bloom effect. Range [0.0f, INF].
</summary>
        </member>
        <member name="F:kTintEffect">
            <summary>
Bool indicating the tint color is used. True if enabled,
false otherwise.
</summary>
        </member>
        <member name="F:kPostPower">
            <summary>
Change the power response curve. For example, gamma correction
is a setting of about 0.4. However, this control is meant more
as a way to control the appearance of the mid-tones: a lower number
brightens the midtones more.
</summary>
        </member>
        <member name="F:kPostBrightness">
            <summary>
Adjust overall brightness of image, higher making it brighter. 
</summary>
        </member>
        <member name="F:kPostContrast">
            <summary>
Adjust overall contrast of image, higher giving more contrast.
</summary>
        </member>
        <member name="F:kFaceAdjustment">
            <summary>
Bool indicating the contrast/brightness/power functions are applied
false otherwise.
</summary>
        </member>
        <member name="F:kTintColor">
            <summary>
AcCmColor indicating the tint color para.
</summary>
        </member>
        <member name="F:kBloomRadius">
            <summary>
Float indicating the radius para of bloom effect. Range [1.0f, 5.0f].
</summary>
        </member>
        <member name="F:kBloomThreshold">
            <summary>
Float indicating the bright threshold para of bloom effect. Range [0.0f, INF].
</summary>
        </member>
        <member name="F:kPencilColor">
            <summary>
AcCmColor indicating the color para of pencil effect.
</summary>
        </member>
        <member name="F:kPencilPattern">
            <summary>
Int indicating the pattern para of pencil effect. Range [0, 3].
</summary>
        </member>
        <member name="F:kPencilScale">
            <summary>
Int indicating the scale para of pencil effect. Range [0.0f, 3.0f].
</summary>
        </member>
        <member name="F:kPencilAngle">
            <summary>
Float indicating the angle para of pencil effect. Range [0.0f, 360.0f].
</summary>
        </member>
        <member name="F:kBlurAmount">
            <summary>
Int indicating blur amount. Range [0.0f, 5.0f].
</summary>
        </member>
        <member name="F:kPastelEffect">
            <summary>
Bool indicating use Pastel global effect. True if enabled,
false otherwise.
</summary>
        </member>
        <member name="F:kBloomEffect">
            <summary>
Bool indicating use Bloom global effect. True if enabled,
false otherwise.
</summary>
        </member>
        <member name="F:kPencilEffect">
            <summary>
Bool indicating use Pencil global effect. True if enabled,
false otherwise.
</summary>
        </member>
        <member name="F:kBlurEffect">
            <summary>
Bool indicating use Blur global effect. True if enabled,
false otherwise.
</summary>
        </member>
        <member name="F:kMonoEffect">
            <summary>
Bool indicating use Mono global effect. True if enabled,
false otherwise.
</summary>
        </member>
        <member name="F:kPosterizeEffect">
            <summary>
Bool indicating use Posterize global effect. True if enabled,
false otherwise.
</summary>
        </member>
        <member name="F:kLightingEnabled">
            <summary>
Bool indicating if lighting is enabled. True if enabled, false
otherwise.
</summary>
        </member>
        <member name="F:kViewportTransparency">
            <summary>
Bool indicating if viewport transparency is enabled.  True if enabled,
false otherwise.
</summary>
        </member>
        <member name="F:kUseDrawOrder">
            <summary>
Bool indicating use DB display draw order. True if enabled,
false otherwise. When true Z depth is ignored for draw order.
</summary>
        </member>
        <member name="F:kDisplayShadowType">
            <summary>
See DisplayShadowType summary.
</summary>
        </member>
        <member name="F:kDisplayBrightness">
            <summary>
Double indicating brightness.
</summary>
        </member>
        <member name="F:kDisplayStyles">
            <summary>
See DisplayStyles summary.
</summary>
        </member>
        <member name="F:kEdgeHidePrecision">
            <summary>
Bool indicating hide precision enabled. True if enabled,
false otherwise.
</summary>
        </member>
        <member name="F:kEdgeIsolines">
            <summary>
Unsigned short, between 0 and 2047, indicating the number of 
isolines to display for curved surfaces.
</summary>
        </member>
        <member name="F:kEdgeHaloGap">
            <summary>
Int from 0 to 100 representing the halo gap.
</summary>
        </member>
        <member name="F:kEdgeSilhouetteWidth">
            <summary>
Short representing silhouette edge width in pixels.
</summary>
        </member>
        <member name="F:kEdgeSilhouetteColor">
            <summary>
AcCmColor representing the color applied to silhouette edges.
</summary>
        </member>
        <member name="F:kEdgeJitterAmount">
            <summary>
See EdgeJitterAmount summary.
</summary>
        </member>
        <member name="F:kEdgeOverhang">
            <summary>
Int representing the amount, in pixels, that edges should overhang
their start and end points.
</summary>
        </member>
        <member name="F:kEdgeWidth">
            <summary>
Int representing edge width in pixels.
</summary>
        </member>
        <member name="F:kEdgeOpacity">
            <summary>
Double indicating the level of edge opacity in the range from 
0.0 to 1.0, with 1.0 representing full opacity (0% transparent) 
and 0.0 representing no opacity (100% transparent).
</summary>
        </member>
        <member name="F:kEdgeColor">
            <summary>
AcCmColor representing the color applied to edges.
</summary>
        </member>
        <member name="F:kEdgeModifiers">
            <summary>
See EdgeModifier summary.
</summary>
        </member>
        <member name="F:kEdgeCreaseAngle">
            <summary>
Double, in degrees, indicating the angle threshold above which 
facet edges between adjoining facets will be displayed.
</summary>
        </member>
        <member name="F:kEdgeIntersectionLinePattern">
            <summary>
EdgeLinePattern applied to intersection edges.
See EdgeLinePattern summary.
</summary>
        </member>
        <member name="F:kEdgeObscuredLinePattern">
            <summary>
EdgeLinePattern applied to obscured edges.
See EdgeLinePattern summary.
</summary>
        </member>
        <member name="F:kEdgeObscuredColor">
            <summary>
AcCmColor representing the color applied to obscured edges.
</summary>
        </member>
        <member name="F:kEdgeIntersectionColor">
            <summary>
AcCmColor representing the color applied to intersection edges.
</summary>
        </member>
        <member name="F:kEdgeStyles">
            <summary>
See EdgeStyles summary.
</summary>
        </member>
        <member name="F:kEdgeModel">
            <summary>
See EdgeModel summary.
</summary>
        </member>
        <member name="F:kFaceMonoColor">
            <summary>
AcCmColor representing the color applied to produce a "monochromatic" effect on faces.
</summary>
        </member>
        <member name="F:kFaceSpecular">
            <summary>
Double representing the specular highlight amount (indicating 
reflection and shininess values) of the material that is applied 
to faces. 
</summary>
        </member>
        <member name="F:kFaceOpacity">
            <summary>
Double indicating the level of face opacity in the range from 
0.0 to 1.0, with 1.0 representing full opacity (0% transparent) 
and 0.0 representing no opacity (100% transparent).
</summary>
        </member>
        <member name="F:kFaceModifiers">
            <summary>
See FaceModifiers summary.
</summary>
        </member>
        <member name="F:kFaceColorMode">
            <summary>
See FaceColorMode summary.
</summary>
        </member>
        <member name="F:kFaceLightingQuality">
            <summary>
See FaceLightingQuality summary.
</summary>
        </member>
        <member name="F:kFaceLightingModel">
            <summary>
See FaceLightingModel summary.
</summary>
        </member>
        <member name="F:kInvalidProperty">
            <summary>
Invalid property.
</summary>
        </member>
        <member name="M:AcDbViewTableRecord.setPreviewImage(Atil.Image!System.Runtime.CompilerServices.IsConst*)">
            <summary>
This functions sets Atil::Image thumbnail into view
</summary>
            <param name="pPreviewImage"> A pointer of Atil::Image thumbnail to be set into view </param>
            <returns> This will return Acad::eOk if thumbnail is successfully set. It returns error status otherwise </returns>
            <remarks> Internal use only </remarks>
        </member>
        <member name="M:AcDbViewTableRecord.getPreviewImage(Atil.Image**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This function provides Atil::Image thumbnail of view as output
</summary>
            <param name="pPreviewImage"> A reference to the pointer of Atil::Image thumbnail </param>
            <returns> This will return Acad::eOk if thumbnail is successfully retrieved. It returns error status otherwise </returns>
            <remarks> Internal use only </remarks>
        </member>
        <member name="M:AcDbViewTableRecord.setThumbnail(tagBITMAPINFO!System.Runtime.CompilerServices.IsConst*)">
            <summary>
This function sets BITMAP thumbnail into view
</summary>
            <param name="thumbnail"> A pointer of Bitmap thumbnail to be set into view </param>
            <returns> This will return Acad::eOk if thumbnail is successfully set. It returns error status otherwise </returns>
        </member>
        <member name="M:AcDbViewTableRecord.getThumbnail(tagBITMAPINFO**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This function provides BITMAP thumbnail of view as output
</summary>
            <param name="thumbnail"> A reference to a pointer of Bitmap thumbnail, containing header and pixels </param>
            <returns> This will return Acad::eOk if thumbnail is successfully retrieved. It returns error status otherwise </returns>
        </member>
        <member name="M:AcDbTextStyleTableRecord.setFont(System.Char!System.Runtime.CompilerServices.IsConst*,System.Boolean,System.Boolean,Charset,Autodesk.AutoCAD.PAL.FontUtils.FontPitch,Autodesk.AutoCAD.PAL.FontUtils.FontFamily,System.Boolean)">
            <summary>
This method sets the TextStyleTableRecord to use the Windows font as specified by the passed in arguments. 
If pTypeFace == NULL or points to an empty string, and the other arguments are Adesk::kFalse or 0 (as appropriate),
then all existing Windows font information in this TextStyleTableRecord is removed from the record.
WARNING: This method should not be used to set an old style SHX font. To set the TextStyleTableRecord to use
an SHX font, you need to use the AcDbTextStyleTableRecord::setFileName() method. 
</summary>
            <param name="pTypeface">Input pointer to the font file name string of the desired font</param>
            <param name="bold">Input Boolean indicating whether or not the font is to be bold</param>
            <param name="italic">Input Boolean indicating whether or not the font is to be italic</param>
            <param name="charset">Input integer that is the Windows character set identifier </param>
            <param name="pitch">Input indicating the pitch being used</param>
            <param name="family">Input indicating the family being used</param>
            <param name="bAllowMissingFont">Input bool indicating whether or not to allow the set to succeed if the font is not installed on the computer </param>
            <returns>Returns Acad::eOk if successful and Acad::eInvalidInput if bAllowMissingFont is false and the font
is not installed on the system.</returns>
        </member>
        <member name="M:AcGiViewportTraits.toneOperatorParameters(AcGiToneOperatorParameters*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Provides access to tone operator parameters for this viewport.
</summary>
            <param name="params">
An AcGiToneOperatorParameters object that contains the tone operator
properties of this viewport.
</param>
        </member>
        <member name="M:AcGiViewportTraits.setToneOperatorParameters(AcGiToneOperatorParameters!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets the tone operator parameters for this viewport.
</summary>
            <param name="params">
An AcGiToneOperatorParameters object that contains the tone operator
properties of this viewport.
</param>
        </member>
        <member name="M:AcDbDimensionStyleOverrule.setDimstyleData(AcDbDimension*,AcDbObjectId)">
            <property name="versionspecific" value="=18.1.0.0" />
            <summary>
Overrules AcDbDimension::setDimstyleData method.
</summary>
            <param name="pSubject">Pointer to an AcDbDimension that this
                       overrule is applied against.</param>
            <param name="dimstyleId">Input object ID of AcDbDimStyleTableRecord
from which to copy dimension variable information</param>
            <remarks>
Default implementation of AcDbDimensionStyleOverrule::setDimstyleData
calls protected AcDbDimension::subSetDimstyleData method.

</remarks>
            <returns>
Returns Acad::eOk if operation is successful.
</returns>
        </member>
        <member name="M:AcDbDimensionStyleOverrule.setDimstyleData(AcDbDimension*,AcDbDimStyleTableRecord*)">
            <property name="versionspecific" value="=18.1.0.0" />
            <summary>
Overrules AcDbDimension::setDimstyleData method.
</summary>
            <param name="pSubject">Pointer to an AcDbDimension that this
                       overrule is applied against.</param>
            <param name="pRecord">Input pointer to AcDbDimStyleTableRecord
from which to copy dimension variable information.</param>
            <remarks>
Default implementation of AcDbDimensionStyleOverrule::setDimstyleData
calls protected AcDbDimension::subSetDimstyleData method.

</remarks>
            <returns>
Returns Acad::eOk if operation is successful.
</returns>
        </member>
        <member name="M:AcDbDimensionStyleOverrule.getDimstyleData(AcDbDimension!System.Runtime.CompilerServices.IsConst*,AcDbDimStyleTableRecord**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <property name="versionspecific" value="=18.1.0.0" />
            <summary>
Overrules AcDbDimension::getDimstyleData method.
</summary>
            <param name="pSubject">Pointer to an AcDbDimension that this
                       overrule is applied against.</param>
            <param name="pRecord">Input pointer to an existing AcDbDimStyleTableRecord
to which the dimension variable data will be copied.</param>
            <remarks>
Default implementation of AcDbDimensionStyleOverrule::getDimstyleData
calls protected AcDbDimension::subGetDimstyleData method.

</remarks>
            <returns>
Returns Acad::eOk if operation is successful.
</returns>
        </member>
        <member name="M:AcDbDimensionStyleOverrule.setDimensionStyle(AcDbDimension*,AcDbObjectId)">
            <property name="versionspecific" value="=18.1.0.0" />
            <summary>
Overrules AcDbDimension::setDimensionStyle.
</summary>
            <param name="pSubject">Pointer to an AcDbDimension that this
                       overrule is applied against.</param>
            <param name="dimStyleId">Input object ID of the desired AcDbDimStyleTableRecord
to be used by dimension</param>
            <remarks>
The default implementation of AcDbDimensionStyleOverrule::setDimensionStyle
calls the protected AcDbDimension::subSetDimensionStyle method. 
</remarks>
            <returns>
Returns Acad::eOk if operation is successful.
</returns>
        </member>
        <member name="M:AcDbDimensionStyleOverrule.dimensionStyle(AcDbDimension!System.Runtime.CompilerServices.IsConst*)">
            <property name="versionspecific" value="=18.1.0.0" />
            <summary>
Overrules AcDbDimension::dimensionStyle method.
</summary>
            <remarks>
The default implementation of
AcDbDimensionStyleOverrule::dimensionStyle calls
AcDbDimension::subDimensionStyle.
</remarks>
            <param name="pSubject">Pointer to an AcDbDimension that this
                       overrule is applied against.</param>
            <returns>
Returns object ID of the AcDbDimStyleTableRecord referenced by the dimension.
</returns>
        </member>
        <member name="T:AcDbDimensionStyleOverrule">
            <property name="versionspecific" value="=18.1.0.0" />
            <summary>
AcDbDimensionStyleOverrule overrules a subset of dimension style related
operations that AcDbDimension class specifies. It is intended
as a base class for clients who want to alter some or all
behavior of a given AcDbDimension-derived class. At the base
level, each default implementation simply calls the
corresponding method in the target class.
</summary>
        </member>
        <member name="M:AcDbDimension.subSetDimstyleData(AcDbObjectId)">
            <summary>
This function compares the dimstyle data in the record identified by
newDataId with the data in the record referenced by the dimension,
and applies any differences as dimension variable overrides on the
dimension. So, when this function is finished, the combination of the
referenced DimStyleTableRecord and the newly applied dimension variable
overrides will make the dimension display as though it were actually
referencing the DimStyleTableRecord newDataId.
</summary>
            <remarks>
The DimStyleTableRecord identified by newDataId can be in any database
currently loaded in memory.
</remarks>
            <param name="newDataId">Input object ID of the AcDbDimStyleTableRecord
whose data is to be applied to this dimension.
</param>
            <returns>
This function returns Acad::eOk if successful. Acad::eInvalidInput
will be returned if pRecord is not a valid AcDbDimStyleTableRecord.
Acad::eInvalidDimStyle will be returned if the dimension there is an
invalid dimension style associated with this dimension. Various open
codes can be returned if the associated AcDbDimStyleTableRecord cannot
be opened.
</returns>
        </member>
        <member name="M:AcDbDimension.subSetDimstyleData(AcDbDimStyleTableRecord*)">
            <summary>
This function compares the dimstyledata in the record pointed to by
pNewData with the data in the record referenced by the dimension,
and applies any differences as dimension variable overrides on the
dimension. So, when this function is finished, the combination of the
referenced DimStyleTableRecord and the newly applied dimension variable
overrides will make the dimension display as though it were actually
referencing the DimStyleTableRecord pNewData.
</summary>
            <remarks>
The DimStyleTableRecord pointed to by pNewData may be database-resident,
but that is not required for this function to use it. If it is 
database-resident, it can be in any database currently loaded in memory.
</remarks>
            <param name="pNewData">Input pointer to the AcDbDimStyleTableRecord
whose data is to be applied to this dimension.
</param>
            <returns>
This function returns Acad::eOk if successful. Acad::eInvalidInput
will be returned if pRecord is not a valid AcDbDimStyleTableRecord.
Acad::eInvalidDimStyle will be returned if the dimension there is an
invalid dimension style associated with this dimension. Various open
codes can be returned if the associated AcDbDimStyleTableRecord cannot
be opened.
</returns>
        </member>
        <member name="M:AcDbDimension.subGetDimstyleData(AcDbDimStyleTableRecord**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This function copies the dimstyle information from the AcDbDimStyleTableRecord
referenced by the dimension into the AcDbDimStyleTableRecord pointed to
by pRecord. After copying the data, any dimension variable overrides currently
applied to the dimension will be copied into the record pointed to by pRecord. 
The result is that pRecord represents the effective style settings currently
in use by this object.
</summary>
            <param name="pRecord">Input pointer to a pre-existing non-database-resident
record.
</param>
            <returns>
This function returns Acad::eOk if successful. Acad::eInvalidInput will be
returned if pRecord is not a valid AcDbDimStyleTableRecord. 
Acad::eInvalidDimStyle will be returned if the dimension there is an invalid
dimension style associated with this dimension. Various open codes can be
returned if the associated AcDbDimStyleTableRecord cannot be opened.
Acad::eNullObjectPointer will be returned if pRecord or the associated
AcDbDimStyleTableRecord is NULL.
</returns>
        </member>
        <member name="M:AcDbDimension.subSetDimensionStyle(AcDbObjectId)">
            <summary>
This function sets the dimension to use the AcDbDimStyleTableRecord with
the object ID styleId.
</summary>
            <remarks>
If styleId is AcDbObjectId::kNull (or just NULL), then when the dimension
is closed it will be set to use the current default dimStyle in the
AutoCAD editor. The text string name within the referenced
DimStyleTableRecord is used for DXF group code 3.
</remarks>
            <param name="dimStyleId">Input object ID to be used by AcDbDimStyleTableRecord.
</param>
            <returns>
Returns Acad::eOk if operation is successful.
</returns>
        </member>
        <member name="M:AcDbDimension.subDimensionStyle">
            <summary>
This function returns the object ID of the AcDbDimStyleTableRecord 
referenced by the dimension. 
</summary>
            <remarks>
The text string name within the referenced DimStyleTableRecord is used
for DXF group code 3.
</remarks>
            <returns>
Returns object ID of the AcDbDimStyleTableRecord referenced by the dimension.
</returns>
        </member>
        <member name="M:AcDbDimension.dimensionText(AcString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This function retrieves the text associated with this dimension
</summary>
            <param name="sDimText">Receives this dimension's text string
</param>
            <returns>
Returns Acad::eOk if successful, else an error code
</returns>
            <remarks>
The overload which returns ACHAR * is deprecated and may be removed in a future release
</remarks>
        </member>
        <member name="M:AcDbDimension.resetTextDefinedSize">
            <summary> Reset dimension text defined width and defined height to MText in dimension block.
<param name="width"> text defined width </param><param name="height"> text defined height </param><returns> void </returns></summary>
        </member>
        <member name="M:AcDbDimension.setTextDefinedSize(System.Double,System.Double)">
            <summary> Set text defined width and defined height to MText in dimension block
<param name="width"> text defined width </param><param name="height"> text defined height </param><returns> void </returns></summary>
        </member>
        <member name="M:AcDbDimension.textDefinedSize(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Get dimension text defined width and defined height from MText in dimension block
<param name="width"> text defined width to return </param><param name="height"> text defined height to return </param><returns> void </returns></summary>
        </member>
        <member name="M:AcDbIBLBackground.secondaryBackground">
            <summary>
Gets the background to display when DisplayImage is set to false
</summary>
            <returns>
Background db Id
</returns>
        </member>
        <member name="M:AcDbIBLBackground.setSecondaryBackground(AcDbObjectId!System.Runtime.CompilerServices.IsConst)">
            <summary>
Sets the background to display when DisplayImage is set to false
Limited to 2D backgrounds only - Solid, Gradient, Image
</summary>
            <remarks>
Ownership of secondary background is not assumed.
Cloning an AcDbIBLBackground will result in two backgrounds sharing the same secondary background
</remarks>
            <param name="bg">
Background db Id
</param>
        </member>
        <member name="M:AcDbIBLBackground.displayImage">
            <summary>
Gets whether to display the IBL image as the background
</summary>
            <returns>
True if IBL image is to be displayed as background
</returns>
        </member>
        <member name="M:AcDbIBLBackground.setDisplayImage(System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary>
Sets whether to display the IBL image as the background
</summary>
            <param name="bdisplay">
Set to true to display IBL image in background
</param>
        </member>
        <member name="M:AcDbIBLBackground.rotation">
            <summary>
Gets the rotation value for the IBL image
</summary>
            <returns>
Rotation value in degrees
</returns>
        </member>
        <member name="M:AcDbIBLBackground.setRotation(System.Double!System.Runtime.CompilerServices.IsConst)">
            <summary>
Sets the rotation value for the IBL image
-180 to 180 degrees
</summary>
            <param name="rotation">
Rotation value in degrees (-180 to 180)
</param>
        </member>
        <member name="M:AcDbIBLBackground.IBLImageName">
            <summary>
Gets the image used for IBL
</summary>
            <returns>
Name of IBL image
</returns>
        </member>
        <member name="M:AcDbIBLBackground.setIBLImageName(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets the image used for IBL
</summary>
            <param name="name">
Name of IBL image
</param>
        </member>
        <member name="M:AcDbIBLBackground.enable">
            <summary>
Gets whether IBL is currently active
</summary>
            <returns>
Name of IBL image
</returns>
        </member>
        <member name="M:AcDbIBLBackground.setEnable(System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary>
Sets whether IBL is currently active
When disabled, the background will be default black transparent
</summary>
            <param name="name">
Name of IBL image
</param>
        </member>
        <member name="M:AcDbIBLBackground.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:AcDbIBLBackground.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:AcDbIBLBackground">
            <summary>
Image based lighting background
</summary>
        </member>
        <member name="M:AcGiPhotographicExposureParameters.convertBrightnessToExposure(System.Double)">
            <summary>
Converts Brightness value to EV
</summary>
            <param name="brt">Brightness Value</param>
            <returns>Exposure value</returns>
        </member>
        <member name="M:AcGiPhotographicExposureParameters.convertExposureToBrightness(System.Double)">
            <summary>
Converts EV to a calibrated Brightness value
</summary>
            <param name="exp">Exposure Value</param>
            <returns>Brightness value</returns>
        </member>
        <member name="M:AcGiPhotographicExposureParameters.copyFrom(AcRxObject!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Copies member data from source object
</summary>
            <returns>
Acad::eOk if copy is successful
</returns>
        </member>
        <member name="M:AcGiPhotographicExposureParameters.setBrightness(System.Double)">
            <summary>
Sets exact brightness and updates exposure calculated from brightness
</summary>
        </member>
        <member name="M:AcGiPhotographicExposureParameters.whitePoint">
            <summary>
Gets White Point for photographic exposure parameters
</summary>
            <returns>
Temperature of White Point in Kelvins
</returns>
        </member>
        <member name="M:AcGiPhotographicExposureParameters.setWhitePoint(System.Double)">
            <summary>
Sets White Point for photographic exposure parameters in Kelvins
Affects the chromaticity of a scene
</summary>
            <param name="whitePoint">
Temperature of White Point in Kelvins
</param>
        </member>
        <member name="M:AcGiPhotographicExposureParameters.exposure">
            <summary>
Gets Exposure for photographic exposure parameters.
</summary>
            <returns>
Exposure for photographic exposure parameters
</returns>
        </member>
        <member name="M:AcGiPhotographicExposureParameters.setExposure(System.Double)">
            <summary>
Sets Exposure Value for photographic exposure parameters.
This value is a combination of a camera's shutter speed (exposure time) and f-number (depth of field) 
and determines the amount of motion blur in a scene.
</summary>
            <param name="exposure">
Exposure Value for photographic exposure parameters.
</param>
        </member>
        <member name="T:AcGiPhotographicExposureParameters">
            <summary>
Container class for all photographic exposure parameters.
</summary>
            <remarks>
Properties defined here used by RENDERENGINE=1. 
Base class properties used by RENDERENGINE=0.
</remarks>
        </member>
        <member name="M:AcGiToneOperatorParameters.copyFrom(AcRxObject!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Copies member data from source object
</summary>
            <returns>
Acad::eOk if copy is successful
</returns>
        </member>
        <member name="M:AcGiToneOperatorParameters.exteriorDaylight">
            <summary>
Is exterior daylight enabled?
</summary>
            <returns>
True if exterior daylight is enabled.
</returns>
            <remarks>
Only applies if the tone operator is active.
</remarks>
        </member>
        <member name="M:AcGiToneOperatorParameters.setExteriorDaylight(AcGiToneOperatorParameters.ExteriorDaylightMode)">
            <summary>
Indicates whether or not exterior daylight is enabled.
</summary>
            <param name="mode">
If kDaylightOff, daylight is disabled. If kDaylightOn, daylight is enabled.  If kDaylightAuto, exterior daylight is enabled if a sky background or a sun light is enabled.
</param>
            <returns>
Returns true if a valid exterior daylight mode is passed in.
</returns>
            <remarks>
This value only applies if the tone operator is active.
</remarks>
        </member>
        <member name="F:kDaylightAuto">
            <summary>
Auto - key off of the sun/sky background status.
</summary>
        </member>
        <member name="F:kDaylightOn">
            <summary>
On.
</summary>
        </member>
        <member name="F:kDaylightOff">
            <summary>
Off.
</summary>
        </member>
        <member name="T:AcGiToneOperatorParameters.ExteriorDaylightMode">
            <summary>
The exterior daylight mode.
</summary>
        </member>
        <member name="M:AcGiToneOperatorParameters.midTones">
            <summary>
The mid tones for the tone operator.
</summary>
            <returns>
The mid tones for the tone operator.
</returns>
            <remarks>
Only applies if the tone operator is active.
</remarks>
        </member>
        <member name="M:AcGiToneOperatorParameters.setMidTones(System.Double)">
            <summary>
Sets the mid tones for the tone operator.
</summary>
            <param name="midTones">
The mid tones for the tone operator.
</param>
            <returns>
Returns true if a valid midtones value is passed in.
</returns>
            <remarks>
This value only applies if the tone operator is active.
</remarks>
        </member>
        <member name="M:AcGiToneOperatorParameters.contrast">
            <summary>
The contrast for the tone operator.
</summary>
            <returns>
The contrast for the tone operator.
</returns>
            <remarks>
Only applies if the tone operator is active.
</remarks>
        </member>
        <member name="M:AcGiToneOperatorParameters.setContrast(System.Double)">
            <summary>
Sets the contrast for the tone operator.
</summary>
            <param name="contrast">
The contrast for the tone operator.
</param>
            <returns>
Returns true if a valid contrast value is passed in.
</returns>
            <remarks>
This value only applies if the tone operator is active.
</remarks>
        </member>
        <member name="M:AcGiToneOperatorParameters.brightness">
            <summary>
The brightness for the tone operator.
</summary>
            <returns>
The brightness for the tone operator.
</returns>
            <remarks>
Only applies if the tone operator is active.
</remarks>
        </member>
        <member name="M:AcGiToneOperatorParameters.setBrightness(System.Double)">
            <summary>
Sets the brightness for the tone operator.
</summary>
            <param name="brightness">
The brightness for the tone operator.
</param>
            <returns>
Returns true if a valid brightness value is passed in.
</returns>
            <remarks>
This value only applies if the tone operator is active.
</remarks>
        </member>
        <member name="M:AcGiToneOperatorParameters.processBackground">
            <summary>
Is background processing enabled?
</summary>
            <returns>
True if background processing is enabled.
</returns>
            <remarks>
Only applies if the tone operator is active.
</remarks>
        </member>
        <member name="M:AcGiToneOperatorParameters.setProcessBackground(System.Boolean)">
            <summary>
Specifies if the background should be processed by exposure control at render time.
</summary>
            <param name="processBG">
Set to true to enable background processing, otherwise false.
</param>
            <remarks>
Only applies if the tone operator is active.
</remarks>
        </member>
        <member name="M:AcGiToneOperatorParameters.whiteColor">
            <summary>
Gets the reference white color
</summary>
        </member>
        <member name="M:AcGiToneOperatorParameters.setWhiteColor(AcCmColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets the reference white color
</summary>
            <param name="color">Reference White</param>
        </member>
        <member name="M:AcGiToneOperatorParameters.colorDifferentiation">
            <summary>
Reserved for future use.
</summary>
        </member>
        <member name="M:AcGiToneOperatorParameters.setColorDifferentiation(System.Boolean)">
            <summary>
Reserved for future use.
</summary>
        </member>
        <member name="M:AcGiToneOperatorParameters.chromaticAdaptation">
            <summary>
Reserved for future use.
</summary>
        </member>
        <member name="M:AcGiToneOperatorParameters.setChromaticAdaptation(System.Boolean)">
            <summary>
Reserved for future use.
</summary>
        </member>
        <member name="M:AcGiToneOperatorParameters.isActive">
            <summary>
Is the tone operator active?
</summary>
            <returns>
True if the tone operator is active.
</returns>
        </member>
        <member name="M:AcGiToneOperatorParameters.setIsActive(System.Boolean)">
            <summary>
Indicates whether or not the tone operator is active.
</summary>
            <param name="active">
If true, the tone operator is active.
</param>
        </member>
        <member name="T:AcGiToneOperatorParameters">
            <summary>
Container class for all tone operator parameters.
</summary>
        </member>
        <member name="M:AcGiRapidRTRenderSettingsTraits.filterHeight">
            <summary>
Get the current filter height
</summary>
            <returns>Current filter height</returns>
        </member>
        <member name="M:AcGiRapidRTRenderSettingsTraits.setFilterHeight(System.Single)">
            <summary>
Sets the filter height. 1.0 means one pixel (image sample).
Recommended default sizes: box = 1.0, triangle = 2.0, Gaussian = 3.0, Lanczos = 4.0, Mitchell = 4.0
</summary>
            <param name="height">Filter height to be set.</param>
            <returns>void</returns>
        </member>
        <member name="M:AcGiRapidRTRenderSettingsTraits.filterWidth">
            <summary>Get the current filter width.</summary>
            <returns>Return the current filter width.</returns>
        </member>
        <member name="M:AcGiRapidRTRenderSettingsTraits.setFilterWidth(System.Single)">
            <summary>
Sets the filter width. 1.0 means one pixel (image sample).
Recommended default sizes: box = 1.0, triangle = 2.0, Gaussian = 3.0, Lanczos = 4.0, Mitchell = 4.0
</summary>
            <param name="width">Filter width to be set.</param>
            <returns>void</returns>
        </member>
        <member name="M:AcGiRapidRTRenderSettingsTraits.filterType">
            <summary>Get the current filter type.</summary>
            <returns>Return the current filter type.</returns>
        </member>
        <member name="M:AcGiRapidRTRenderSettingsTraits.setFilterType(AcGiFilterType)">
            <summary>
Set the filter type applied to the image samples when super sampling. Different filter type favors different filter width / height.
</summary>
            <param name="filterInfo">Filter type to be set.</param>
            <returns>void</returns>
        </member>
        <member name="M:AcGiRapidRTRenderSettingsTraits.lightingMode">
            <summary>Get the lighting mode being set.</summary>
            <returns>Return the lighting mode being set.</returns>
        </member>
        <member name="M:AcGiRapidRTRenderSettingsTraits.setLightingMode(AcGiLightingMode)">
            <summary>
Turn on basic lighting or advanced lighting according the lighting mode set. 
Basic lighting uses ambient occlusion and a simpler model for ambient light and IBL. 
Advanced lighting uses full global illumination and a more advanced model for ambient light and IBL.
</summary>
            <param name="mode">Desired lighting mode to be set.</param>
            <returns>void</returns>
        </member>
        <member name="M:AcGiRapidRTRenderSettingsTraits.desiredRenderLevel">
            <summary>Get the desired render level.</summary>
            <returns>Return the desired render level.</returns>
        </member>
        <member name="M:AcGiRapidRTRenderSettingsTraits.setDesiredRenderLevel(System.Int32)">
            <summary>If choosing to use the option of render level to control render quality, we can use this function to set the desired rendering level.</summary>
            <param name="renderLevel">Desired render level to be set. The range is from 1 to 50.</param>
            <returns>void</returns>
        </member>
        <member name="M:AcGiRapidRTRenderSettingsTraits.desiredRenderTime">
            <summary>Get the desired render time.</summary>
            <returns>Return the desired render time.</returns>
        </member>
        <member name="M:AcGiRapidRTRenderSettingsTraits.setDesiredRenderTime(System.Int32)">
            <summary>
If choosing to use the option of render time to control render quality, we can use this function to set the desired rendering time.
</summary>
            <param name="renderTime">Desired render time to be set, which is by second. The range is from 1 minute to 1440 minutes.</param>
            <returns>void</returns>
        </member>
        <member name="M:AcGiRapidRTRenderSettingsTraits.quitCondition">
            <summary>Get the quit condition</summary>
            <returns>Return the quit condition</returns>
        </member>
        <member name="T:AcGiRapidRTRenderSettingsTraits">
            <summary>
Abstract interface class that controls all the rendering settings.
</summary>
        </member>
        <member name="F:krEMitchell">
            <summary>
Mitchell filter type
Default size: 4.0
</summary>
        </member>
        <member name="F:krELanczos">
            <summary>
Lanczos filter type
Default size: 4.0
</summary>
        </member>
        <member name="F:krEGaussian">
            <summary>
Gaussian filter type
Default size: 3.0
</summary>
        </member>
        <member name="F:krETriangle">
            <summary>
Triangle filter type
Default size: 2.0
</summary>
        </member>
        <member name="F:krEBox">
            <summary>
Box filter type
Default size: 1.0
</summary>
        </member>
        <member name="F:krEAdvanced">
            <summary>
Global illumination (indirect diffuse lighting) on.
Glossy reflection and refraction on.
</summary>
        </member>
        <member name="F:krEBasic">
            <summary>
Global illumination (indirect diffuse lighting) on.
Glossy reflection and refraction off.
</summary>
        </member>
        <member name="F:krESimplistic">
            <summary>
Global illumination off.
Glossy reflection and refraction off.
Simplified strategy for reflections/refractions to reduce noise.
The trade off is that reflections and refractions may be less accurate compared to the Basic and Advanced lighting modes.
</summary>
        </member>
        <member name="F:krEQuitByRenderTime">
            <summary>
Use render time as a quit condition
The corresponding target render time needs to be set
</summary>
        </member>
        <member name="F:krEQuitByRenderLevel">
            <summary>
Use render iteration as a quit condition
The corresponding render level value needs to be set
</summary>
        </member>
        <member name="M:AcGiIBLBackgroundTraits.secondaryBackground">
            <summary>
Gets the background to display when DisplayImage is set to false
</summary>
            <returns>
Background db Id
</returns>
        </member>
        <member name="M:AcGiIBLBackgroundTraits.setSecondaryBackground(AcDbObjectId!System.Runtime.CompilerServices.IsConst)">
            <summary>
Sets the background to display when DisplayImage is set to false
Limited to 2D backgrounds only - Solid, Gradient, Image
</summary>
            <param name="bg">
Background db Id
</param>
        </member>
        <member name="M:AcGiIBLBackgroundTraits.displayImage">
            <summary>
Gets whether to display the IBL image as the background
</summary>
            <returns>
True if IBL image is to be displayed as background
</returns>
        </member>
        <member name="M:AcGiIBLBackgroundTraits.setDisplayImage(System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary>
Sets whether to display the IBL image as the background
</summary>
            <param name="bdisplay">
Set to true to display IBL image in background
</param>
        </member>
        <member name="M:AcGiIBLBackgroundTraits.rotation">
            <summary>
Gets the rotation value for the IBL image
</summary>
            <returns>
Rotation value in degrees
</returns>
        </member>
        <member name="M:AcGiIBLBackgroundTraits.setRotation(System.Double!System.Runtime.CompilerServices.IsConst)">
            <summary>
Sets the rotation value for the IBL image
-180 to 180 degrees
</summary>
            <param name="rotation">
Rotation value in degrees (-180 to 180)
</param>
        </member>
        <member name="M:AcGiIBLBackgroundTraits.IBLImageName">
            <summary>
Gets the image used for IBL
</summary>
            <returns>
Name of IBL image
</returns>
        </member>
        <member name="M:AcGiIBLBackgroundTraits.setIBLImageName(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets the image used for IBL
</summary>
            <param name="name">
Name of IBL image
</param>
        </member>
        <member name="M:AcGiIBLBackgroundTraits.enable">
            <summary>
Gets whether IBL is currently active
</summary>
            <returns>
True if active
</returns>
        </member>
        <member name="M:AcGiIBLBackgroundTraits.setEnable(System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary>
Sets whether IBL is currently active
</summary>
            <param name="name">
True if active
</param>
        </member>
        <member name="T:AcGiIBLBackgroundTraits">
            <summary>
This class enables IBL background definitions to be elaborated to 
AcGi implementations.
</summary>
        </member>
        <member name="M:AcGiSkyBackgroundTraits.skyParameters(AcGiSkyParameters*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Provides access to sky parameters for this light.
</summary>
            <param name="params">
An AcGiSkyParameters object that contains the sky properties used
by this background.
</param>
        </member>
        <member name="M:AcGiSkyBackgroundTraits.setSkyParameters(AcGiSkyParameters!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets the sky parameters for this light.
</summary>
            <param name="params">
An AcGiSkyParameters object that contains the sky properties used
by this background.
</param>
        </member>
        <member name="T:AcGiSkyBackgroundTraits">
            <summary>
This class enables sky background definitions to be elaborated to 
AcGi implementations.
</summary>
        </member>
        <member name="M:AcDbMText.setShowBorders(System.Boolean)">
            <summary> Set the flag controlling mtext border's visibility.
<param name="enable"> true means borders will be visible
                        false means borders will be invisible </param><returns> Acad::ErrorStatus </returns></summary>
        </member>
        <member name="M:AcDbMText.showBorders">
            <summary> Get the flag controlling mtext border's visibility.
<returns> bool </returns></summary>
        </member>
        <member name="M:AcDbMText.setContentsRTF(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> This method sets the contents of the AcDbMText object from
the RTF-encoded text string pointed to by RTFString. RTF codes are
translated to MText codes. Fonts, colors, tabs, and indents are
preserved. Bullets and numbered lists are mapped to hanging paragraphs
using the implied setting for tabs and indents.
The conversion uses 24 as the default point size. That is, 24 point
text (RTF \fs48) will have no height override and text with any other
point size will have a height override of that point size divided by 24.
</summary>
            <param name="RTFString">Input RTF-encoded string.</param>
            <returns>Returns 0 if successful.</returns>
        </member>
        <member name="M:AcDbMText.contentsRTF(AcString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> This method returns an RTF encoded string that is a
translated version of the contents of the AcDbMText object. MText
codes are translated to RTF codes. Fonts, colors, tabs, and indents
are preserved.
The conversion uses 24 as the default point size. That is, text with
no height override will have a point size of 24 and text with a height
override will have a point size of the height override multiplied by 24.
The caller is responsible for freeing the memory used by the
returned string (preferrably by using acutDelString()).
</summary>
        </member>
        <member name="M:AcDbCurve.setFromAcGeCurve(AcGeCurve3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcGeVector3d*,AcGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This function takes an AcGeCurve3d and sets this AcDbCurve to be
geometrically identical to the AcGeCurve3d.
</summary>
            <param name="geCurve">Input reference to an AcGeCurve3d.</param>
            <param name="normal">Optional normal vector.  If this parameter is 
supplied then it must be a valid vector that is perpendicular to the
input geCurve, and this vector will become the normal vector of
the output pDbCurve.  If this parameter is not supplied, then this
function will compute the normal vector itself.</param>
            <param name="tol">Optional input tolerance.</param>
            <returns>Returns eOk if successful.</returns>
        </member>
        <member name="M:AcDbCurve.createFromAcGeCurve(AcGeCurve3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbCurve**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcGeVector3d*,AcGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This function takes an AcGeCurve3d and returns an AcDbCurve that is
geometrically identical to the AcGeCurve3d.
</summary>
            <param name="geCurve">Input reference to an AcGeCurve3d.</param>
            <param name="pDbCurve">Output pointer to an AcDbCurve object that is
geometrically identical to geCurve.  The caller of this function is
responsible for deleting this AcDbCurve object or adding it to the
database.</param>
            <param name="normal">Optional normal vector.  If this parameter is 
supplied then it must be a valid vector that is perpendicular to the
input geCurve, and this vector will become the normal vector of
the output pDbCurve.  If this parameter is not supplied, then this
function will compute the normal vector itself.</param>
            <param name="tol">Optional input tolerance.</param>
            <returns>Returns eOk if successful.</returns>
        </member>
        <member name="M:AcDbCurve.getAcGeCurve(AcGeCurve3d**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This function returns an AcGeCurve3d that is geometrically identical to
this AcDbCurve.
</summary>
            <param name="pGeCurve">Output pointer to an AcGeCurve3d object that is
geometrically identical to this AcDbCurve.  The caller of this function
is responsible for deleting this AcGeCurve3d object.</param>
            <param name="tol">Optional input tolerance.</param>
            <returns>Returns eOk if successful.</returns>
        </member>
        <member name="M:AcDbAuditInfo.updateObject(AcDbHandle,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,AcRxClass*,AcRxClass*,AcDbObjectId)">
            <summary>
updateObject is invoked from AcDb Recover and Audit internals, and can
also be invoked from AcDbObject::audit(), dwgInFields() and any other
override members invoked during a recover operation and its subsequent
audit. 
</summary>
            <param name="setFileObjIsValid">
Boolean indicating whether the fileObjIsValid parameter should
replace the corresponding field in the lookup table entry.
</param>
            <param name="setNewObjIsValid">
Boolean indicating whether the newObjIsValid parameter should
replace the corresponding field in the lookup table entry.
</param>
            <param name="setFileObjClass">
Boolean indicating whether the fileObjClass parameter should
replace the corresponding field in the lookup table entry.
</param>
            <param name="setNewObjClass">
Boolean indicating whether the setNewObjClass parameter should
replace the corresponding field in the lookup table entry.
</param>
            <param name="setNewObjId">
Boolean indicating whether the newObjId parameter should
replace the corresponding field in the lookup table entry.
</param>
            <param name="fileObjIsValid">
A bool indicating whether the object image in the DWG file was
valid or not.
</param>
            <param name="newObjIsValid">
A bool indicating whether the object under newObjId is
valid or not.   If not set to true, then fetchObject on
objectHandle will return eNullObjectPointer.
</param>
            <param name="pFileObjClass">
The original class of the missing or corrupted object.
</param>
            <param name="pNewObjClass">
The class of the original or replacement object.
</param>
            <param name="newObjId">
Boolean indicating whether the newObjId parameter should
replace the corresponding field in the lookup table entry.
Usually that of objectHandle unless the object id had to
be redirected.
</param>
            <returns>
The following ErrorStatus values can be returned from this function.
eOk:                   Success, the indicated fields were replaced.
eInvalidInput:         The input handle cannot be null (0).
</returns>
            <remarks>
The Recover logic makes use of this member to indicated fixed up
objects and redirected object ids.  But it can be invoked by
applications as well.

This is the most powerful and most verbose way to create and update
entries for the indirect object lookup table; with a separate parameter
for every field in a table entry, and a boolean flag for each parameter,
indicating whether the corresponding parameter should replace the current
entry or not.
</remarks>
        </member>
        <member name="M:AcDbAuditInfo.registerObject(AcDbHandle,System.Boolean,AcRxClass*)">
            <summary>
registerObject is invoked from AcDb Recover and Audit internals, and can
also be invoked from AcDbObject::audit(), dwgInFields() and any other
override members invoked during a recover operation and its subsequent
audit.   It is the easy way to make entries for valid objects, compared
to AcDbAuditInfo::updateObject, which has a much more verbose parameter
list.
</summary>
            <param name="handle">
The handle of the original object, readily obtainable from an object
id as well.  It is the lookup key for indirect object lookup table
entries.
</param>
            <param name="objIsValid">
A bool indicating whether the object is valid or not.  If true is
passed in, then the entire lookup table entry is filled out with
the handle pointing to its own object id as its replacement.
</param>
            <param name="pObjClass">
The anticipated or known class of the missing-corrupted object.
</param>
            <returns>
The following ErrorStatus values can be returned from this function.
eOk:                   Success, objId has a valid value.
eInvalidInput:         The input handle cannot be null (0).
eHandleInUse:          Returned if this function is invoked more than
                       once for the input handle in a single recover
                       operation.
</returns>
            <remarks>
The Recover logic usually populates the indirect object table
with entries that map object ids to themselves.   But it can be invoked by
applications as well.

Once objIsValid is passed in as false, AcDbAuditInfo::updateObject
must be invoked to establish the new object id.
</remarks>
        </member>
        <member name="M:AcDbAuditInfo.fetchObject(AcDbObjectId,AcDbObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcRxClass*,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
fetchObject is invoked from AcDbObject::audit() override members, as
well as the AcDb recovery-audit complex.   Its purpose is to retrieve
an object id based on the input object id.   It will usually be the
same object id as is passed in, but can differ when recover logic
creates new objects under new object ids.
</summary>
            <param name="originalObjId">
The object id read in from the DWG file.
</param>
            <param name="newObjId">
The object id to use insetad of originalObjId.
</param>
            <param name="pObjClass">
The anticipated class of the missing-corrupted object.
</param>
            <param name="uneraseIfPossible">
If true, and the referenced object is erased, it will be
unerased if the object permits itself to be unerased.
</param>
            <param name="createIfNotFound">
Every call to fetchObject with this parameter set to true will
cause the object recreation mechanism to be invoked.
if false, then fetchObject will return results based on what is
already in the lookup table.
</param>
            <param name="externalDbOk">
true implies that objId and newObjId can reside in another database.
Note:  Not yet implemented.
</param>
            <returns>
The following ErrorStatus values can be returned from this function.
eOk:                   Success, objId has a valid valuel
eInvalidInput:         Errors include newObjId being NULL and pObjClass
                       being NULL.
eNotImplementedYet:    returned if externalDbOk is true and newObjId is
                       from an external database.
eInvalidXrefObjectId:  objId cannot be a forwarding reference to another
                       object Id in an xref database.
eWasErased:            if an object is erased and the uneraseIfPossible
                       parameter is false or the object cannot be unerased.
eNullObjectPointer and    
eNullObjectId:         if a valid object cannot be returned for various
                       reasons.
</returns>
            <remarks>
If eOk is returned, then newObjId will be valid and should be used (and
will most often be the same as objId).
If any other value is returned, then both objId and newObjId should be
considered to be invalid.
</remarks>
        </member>
        <member name="M:AcDbObject.removePersistentReactor(AcDbObjectId)">
            <summary>
Removes the persistent reactor from the currently open object
</summary>
            <returns> Returns Acad::eOk if the reactor is removed successfully.
          Returns eNullObjectId if id argument is null.
          Returns eInvalidInput if id argument does not have valid format.
          Returns eWasNotifying if object is open for notify but not for write.
          Returns eKeyNotFound if reactor id is not attached to this object.
</returns>
            <remarks> Current object must be open for write. </remarks>
        </member>
        <member name="M:AcDbObject.addPersistentReactor(AcDbObjectId)">
            <summary>
Adds a persistent reactor to the currently open object
</summary>
            <returns> Returns Acad::eOk if the reactor is added successfully.
          Returns eNullObjectId if id argument is null.
          Returns eInvalidInput if id argument does not have valid format.
          Returns eWrongDatabase if id argument is not in same database as object.
          Returns eSelfReference if id argument is same as this object's.
          Returns eDuplicateKey if reactor is already attached to this object.
</returns>
            <remarks> Current object must be open for write. </remarks>
        </member>
        <member name="M:AcDbObject.removeReactor(AcDbObjectReactor*)">
            <summary>
Removes the non-persistent reactor from the currently open object
</summary>
            <returns> Returns Acad::eOk if the reactor is removed successfully.
          Returns eNullObjectPointer if incoming argument is null.
          Returns eInvalidInput if incoming argument is not a valid pointer.
          Returns eKeyNotFound if reactor is not attached to this object.
</returns>
            <remarks> Current object may be open for notify, read or write. </remarks>
        </member>
        <member name="M:AcDbObject.addReactor(AcDbObjectReactor*)">
            <summary>
Adds a non-persistent reactor to the currently open object
</summary>
            <returns> Returns Acad::eOk if the reactor is added successfully.
          Returns eNullObjectPointer if incoming argument is null.
          Returns eInvalidInput if incoming argument is not a valid pointer.
          Returns eDuplicateKey if reactor is already attached to this object.
</returns>
            <remarks> Current object may be open for notify, read or write. </remarks>
        </member>
        <member name="M:AcDbObject.getBinaryData(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>This function reads a chunk of binary data from this object's extension
dictionary. It assumes that the data has been stored as a resbuf chain of 127-byte
pieces, which it concatenates into the larger data buffer that is returned. If the
data has been stored in any other type of resbuf, this function returns eBadDxfCode.

A null pointer should be passed to the data parameter. If this function succeeds,
it allocates the appropriate memory to contain the requested data, copies the data
into the memory, sets data to point to that memory, and returns the size of the data
in size. 

The caller is responsible for freeing the allocated data buffer. The caller also is
responsible for opening the object for read.</summary>
            <param name="key">Input extension dictionary key under which the data is stored</param>
            <param name="size">Output size of the returned data in bytes</param>
            <param name="data">Output requested data in an allocated buffer</param>
            <returns>Returns Acad::eOk if successful. Returns Acad::eBadDxfCode if data is stored
in resbufs that are not binary data chunks</returns>
        </member>
        <member name="M:AcDbObject.setBinaryData(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>This function copies the binary chunk pointed to by data into
this object's extension dictionary. It looks for key in the dictionary,
and either creates or overwrites a resbuf chain on an xrecord at that key.
The binary data is broken into 127-byte chunks for storage in the resbuf chain.

The caller is responsible for opening the object for write.</summary>
            <param name="key">Input extension dictionary key to be used</param>
            <param name="size">Input size of the binary data, in bytes</param>
            <param name="data">Input pointer to a flat data buffer whose size, in bytes
is at least as large as size</param>
            <returns>Returns Acad::eOk if successful.</returns>
        </member>
        <member name="M:AcDbObject.dxfOut(AcDbDxfFiler*,System.Boolean,AcArray&lt;AcDbObjectId,AcArrayMemCopyReallocator&lt;AcDbObjectId&gt;&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary>
This function does some internal bookkeeping, calls the object's AcDbObject::dxfOutFields()
function, and then uses bAllXdata and pRegAppIds to determine what, if any xdata should be
written out. If bAllXdata == true, then all xdata is written out. If bAllXdata == false and
pRegAppIds == nullptr or points to an empty array, then no xdata is written out.  If
bAllXdata == false and pRegAppIds points to a non-empty array, then the xdata (if any) for
those regapp objectIds is written out.
</summary>
            <param name="pFiler">Input pointer to DXF filer to be used for this filing operation</param>
            <param name="bAllXdata">Input bool to specify whether or not all xdata should be written out</param>
            <param name="pRegAppIds">Input pointer to array of regapp objectIds</param>
            <returns>Returns the filer's status, which is Acad::eOk if successful.</returns>
        </member>
        <member name="M:AcDbObject.setIntendedDatabase(AcDbDatabase*)">
            <summary>This method allows setting an intended AcDbDatabase for this AcDbObject as
         long as this AcDbObject is not yet in an AcDbDatabase.

         When this AcDbObject is added to an AcDbDatabase, the intendedDatabase
         will automatically become nullptr and this method will not allow setting
         to anything else.

         The intended AcDbDatabase is the AcDbDatabase that this object is expected
         to be added to or associated with (such as if this AcDbObject is embedded
         in another AcDbObject that is in an AcDbDatabase).

         For AcDbEntities not yet in an AcDbDatabase, the intended AcDbDatabase is
         automatically set when their layer, linetype, or material is set.

         Custom object implementations should set the intended database whenever
         any custom database specific property (i.e. associated with an AcDbObjectId)
         on their object is set.</summary>
            <param name="pDb">Input pointer to desired intended AcDbDatabase.</param>
            <returns>Returns Acad::eOk if successful or Acad::eInvalidContext if this AcDbObject
         is already in an AcDbDatabase and pDb != nullptr.</returns>
        </member>
        <member name="M:AcDbObject.intendedDatabase">
            <summary>If this AcDbObject is not yet in an AcDbDatabase, and it has had its
         intended AcDbDatabase set, then this method will return a pointer to that
         intended AcDbDatabase.  The intended AcDbDatabase may be set when a database
         specific property (such as the layer or linetype on entities) is set on this
         AcDbObject, or if this AcDbObject's setIntendedDatabase() method has been called
         to explicitly set the intended AcDbDatabase.

         After this AcDbObject is added to an AcDbDatabase, this method will always return
         nullptr.</summary>
        </member>
        <member name="M:AcDbObject.databaseToUse">
            <summary>This method returns a pointer to a AcDbDatabase object that can be
         used with this AcDbObject.  If the AcDbObject is in an AcDbDatabase,
         then a pointer to the AcDbDatabase returned by the object's database()
         method will be returned, otherwise, if the AcDbObject has a non-nullptr
         intendedDatabase, then a pointer to that AcDbDatabase will be returned,
         workingDatabase will be returned.</summary>
        </member>
        <member name="M:AcDbObject.database">
            <summary>This method returns a pointer to the AcDbDatabase object that contains
         the AcDbObject.</summary>
        </member>
        <member name="M:acdbOpenObject(AcDbObject**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbObjectId,=FUNC:AcRxClass*,AcDb.OpenMode,System.Boolean)">
            <summary>
This function opens an AcDbObject for read, write or notify access
</summary>
            <param name="pObj"> A reference to a pointer to the Object. Set to null on errors</param>
            <param name="id"> The id of the object to open.</param>
            <param name="pfDesc"> Pointer to an AcRxClass's static desc method</param>
            <param name="mode"> Whether to open the object for read, write or notify access</param>
            <param name="openErased"> If true, then open the object even when it is erased</param>
            <returns> Returns Acad::eOk if the object is opened successfully, otherwise an error code.</returns>
            <remarks> This is the worker function for the acdbOpenObject template func.
          Returns Acad::eNullPtr error if pfDesc is null.
</remarks>
        </member>
        <member name="M:op_Addition(System.Char!System.Runtime.CompilerServices.IsConst*,AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Copy an AcString and insert a string of Unicode characters in front of it.</summary>
            <param name="pwsz">input pointer to the string of characters to insert</param>
            <returns>An AcString consisting of the concatenation of pwsz and acs.</returns>
        </member>
        <member name="M:op_Addition(System.Char,AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Copy an AcString and insert a Unicode characters in front of it.</summary>
            <param name="wch">input characters to insert</param>
            <returns>An AcString consisting of the concatenation of wch and acs.</returns>
        </member>
        <member name="M:op_LessThanOrEqual(System.Char!System.Runtime.CompilerServices.IsConst*,AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Check for a string of Unicode characters being less than/equal to an AcString.</summary>
            <param name="pwsz">input characters to compare</param>
            <param name="acs">input reference to the AcString</param>
            <returns>True if pwsz is less than or equal to acs, else false.</returns>
        </member>
        <member name="M:op_LessThanOrEqual(System.Char,AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Check for a Unicode character being less than or equal to an AcString.</summary>
            <param name="wch">input character to compare</param>
            <param name="acs">input reference to the AcString</param>
            <returns>True if wch is less than or equal to acs, else false.</returns>
        </member>
        <member name="M:op_LessThan(System.Char!System.Runtime.CompilerServices.IsConst*,AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Check for a string of Unicode characters being less than an AcString.</summary>
            <param name="pwsz">input character to compare</param>
            <param name="acs">input reference to the AcString</param>
            <returns>True if pwsz is less than acs, else false.</returns>
        </member>
        <member name="M:op_LessThan(System.Char,AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Check for a Unicode character being less than an AcString.</summary>
            <param name="wch">input character to compare</param>
            <param name="acs">input reference to the AcString</param>
            <returns>True if wch is less than acs, else false.</returns>
        </member>
        <member name="M:op_GreaterThanOrEqual(System.Char!System.Runtime.CompilerServices.IsConst*,AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Check for a string of Unicode characters being greater than/equal to an AcString.</summary>
            <param name="pwsz">input string to compare</param>
            <param name="acs">input reference to the AcString</param>
            <returns>True if pwsz is greater than or equal to acs, else false.</returns>
        </member>
        <member name="M:op_GreaterThanOrEqual(System.Char,AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Check for a Unicode character being greater than or equal to an AcString.</summary>
            <param name="wch">input character to compare</param>
            <param name="acs">input reference to the AcString</param>
            <returns>True if wch is greater than or equal to acs, else false.</returns>
        </member>
        <member name="M:op_GreaterThan(System.Char!System.Runtime.CompilerServices.IsConst*,AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Return whether a string of Unicode characters is greater than an AcString.</summary>
            <param name="pwsz">input pointer to the string of Unicode characters</param>
            <param name="acs">input reference to the AcString</param>
            <returns>True if pwsz is greater than acs, else false.</returns>
        </member>
        <member name="M:op_GreaterThan(System.Char,AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Return whether a Unicode character is greater than an AcString.</summary>
            <param name="wch">input character to compare</param>
            <param name="acs">input reference to the AcString</param>
            <returns>True if wch is greater than acs, else false.</returns>
        </member>
        <member name="M:op_Inequality(System.Char!System.Runtime.CompilerServices.IsConst*,AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compare an AcString and a string of Unicode characters for non-equality.</summary>
            <param name="pwsz">input ptr to the string of Unicode characters</param>
            <param name="acs">input reference to the AcString</param>
            <returns>True if pwsz and acs are not equal, else false.</returns>
        </member>
        <member name="M:op_Inequality(System.Char,AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compare an AcString and a Unicode character for non-equality.</summary>
            <param name="wch">input character to compare</param>
            <param name="acs">input reference to the AcString</param>
            <returns>True if wch and acs are not equal, else false.</returns>
        </member>
        <member name="M:op_Equality(System.Char!System.Runtime.CompilerServices.IsConst*,AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compare an AcString and a string of Unicode characters for equality.</summary>
            <param name="pwsz">input character to the string of Unicode characters</param>
            <param name="acs">input reference to the AcString</param>
            <returns>True if pwsz and acs are equal, else false.</returns>
        </member>
        <member name="M:op_Equality(System.Char,AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compare an AcString and a Unicode character for equality.</summary>
            <param name="wch">input character to compare</param>
            <param name="acs">input reference to the AcString</param>
            <returns>True if wch and acs are equal, else false.</returns>
        </member>
        <member name="M:AcString.releaseBuffer(System.Int32)">
            <summary>
Use releaseBuffer() to end the use of a buffer allocated by the getBuffer() method.
The pointer returned by getBuffer() is invalid after the call to releaseBuffer().
</summary>
            <param name="nMinBufferLength">Sets the new length of the AcString.
If -1, then the string's length is determined by the null terminator's index.
Otherwise the new length is set to the minimum of nMinBufferLength and the null
terminator's index.
</param>
            <returns>True if success, false on errors such as invalid length args or
no previous call to getBuffer().</returns>
        </member>
        <member name="M:AcString.insert(System.Int32,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Inserts a substring at the given index within the string.
</summary>
            <param name="nIndex">The index of the character before which the insertion will take place.</param>
            <param name="ch">A pointer to the substring to be inserted.</param>
            <returns>A reference to this AcString object.</returns>
        </member>
        <member name="M:AcString.insert(System.Int32,System.Char)">
            <summary>
Inserts a single character at the given index within the string.
</summary>
            <param name="nIndex">The index of the character before which the insertion will take place.</param>
            <param name="ch">The character to be inserted.</param>
            <returns>A reference to this AcString object.</returns>
        </member>
        <member name="M:AcString.getAt(System.Int32)">
            <summary>
Get one character at the given postion from the string.
</summary>
            <param name="nIndex">Zero-based postion of character in the string.</param>
            <returns> Return the character at the specified position in the string </returns>
            <remarks> Does NOT do range checking on the nIndex arg.
          Results for out of range nIndex args are unpredictable.
          Indexing via [] may also work, causing an implicit call to
          the const wchar_t * operator
</remarks>
        </member>
        <member name="M:AcString.setAt(System.Int32,System.Char)">
            <summary>
Set the character at the given postion to the specified character.
</summary>
            <param name="nIndex">Zero-based postion of character in the string.</param>
            <param name="ch">The new character to replace the old one.</param>
            <returns>A reference to this AcString object.</returns>
        </member>
        <member name="M:AcString.tokenize(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Finds the next token in a target string
</summary>
            <param name="pszTokens">A string containing token delimiters.
             The order of these delimiters is not important.</param>
            <param name="iStart">The zero-based index at which to begin the search.</param>
            <returns>An AcString containing the current token value.</returns>
            <remarks> Returned string does not contain the delimiter
          iStart is updated to next position after the delimiter</remarks>
        </member>
        <member name="M:AcString.truncate(System.Int32)">
            <summary>
Truncates the string from the given index
</summary>
            <param name="nIndex"> Zero-based position at which to start deleting from</param>
            <returns>Return a reference to this string object.</returns>
        </member>
        <member name="M:AcString.deleteAtIndex(System.Int32,System.Int32)">
            <summary>
Deletes character(s) from a string starting with the character at given index.
</summary>
            <param name="iIndex"> Zero-based position from which to start deleting </param>
            <param name="nCount"> character number to be deleted. If -1, delete to end </param>
            <returns>Return the length of the changed string.</returns>
            <remarks> Truncates the string if nCount is -1</remarks>
        </member>
        <member name="M:AcString.replace(System.Char,System.Char)">
            <summary>
Replace a character with another.
</summary>
            <param name="wchOld"> character that will be replaced </param>
            <param name="wchNew"> new character that will be replaced with </param>
            <returns>The number of replaced instances of the wchOld.
         Zero if the string is not changed.</returns>
        </member>
        <member name="M:AcString.replace(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Rplaces instances of the substring with instances of the new string 
</summary>
            <param name="pwszOld"> A pointer to a string containing the character to be replaced by lpszNew. </param>
            <param name="pwszNew"> A pointer to a string containing the character replacing lpszOld. </param>
            <returns>The number of replaced instances of the substring.
         Zero if the string is not changed.</returns>
        </member>
        <member name="M:AcString.op_Assign(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Initialize this AcString from a std::wstring.</summary>
            <param name="csw">input reference to the std::wstring</param>
            <returns>A reference to this AcString object.</returns>
        </member>
        <member name="M:AcString.#ctor(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Construct an AcString from a std::wstring.</summary>
            <param name="csw">input reference to the std::wstring</param>
        </member>
        <member name="M:AcString.spanExcluding(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Extract substring up to the first instance of a designated character.</summary>
            <param name="pwszChars"> Null terminated string of chars at which to stop scanning</param>
            <returns> AcString that contains the substring</returns>
        </member>
        <member name="M:AcString.remove">
            <summary> Remove all occurrences of whitespace.</summary>
            <returns> Number of characters removed. Zero if the string was not changed.</returns>
        </member>
        <member name="M:AcString.remove(System.Char)">
            <summary> Remove all occurrences of the specified character.</summary>
            <returns> Number of characters removed. Zero if the string was not changed.</returns>
            <remarks> Removes whitespace characters if wch arg is zero.</remarks>
        </member>
        <member name="M:AcString.trim(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Remove all designated characters from both ends of the string.</summary>
            <returns> Reference to this AcString.</returns>
            <remarks> Trims whitespace if pwszChars arg is null.</remarks>
        </member>
        <member name="M:AcString.trim">
            <summary> Remove all whitespace characters from both ends of the string.</summary>
            <returns> Reference to this AcString.</returns>
        </member>
        <member name="M:AcString.trimRight(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Remove all designated characters from the end of the string.</summary>
            <returns> Reference to this AcString.</returns>
            <remarks> Trims whitespace if pwszChars arg is null.</remarks>
        </member>
        <member name="M:AcString.trimRight">
            <summary> Remove all whitespace characters from the end of the string.</summary>
            <returns> Reference to this AcString.</returns>
        </member>
        <member name="M:AcString.trimLeft(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Remove all designated characters from beginning of the string.</summary>
            <returns> Reference to this AcString.</returns>
            <remarks> Trims whitespace if pwszChars arg is null.</remarks>
        </member>
        <member name="M:AcString.trimLeft">
            <summary> Remove all whitespace characters from beginning of the string.</summary>
            <returns> Reference to this AcString.</returns>
        </member>
        <member name="M:AcString.trim(System.Char)">
            <summary> Remove all occurrences of a character from both ends of this string.</summary>
            <returns> Reference to this AcString.</returns>
            <remarks> No-op if wch arg is null character.</remarks>
        </member>
        <member name="M:AcString.trimRight(System.Char)">
            <summary> Remove all occurrences of a character from end of this string.</summary>
            <returns> Reference to this AcString.</returns>
            <remarks> No-op if wch arg is null character.</remarks>
        </member>
        <member name="M:AcString.trimLeft(System.Char)">
            <summary> Remove all occurrences of a character from front of this string.</summary>
            <returns> Reference to this AcString.</returns>
            <remarks> No-op if wch arg is null character.</remarks>
        </member>
        <member name="M:AcString.makeReverse">
            <summary>Reverse the characters in this string./// </summary>
            <returns>A reference to this AcString.</returns>
        </member>
        <member name="M:AcString.makeLower">
            <summary>Convert this string's uppercase characters to lower case.</summary>
            <returns> Reference to this AcString.</returns>
        </member>
        <member name="M:AcString.makeUpper">
            <summary>Convert this string's lowercase characters to upper case.</summary>
            <returns> Reference to this AcString.</returns>
        </member>
        <member name="M:AcString.matchNoCase(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>See how many characters case-independently match another AcString.</summary>
            <param name="acs">input reference to the other AcString</param>
            <returns>The number of characters that match acs.</returns>
        </member>
        <member name="M:AcString.matchNoCase(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>See how many characters case-independently match a wide string.</summary>
            <param name="pwsz">input pointer to the string of characters</param>
            <returns>The number of characters that match pwsz.</returns>
        </member>
        <member name="M:AcString.matchNoCase(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,AcString.Encoding)">
            <summary>See how many characterss case-independently match a narrow string.</summary>
            <param name="psz">input pointer to the string of narrow chars</param>
            <param name="encoding">input Encoding type</param>
            <returns>The number of characters that match psz.</returns>
            <remarks>Currently, only Utf8 encoding is supported.</remarks>
        </member>
        <member name="M:AcString.match(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>See how many characters match another AcString.</summary>
            <param name="acs">input reference to the other AcString</param>
            <returns>The number of characters that match pwsz.</returns>
        </member>
        <member name="M:AcString.match(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>See how many characters match a string of wide characters.</summary>
            <param name="pwsz">input pointer to the string of characters</param>
            <returns>The number of characters that match pwsz.</returns>
        </member>
        <member name="M:AcString.match(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,AcString.Encoding)">
            <summary>See how many characters match a string of narrow chars.</summary>
            <param name="psz">input pointer to the string of narrow chars</param>
            <param name="encoding">input Encoding type</param>
            <returns>The number of characters that match psz.</returns>
            <remarks>Currently, only Utf8 encoding is supported.</remarks>
        </member>
        <member name="M:AcString.op_LessThanOrEqual(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compare the string for less or equal to than another AcString.</summary>
            <param name="acs">input reference to the other AcString</param>
            <returns>True if this string is less than or equal to acs, false otherwise.</returns>
        </member>
        <member name="M:AcString.op_LessThanOrEqual(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>Compare the string for less than/equal to a string of wide characters.</summary>
            <param name="pwsz">input pointer to the string of characters</param>
            <returns>True if this string is less than or equal to pwsz, false otherwise.</returns>
        </member>
        <member name="M:AcString.op_LessThanOrEqual(System.Char)">
            <summary>Compare the string for less than or equal to a wide char.</summary>
            <param name="wch">input character to compare to</param>
            <returns>True if this string is less than or equal to wch, false otherwise.</returns>
        </member>
        <member name="M:AcString.op_LessThan(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compare the string for less than another AcString.</summary>
            <param name="acs">input reference to the other AcString</param>
            <returns>True if this string is less than acs, false otherwise.</returns>
        </member>
        <member name="M:AcString.op_LessThan(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>Compare the string for less than a string of wide characters.</summary>
            <param name="pwsz">input pointer to the string of characters to compare to</param>
            <returns>True if this string is less than pwsz, false otherwise.</returns>
        </member>
        <member name="M:AcString.op_LessThan(System.Char)">
            <summary>Compare the string for less than a wide char.</summary>
            <param name="wch">input character to compare to</param>
            <returns>True if this string is less than wch, false otherwise.</returns>
        </member>
        <member name="M:AcString.op_GreaterThanOrEqual(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compare the string for greater than or equal to another AcString.</summary>
            <param name="acs">input reference to the other AcString</param>
            <returns>True if this string is greater than or equal to acs, false otherwise.</returns>
        </member>
        <member name="M:AcString.op_GreaterThanOrEqual(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>Compare for greater than/equal to a string of wide characters.</summary>
            <param name="pwsz">input pointer to the string of characters</param>
            <returns>True if this string is greater than or equal to pwsz, false otherwise.</returns>
        </member>
        <member name="M:AcString.op_GreaterThanOrEqual(System.Char)">
            <summary>Compare the string for greater than or equal to a wide char.</summary>
            <param name="wch">input character to compare to</param>
            <returns>True if this string is greater than or equal to wch, false otherwise.</returns>
        </member>
        <member name="M:AcString.op_GreaterThan(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compare the string for greater than another AcString.</summary>
            <param name="acs">input reference to the other AcString</param>
            <returns>True if this string is greater than acs, false otherwise.</returns>
        </member>
        <member name="M:AcString.op_GreaterThan(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>Compare the string for greater than a string of wide characters.</summary>
            <param name="pwsz">input pointer to the string of characters to compare to</param>
            <returns>True if this string is greater than pwsz, false otherwise.</returns>
        </member>
        <member name="M:AcString.op_GreaterThan(System.Char)">
            <summary>Compare the string for greater than a wide char.</summary>
            <param name="wch">input character to compare to</param>
            <returns>True if this string is greater than wch, false otherwise.</returns>
        </member>
        <member name="M:AcString.op_Inequality(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compare the string for non-equality with another AcString.</summary>
            <param name="acs">input reference to the other AcString</param>
            <returns>True if this string does not equal acs, false if they are equal.</returns>
        </member>
        <member name="M:AcString.op_Inequality(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>Compare the string for non-equality with a string of wide characters.</summary>
            <param name="pwsz">input pointer to the string of characters</param>
            <returns>True if this string does not equal pwsz, false if they are equal.</returns>
        </member>
        <member name="M:AcString.op_Inequality(System.Char)">
            <summary>Compare the string for non-equality with a wide char.</summary>
            <param name="wch">input character to compare to</param>
            <returns>True if this string does not equal wch, false if they are equal.</returns>
        </member>
        <member name="M:AcString.op_Equality(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compare the string for equality with another AcString.</summary>
            <param name="acs">input reference to the other AcString</param>
            <returns>True if this string equals acs, else false.</returns>
        </member>
        <member name="M:AcString.op_Equality(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>Compare the string for equality with a string of wide characters.</summary>
            <param name="pwsz">input pointer to the string of characters</param>
            <returns>True if this string equals pwsz, else false.</returns>
        </member>
        <member name="M:AcString.op_Equality(System.Char)">
            <summary>Compare this string for equality with a wide char.</summary>
            <param name="wch">input character to compare to</param>
            <returns>True if this string equals wch, else false.</returns>
        </member>
        <member name="M:AcString.equalsNoCase(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compares two AcStrings for equality, ignoring case.</summary>
            <param name="left"> one AcString object </param>
            <param name="right"> another AcString object </param>
            <returns>true if left equals right, else false.</returns>
            <remarks>May be useful as a comparator function for STL functions.</remarks>
        </member>
        <member name="M:AcString.precat(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>Copy the string and insert a string of characters in front of it.</summary>
            <param name="psz">input pointer to the string of characters to insert</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.precat(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,AcString.Encoding)">
            <summary>Copy the string and insert a string of narrow chars in front of it.</summary>
            <param name="psz">input pointer to the string of narrow chars to insert</param>
            <param name="encoding">input Encoding type</param>
            <returns>A reference to this string object.</returns>
            <remarks>Currently, only Utf8 encoding is supported.</remarks>
        </member>
        <member name="M:AcString.precat(System.Char)">
            <summary>Copy the string and insert a character in front of it.</summary>
            <param name="ch">input character to insert</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.concat(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Copy the string and append an AcString to it.</summary>
            <param name="pwsz">input reference to the AcString to append</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.concat(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>Copy the string and append a string of Unicode characters to it.</summary>
            <param name="pwsz">input pointer to the string to append</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.concat(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,AcString.Encoding)">
            <summary>Copy the string and append a string of narrow chars to it.</summary>
            <param name="psz">input pointer to the narrow string to append</param>
            <param name="encoding">input Encoding type</param>
            <returns>A reference to this string object.</returns>
            <remarks>Currently, only Utf8 encoding is supported.</remarks>
        </member>
        <member name="M:AcString.concat(System.Char)">
            <summary>Copy the string and append a Unicode character to it.</summary>
            <param name="ch">input character to append to the string copy</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.op_Addition(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Copy the string and append an AcString to it.</summary>
            <param name="pwsz">input reference to the AcString to append</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.op_Addition(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>Copy the string and append a string of Unicode characters to it.</summary>
            <param name="pwsz">input pointer to the string to append</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.op_Addition(System.Char)">
            <summary>Copy the string and append a Unicode character to it.</summary>
            <param name="ch">input character to append to the string copy</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.append(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>append an AcString object to the end of the string.</summary>
            <param name="acs">input reference to the AcString</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.append(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>append a Unicode string to the end of the string.</summary>
            <param name="pwsz">input pointer to the Unicode string</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.append(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,AcString.Encoding)">
            <summary>append a char string to the end of the string.</summary>
            <param name="psz">input pointer to the narrow char string</param>
            <param name="encoding">input Encoding type</param>
            <returns>A reference to this string object.</returns>
            <remarks>Currently, only Utf8 encoding is supported.</remarks>
        </member>
        <member name="M:AcString.append(System.Char)">
            <summary>append a Unicode character to the end of the string.</summary>
            <param name="wch">input character to append</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.op_AdditionAssignment(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>append an AcString object to the end of the string.</summary>
            <param name="acs">input reference to the AcString</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.op_AdditionAssignment(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>append a Unicode string to the end of the string.</summary>
            <param name="pwsz">input pointer to the Unicode string</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.op_AdditionAssignment(System.Char)">
            <summary>append a Unicode character to the end of the string.</summary>
            <param name="wch">input character to append</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.appendFormat(System.Char!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
            <summary>
Append formated data to this string using "printf" rules
</summary>
            <param name="pszFmt">input pointer to the printf format string</param>
            <param name="args">input variable args list, containing values to be formatted</param>
            <returns> Reference to this AcString.</returns>
        </member>
        <member name="M:AcString.formatV(System.Char!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
            <summary>Format the string using "printf" rules.</summary>
            <param name="pszFmt">input pointer to the printf format string</param>
            <param name="args">input variable args list, containing values to be formatted</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.format(System.Char!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
            <summary>Format the string using "printf" rules..</summary>
            <param name="pszFmt">input pointer to the printf format string</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.loadString(AcRxResourceInstance!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
            <summary>Set the string from a resource string.</summary>
            <param name="hDll">AxResourceInstance object to load string</param>
            <param name="nId">input id of the string resource in the specified resource dll</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.setEmpty">
            <summary>Set the string to be empty..</summary>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.op_Assign(AcDbHandle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>assign an AcDbHandle object to the string (format it as hex).</summary>
            <param name="h">input reference to the AcDbHandle object</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.op_Assign(AcString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>move a temp AcString object to the string.</summary>
            <param name="acs">input reference to the temp AcString</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.op_Assign(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>assign an AcString object to the string.</summary>
            <param name="acs">input reference to the AcString</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.op_Assign(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>assign a string of Unicode characters to the string.</summary>
            <param name="pwsz">input pointer to the string of characters to assign</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.op_Assign(System.Char)">
            <summary>assign a Unicode character to the string.</summary>
            <param name="wch">input character to assign</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.assign(AcDbHandle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>assign an AcDbHandle object to the string (format it as hex).</summary>
            <param name="h">input reference to the AcDbHandle object</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.assign(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>assign an AcString object to the string.</summary>
            <param name="acs">input reference to the AcString</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.assign(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>assign a string of Unicode characters to the string.</summary>
            <param name="pwsz">input pointer to the string of characters to assign</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.assign(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,AcString.Encoding)">
            <summary>assign a string of narrow chars to the string.</summary>
            <param name="psz">input pointer to the string of narrow chars to assign</param>
            <param name="encoding"> input Encoding type</param>
            <returns>A reference to this string object.</returns>
            <remarks>Currently, only Utf8 encoding is supported.</remarks>
        </member>
        <member name="M:AcString.assign(System.Char)">
            <summary>assign a Unicode character to the string.</summary>
            <param name="wch">input character to assign</param>
            <returns>A reference to this string object.</returns>
        </member>
        <member name="M:AcString.right(System.Int32)">
            <summary>
Return a nNumChars length substring from the end of string.
</summary>
            <param name="nNumChars">The count of characters of the substring to get.</param>
            <returns>An AcString consisting of the specified substring</returns>
        </member>
        <member name="M:AcString.left(System.Int32)">
            <summary>
Return a nNumChars length substring from the start of string.
</summary>
            <param name="nNumChars">The count of characters of the substring to get.</param>
            <returns>An AcString consisting of the specified substring</returns>
        </member>
        <member name="M:AcString.substrRev(System.Int32)">
            <summary>Get a substring from the end of string..</summary>
            <param name="nNumChars">input number of characters to retrieve.</param>
            <returns>An AcString consisting of the specified substring</returns>
        </member>
        <member name="M:AcString.substr(System.Int32,System.Int32)">
            <summary>Get a substring from the string.  (same as mid() method).</summary>
            <param name="nStart">input 0-based index from the start of the string</param>
            <param name="nNumChars">input number of characters to retrieve.</param>
            <returns>An AcString consisting of the specified substring</returns>
        </member>
        <member name="M:AcString.substr(System.Int32)">
            <summary>Get a substring from the start of string..</summary>
            <param name="nNumChars">input number of characters to retrieve.</param>
            <returns>An AcString consisting of the specified substring</returns>
        </member>
        <member name="M:AcString.mid(System.Int32)">
            <summary>Get substring from the a specified position to the string's end.</summary>
            <param name="nStart">The zero-based start position of the substring to get.</param>
            <returns>An AcString consisting of the specified substring</returns>
        </member>
        <member name="M:AcString.findLastNoneOf(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32)">
            <summary> Find last character in this string which does not match any in a group
          of characters</summary>
            <param name="psz">input group of characters to search for</param>
            <param name="nEndPos">first character position to look at</param>
            <returns> The position of the "not found" character. -1 if all were found.</returns>
            <remarks> If psz is null, then we search for whitespace.</remarks>
        </member>
        <member name="M:AcString.findLastOneOf(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32)">
            <summary> Find last character in this string from a group of characters</summary>
            <param name="psz">input group of characters to match</param>
            <param name="nEndPos">Last character position to look at</param>
            <returns> The position of the found character. -1 if not found.</returns>
            <remarks> If psz is null, then we search for whitespace.</remarks>
        </member>
        <member name="M:AcString.findLast(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32)">
            <summary> Find last occurrence of a substring in the string</summary>
            <param name="psz">input substring to search for</param>
            <param name="nEndPos">Last character position to look at</param>
            <returns> The position of the found substring result. -1 if not found.</returns>
        </member>
        <member name="M:AcString.findLast(System.Char,System.Int32)">
            <summary> Find last occurrence of a character in the string</summary>
            <param name="ch">input character to search for</param>
            <param name="nEndPos">Last character position to look at</param>
            <returns> The position of the found character. -1 if not found.</returns>
        </member>
        <member name="M:AcString.findOneOfRev(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Find last character in this string from a group of characters</summary>
            <param name="psz">input group of characters to match</param>
            <returns> The position of the found character. -1 if not found.</returns>
            <remarks> This method is DEPRECATED. Please use findLast() instead.</remarks>
        </member>
        <member name="M:AcString.findRev(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Find last occurrence of a substring in the string</summary>
            <param name="acs">input substring to search for</param>
            <returns> The position of the found substring result. -1 if not found.</returns>
            <remarks> This method is DEPRECATED. Please use findLast() instead.</remarks>
        </member>
        <member name="M:AcString.findRev(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary> Find last occurrence of a substring in the string</summary>
            <param name="psz">input substring to search for</param>
            <returns> The position of the found substring result. -1 if not found.</returns>
            <remarks> This method is DEPRECATED. Please use findLast() instead.</remarks>
        </member>
        <member name="M:AcString.findRev(System.Char)">
            <summary> Find last occurrence of a character in the string</summary>
            <param name="ch">input character to search for</param>
            <returns> The position of the found character. -1 if not found.</returns>
            <remarks> This method is DEPRECATED. Please use findLast() instead.</remarks>
        </member>
        <member name="M:AcString.findNoneOf(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32)">
            <summary> Find first character in this string which does not match any in a group
          of input characters</summary>
            <param name="psz">input group of characters to search for</param>
            <param name="nStartPos">first character position to look at</param>
            <returns> The position of the "not found" character. -1 if all were found.</returns>
            <remarks> If psz is null, then we search for whitespace.</remarks>
        </member>
        <member name="M:AcString.findOneOf(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32)">
            <summary> Find first character in this string which matches any in a group of
          input characters</summary>
            <param name="psz">input group of characters to search for</param>
            <param name="nStartPos">first character position in this string to look at</param>
            <returns> The position of the found character. -1 if not found.</returns>
            <remarks> If psz is null, then we search for whitespace.</remarks>
        </member>
        <member name="M:AcString.find(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32)">
            <summary> Find a substring in the string </summary>
            <param name="psz">input string to search for</param>
            <param name="nStartPos">first character position in this string to look at</param>
            <returns> The position of the found substring. -1 if not found.</returns>
        </member>
        <member name="M:AcString.find(System.Char,System.Int32)">
            <summary> Find a single character in the string.  </summary>
            <param name="ch">input character to search for</param>
            <param name="nStartPos">first character position to look at</param>
            <returns> The position of the found character. -1 if not found.</returns>
        </member>
        <member name="M:AcString.find(System.Char)">
            <summary>Find a single character in the string..</summary>
            <param name="ch">input character to search for</param>
            <returns>The position of the found character. -1 if not found.</returns>
            <remarks>The first character position is zero.</remarks>
        </member>
        <member name="M:AcString.asAcDbHandle(System.Int32)">
            <summary>Parse the current string as hexadecimal.  Return the handle..</summary>
            <param name="nFlags">input bits specifying how to do the parsing</param>
            <returns>The handle value parsed from the string.</returns>
        </member>
        <member name="M:AcString.asUHex64(System.Int32)">
            <summary>Parse the current string as hexadecimal, return an unsigned int64.</summary>
            <param name="nFlags">input bits specifying how to do the parsing</param>
            <returns>The int value parsed from the string.</returns>
        </member>
        <member name="M:AcString.asUDeci64(System.Int32)">
            <summary>Parse the current string as decimal, return an unsigned int64.</summary>
            <param name="nFlags">input bits specifying how to do the parsing</param>
            <returns>The int value parsed from the string.</returns>
        </member>
        <member name="M:AcString.asHex64(System.Int32)">
            <summary>Parse the current string as hexadecimal, return a signed int64.</summary>
            <param name="nFlags">input bits specifying how to do the parsing</param>
            <returns>The int value parsed from the string.</returns>
        </member>
        <member name="M:AcString.asDeci64(System.Int32)">
            <summary>Parse the current string as decimal, return a signed int64.</summary>
            <param name="nFlags">input bits specifying how to do the parsing</param>
            <returns>The int value parsed from the string.</returns>
        </member>
        <member name="M:AcString.asUHex(System.Int32)">
            <summary>Parse the current string as hexadecimal, return an unsigned int.</summary>
            <param name="nFlags">input bits specifying how to do the parsing</param>
            <returns>The int value parsed from the string.</returns>
        </member>
        <member name="M:AcString.asUDeci(System.Int32)">
            <summary>Parse the current string as decimal, return an unsigned int.</summary>
            <param name="nFlags">input bits specifying how to do the parsing</param>
            <returns>The int value parsed from the string.</returns>
        </member>
        <member name="M:AcString.asHex(System.Int32)">
            <summary>Parse the current string as hexadecimal, return a signed int.</summary>
            <param name="nFlags">input bits specifying how to do the parsing</param>
            <returns>The int value parsed from the string.</returns>
        </member>
        <member name="M:AcString.asDeci(System.Int32)">
            <summary>Parse the current string as decimal, return a signed int.</summary>
            <param name="nFlags">input bits specifying how to do the parsing</param>
            <returns>The int value parsed from the string.</returns>
        </member>
        <member name="F:kParseDefault">
            <summary>Default error handling behavior.</summary>
        </member>
        <member name="F:kParseNoEmpty">
            <summary>Treat empty string as error.</summary>
        </member>
        <member name="F:kParseExcept">
            <summary>Throw an int exception.</summary>
        </member>
        <member name="F:kParseAssert">
            <summary>Pop an assert in debug build.</summary>
        </member>
        <member name="F:kParseMinus1">
            <summary>Return -1 or ffff.</summary>
        </member>
        <member name="F:kParseZero">
            <summary>Return zero on errors.</summary>
        </member>
        <member name="M:AcString.is7Bit">
            <summary>Check if all characters are in the range 0x01 through 0x7f.</summary>
            <returns>True if all characters have their high bit (0x80) clear.</returns>
            <remarks>Codes in 0x01 through 0x7f tend to have the same meaning across
         all encoding schemes (ansi code pages, utf-8, utf-16, etc.</remarks>
        </member>
        <member name="M:AcString.isAscii">
            <summary>Check if all characters are in the ascii range: 0x20..0x7f.</summary>
            <returns>True if all characters in the ASCII range, else false.</returns>
            <remarks>Codes 0x..0x1f are considered control characters and cause this method
         to return false, for historical reasons.</remarks>
        </member>
        <member name="M:AcString.reserve(System.UInt32)">
            <summary>Grows or (possibly) shrinks the buffer to match the requested capacity .</summary>
            <param name="nCapacity">Number of characters of space needed, including terminator.</param>
            <returns>True if the buffer was re-allocated, else false.</returns>
            <remarks>Shrink requests may be ignored, depending on current buffer size,
         string length and refcount.</remarks>
        </member>
        <member name="M:AcString.tcharLength">
            <summary>Get logical length of this string.</summary>
            <returns>The number of characters in the string. Zero if it's empty.</returns>
            <remarks>This method is dDeprecated. Please use length() instead.</remarks>
        </member>
        <member name="M:AcString.length">
            <summary>Get logical length of this string.</summary>
            <returns>The number of characters in the string. Zero if it's empty.</returns>
            <remarks>Null terminator is not counted in logical length.</remarks>
        </member>
        <member name="M:AcString.isEmpty">
            <summary>Test whether this string is null, i.e. has logical length zero.</summary>
            <returns>True if the string is empty, else false.</returns>
        </member>
        <member name="M:AcString.op_Implicit~System.Char!System.Runtime.CompilerServices.IsConst*">
            <summary>Operator for casting this string to a widechar unicode string pointer.</summary>
            <returns>A pointer to a null terminated widechar string.</returns>
            <remarks>Pointer is valid only until this AcString is next modified.</remarks>
        </member>
        <member name="M:AcString.utf8Ptr">
            <summary>Get the string as utf-8.</summary>
            <returns>A pointer to a null-terminated utf8 string.</returns>
            <remarks> The pointer is only valid until this object is next modified.
          Warning: this method can modify the object, even though it is const
</remarks>
        </member>
        <member name="M:AcString.#ctor(AcRxResourceInstance!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
            <summary>Load String from resource instance.</summary>
            <param name="hDll">AxResourceInstance object to load string</param>
            <param name="nId">input id of the string resource in the specified resource dll</param>
        </member>
        <member name="M:AcString.#ctor(AcDbHandle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Formats an AcDbHandle value in hex, as in: "a2f".</summary>
            <param name="h">input reference to an acdb handle value</param>
        </member>
        <member name="M:AcString.#ctor(System.Char,System.UInt32)">
            <summary>repeat a character n times.</summary>
            <param name="ch">character value</param>
            <param name="nRepeatTimes">repate times</param>
        </member>
        <member name="M:AcString.#ctor(AcString.eFormat,System.UInt32)">
            <summary>
 Multi-purpose constructor, takes an unsigned argument and
 uses it either to load a resource string or to create a
 numerical string (base 10 or hex).
</summary>
            <param name="nCtorFlags">input flags, indicating type of construction</param>
            <param name="nArg">input argument value, interpreted according to flags</param>
        </member>
        <member name="F:kHex">
            <summary>Format the arg as hexadecimal</summary>
        </member>
        <member name="F:kUnSigned">
            <summary>Format the arg as unsigned int</summary>
        </member>
        <member name="F:kSigned">
            <summary>Format the arg as signed int</summary>
        </member>
        <member name="T:AcString.eFormat">
            <summary>Values for the nCtorFlags arg of the following constructor.</summary>
        </member>
        <member name="M:AcString.#ctor(AcString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Move constructor</summary>
            <param name="acs">input reference to an existing temp AcString object</param>
        </member>
        <member name="M:AcString.#ctor(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Copy constructor</summary>
            <param name="acs">input reference to an existing AcString object</param>
        </member>
        <member name="M:AcString.#ctor(System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
            <summary>Initialize from a Unicode string</summary>
            <param name="wpsz">input pointer to source</param>
            <param name="count"> number of characters to use from the input string</param>
        </member>
        <member name="M:AcString.#ctor(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>Initialize from a Unicode string</summary>
            <param name="wpsz">input pointer to zero terminated source string</param>
        </member>
        <member name="M:AcString.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,AcString.Encoding)">
            <summary>Initialize from a narrow char string.</summary>
            <param name="psz">Input narrow string. Null terminated.</param>
            <param name="encoding"> Input string's encoding format.</param>
            <remarks>Currently, only Utf8 encoding is supported.</remarks>
        </member>
        <member name="M:AcString.#ctor(System.Char)">
            <summary>Initialize with a single Unicode character</summary>
            <param name="wch">input character</param>
        </member>
        <member name="M:AcString.#ctor">
            <summary>Default ctor, initializes to empty string.</summary>
        </member>
        <member name="F:Utf8">
            <summary>Unicode utf-8 encoding.</summary>
        </member>
        <member name="T:AcString.Encoding">
            <summary>Types of narrow char encoding supported.</summary>
        </member>
        <member name="M:AcGiDrawableEvent.sendAdded(AcGiDrawable*,System.Int64,System.Int64)">
            <description>
Signal the addition of a drawable's graphics to the list of reactors.
</description>
            <param name="pDrawable">Input drawable whose graphics were added. </param>
            <param name="parentID">Input id of parent drawable.</param>
            <param name="databasePtr">Input database pointer cast as LONG_PTR.</param>
        </member>
        <member name="M:AcGiDrawableEvent.sendModified(AcGiDrawable*,System.Int64)">
            <description>
Signal the modification of a drawable's graphics to the list of reactors.
</description>
            <param name="pDrawable">Input drawable whose graphics were modified. </param>
            <param name="parentID">Input id of parent drawable.</param>
        </member>
        <member name="M:AcGiDrawableEvent.sendErased(AcGiDrawable*,System.Int64)">
            <description>
Signal the erasure of a drawable's graphics to the list of reactors.
</description>
            <param name="pDrawable">Input drawable whose graphics were erased. </param>
            <param name="parentID">Input id of parent drawable.</param>
        </member>
        <member name="M:AcGiDrawableEvent.sendHandOverTo(AcGiDrawable*,AcGiDrawable*)">
            <description>
Signal graphics are being handed over from one drawable to another drawable.
</description>
            <param name="pDrawableFrom">Input drawable from which graphics will be handed over. </param>
            <param name="pDrawableTo">Input drawable to which graphics will be handed over. </param>
        </member>
        <member name="M:AcGiDrawableEvent.sendErased(AcGiDrawable*)">
            <description>
Signal the erasure of a drawable's graphics to the list of reactors.
</description>
            <param name="pDrawable">Input drawable whose graphics were erased. </param>
        </member>
        <member name="M:AcGiDrawableEvent.sendModified(AcGiDrawable*)">
            <description>
Signal the modification of a drawable's graphics to the list of reactors.
</description>
            <param name="pDrawable">Input drawable whose graphics were modified. </param>
        </member>
        <member name="M:AcGiDrawableEvent.sendEndRegen(AcGiDrawable*,AcGiDrawableReactor.RegenFlags)">
            <description>
Signal the end of a drawable's regen to the list of reactors.
</description>
            <param name="pDrawable">Input drawable that was regenerated.</param>
            <param name="flags">Input graphics system that performed the regen.</param>
        </member>
        <member name="M:AcGiDrawableEvent.sendBeginRegen(AcGiDrawable*,AcGiDrawableReactor.RegenFlags)">
            <description>
Signal the beginning of a drawable's regen to the list of reactors.
</description>
            <param name="pDrawable">Input drawable about to be regenerated. </param>
            <param name="flags">Input graphics system that will perform the regen. </param>
        </member>
        <member name="M:AcGiDrawableEvent.removeReactor(AcGiDrawableReactor*)">
            <description>
Remove the reactor from the list of reactors that are notified when drawable events occur.
</description>
            <param name="pReactor">Input reactor to disable notification of drawable events. </param>
        </member>
        <member name="M:AcGiDrawableEvent.addReactor(AcGiDrawableReactor*)">
            <description>
Add the reactor to the list of reactors that are notified when drawable events occur.
</description>
            <param name="pReactor">Input reactor to enable notification of drawable events.</param>
        </member>
        <member name="M:AcGiDrawableEvent.instance">
            <description>
This static method returns the singleton instance of this class.  Use the acgiDrawableEvent macro for convenience.
</description>
            <returns>The one AcGiDrawableEvent.</returns>
        </member>
        <member name="T:AcGiDrawableEvent">
            <description>
AcGiDrawableEvent manages a set of AcGiDrawableReactors and sends 
notifications to them when certain events occur.  Access is through
a singleton instance of this class, acgiDrawableEvent. Clients of
AcGiDrawableEvent fall into three categories:

1. Any client interested in making use of AcGiDrawableReactor must 
add and remove their reactor through addReactor/removeReactor.

2. AcGiDrawable-derived clients may use this class to notify graphics 
systems of modifications and erasures of their graphics.

3. Graphics systems may use this class to notify interested listeners
(e.g. AcGiDrawStream) of regen begin/end events.
</description>
        </member>
        <member name="M:AcGiDrawableReactor.added(AcGiDrawable*,System.Int64,System.Int64)">
            <description>
This event signals the addition of a drawable's graphics.
</description>
            <param name="pDrawable">Input drawable whose graphics were added. </param>
            <param name="parentID">Input id of parent drawable.</param>
            <param name="databasePtr">Input database pointer cast as LONG_PTR.</param>
        </member>
        <member name="M:AcGiDrawableReactor.modified(AcGiDrawable*,System.Int64)">
            <description>
This event signals the modification of a drawable's graphics.
</description>
            <param name="pDrawable">Input drawable whose graphics were modified.</param>
            <param name="parentID">Input id of parent drawable.</param>
        </member>
        <member name="M:AcGiDrawableReactor.erased(AcGiDrawable*,System.Int64)">
            <description>
This event signals the erasure of a drawable's graphics.
</description>
            <param name="pDrawable">Input drawable whose graphics were erased.</param>
            <param name="parentID">Input id of parent drawable.</param>
        </member>
        <member name="M:AcGiDrawableReactor.handOverTo(AcGiDrawable*,AcGiDrawable*)">
            <description>
This event signals graphics are being handed over from one drawable to another drawable.
</description>
            <param name="pDrawableFrom">Input drawable from which graphics will be handed over. </param>
            <param name="pDrawableTo">Input drawable to which graphics will be handed over. </param>
        </member>
        <member name="M:AcGiDrawableReactor.erased(AcGiDrawable*)">
            <description>
This event signals the erasure of a drawable's graphics.
</description>
            <param name="pDrawable">Input drawable whose graphics were erased.</param>
        </member>
        <member name="M:AcGiDrawableReactor.modified(AcGiDrawable*)">
            <description>
This event signals the modification of a drawable's graphics.
</description>
            <param name="pDrawable">Input drawable whose graphics were modified.</param>
        </member>
        <member name="M:AcGiDrawableReactor.endRegen(AcGiDrawable*,AcGiDrawableReactor.RegenFlags)">
            <description>
This event signals the end of a drawable's regen.
</description>
            <param name="pDrawable">Input drawable that was regenerated.</param>
            <param name="flags">Input graphics system that performed the regen.</param>
        </member>
        <member name="M:AcGiDrawableReactor.beginRegen(AcGiDrawable*,AcGiDrawableReactor.RegenFlags)">
            <description>
This event signals the beginning of a drawable's regen.
</description>
            <param name="pDrawable">Input drawable about to be regenerated.</param>
            <param name="flags">Input graphics system that will perform the regen. </param>
        </member>
        <member name="T:AcGiDrawableReactor.RegenFlags">
            <description>
The graphics system which is regenerating the drawable.
</description>
        </member>
        <member name="T:AcGiDrawableReactor">
            <description>
AcGiDrawableReactor provides notifications of key AcGiDrawable-
related events including begin/end regen, modification, and
erasure. Clients who derive from this class will receive these 
events after registering their reactor with 
acgiDrawableEvent-&gt;addReactor(). 
</description>
        </member>
        <member name="M:AcGiDrawableOverrule.viewportDrawLogicalFlags(AcGiDrawable*,AcGiViewportDraw*)">
            <property name="versionspecific" value="=18.0.0.0" />
            <description>
Overrules AcGiDrawable::viewportDrawLogicalFlags method.
</description>
            <remarks>
The default implementation of AcGiDrawableOverrule::
viewportDrawLogicalFlags calls the protected virtual
AcGiDrawable:: subViewportDrawLogicalFlags method. 
</remarks>
        </member>
        <member name="M:AcGiDrawableOverrule.viewportDraw(AcGiDrawable*,AcGiViewportDraw*)">
            <property name="versionspecific" value="=18.0.0.0" />
            <description>
Overrules AcGiDrawable::viewportDraw method.
</description>
            <remarks>
Default implementation of AcGiDrawableOverrule::viewportDraw
calls protected virtual AcGiDrawable::subViewportDraw method.

</remarks>
        </member>
        <member name="M:AcGiDrawableOverrule.worldDraw(AcGiDrawable*,AcGiWorldDraw*)">
            <property name="versionspecific" value="=18.0.0.0" />
            <description>
Overrules AcGiDrawable::worldDraw.
</description>
            <param name="pSubject">Pointer to an AcRxObject that this
                       overrule is applied against.</param>
            <param name="wd">Pointer to the graphics traits.</param>
            <remarks>
The default implementation of AcGiDrawableOverrule::worldDraw
calls the protected virtual AcGiDrawable::subWorldDraw
method. 
</remarks>
        </member>
        <member name="M:AcGiDrawableOverrule.setAttributes(AcGiDrawable*,AcGiDrawableTraits*)">
            <property name="versionspecific" value="=18.0.0.0" />
            <description>
Overrules AcGiDrawable::setAttributes method.
</description>
            <remarks>
The default implementation of
AcGiDrawableOverrule::setAttributes calls
AcGiDrawable::subSetAttributes.
</remarks>
            <param name="pSubject">Pointer to an AcRxObject that this
                       overrule is applied against.</param>
            <param name="traits">Pointer to the graphics traits.</param>
        </member>
        <member name="T:AcGiDrawableOverrule">
            <property name="versionspecific" value="=18.0.0.0" />
            <description>
AcGiDrawableOverrule overrules a subset of draw related
operations that AcGiDrawable class specifies. It is intended
as a base class for clients who want to alter some or all
behavior of a given AcGiDrawable-derived class. At the base
level, each default implementation simply calls the
corresponding method in the target class.
</description>
        </member>
        <member name="M:AcRxQueryXOverrule.queryX(AcRxObject!System.Runtime.CompilerServices.IsConst*,AcRxClass!System.Runtime.CompilerServices.IsConst*)">
            <property name="versionspecific" value="=19.0.0.0" />
            <description>
Overrules AcRxObject::queryX.
</description>
            <param name="pSubject">Pointer to an AcRxObject that this overrule is applied against.
</param>
            <returns>Returns a protocol extension object associated with this object
</returns>
            <remarks>
The default implementation of AcRxQueryXOverrule::queryX calls the 
protected AcRxObject::subQueryX method.
</remarks>
        </member>
        <member name="M:AcRxQueryXOverrule.#ctor">
            <property name="versionspecific" value="=19.0.0.0" />
            <description>
Default Constructor.
</description>
        </member>
        <member name="T:AcRxQueryXOverrule">
            <property name="versionspecific" value="=19.0.0.0" />
            <description>
AcRxQueryXOverrule overrules the queryX method of AcRxObject
</description>
        </member>
        <member name="M:AcRxOverrule.isOverruling">
            <property name="versionspecific" value="=18.0.0.0" />
            <description>
Queries if the global overruling flag is true or false.
</description>
            <returns>
Returns true if overruling is currently turned on, false otherwise. 
</returns>
        </member>
        <member name="M:AcRxOverrule.setIsOverruling(System.Boolean)">
            <property name="versionspecific" value="=18.0.0.0" />
            <description>
Globally (application-wise) enable or disable overruling mechanism.
</description>
            <param name="bIsOverruling">True to enable overruling, false to disable.</param>
            <remarks>
Overrule can be turned ON or OFF across the entire application. Does not
support per-document enabling or disabling.
</remarks>
        </member>
        <member name="M:AcRxOverrule.removeOverrule(AcRxClass*,AcRxOverrule*)">
            <property name="versionspecific" value="=18.0.0.0" />
            <description>
Unregister an overrule object from an AcRxClass.
</description>
            <param name="pClass">AcRxClass to which "pOverrule" was applied.</param>
            <param name="pOverrule">AcRxOverrule derived object to remove.</param>
            <remarks>
The parameters should match the parameters when addOverrule was called.
</remarks>
            <returns>
Returns Acad::Ok if the overrule was registered and is now removed from the overrule collection by this call.
</returns>
        </member>
        <member name="M:AcRxOverrule.addOverrule(AcRxClass*,AcRxOverrule*,System.Boolean)">
            <property name="versionspecific" value="=18.0.0.0" />
            <description>
Registers an overrule object to an AcRxClass.
</description>
            <param name="pClass">Pointer to an AcRxClass to which "pOverrule" is intended to apply.</param>
            <param name="pOverrule">Pointer to an AcRxOverrule derived object to overrule.</param>
            <param name="bAddAtLast">Indicates whether the {pClass, pOverrule} pair should be added at
                         the end of the overrule's collection.</param>
            <remarks>
You should ensure "pOverrule" is appropriate for "pClass". If "pOverrule" can't
overrule behaviors in "pClass", then "pOverrule" will have no effect. If more than one
overrule specifies bAddAtLast to be true, then their orders will be determined
by last in first out.
</remarks>
            <returns>
Returns true if the overrule is successfully added.
</returns>
        </member>
        <member name="M:AcRxOverrule.isApplicable(AcRxObject!System.Runtime.CompilerServices.IsConst*)">
            <property name="versionspecific" value="=18.0.0.0" />
            <description>
Used to make per-instance determination whether the overrule is applicable.
</description>
            <returns>
Returns true if overruling of the overrule should be applied when queried, false otherwise.
</returns>
            <param name="pOverruledSubject">Pointer to an AcRxObject to check.</param>
            <remarks>
If pOverruledSubject is database resident then it is open for read. 
</remarks>
        </member>
        <member name="T:AcRxOverrule">
            <property name="versionspecific" value="=18.0.0.0" />
            <description>
AcRxOverrule is an abstract base class for implementing
overrules. Overrule providers register and unregister their
overrules through addOverrule and removeOverrule. Overrules
can be globally activated or deactivated by setIsOverruling.
It can also be queried by isOverruleing.

Overrules are internally managed by pairs of "targetClass"
and "overrule". The "targetClass" is the class that
"overrule" is intended to own. Each class can have multiple
overrules registered and their order is implied by the order
they are registered.

Each derived overrule class should provide some or all
default implementations that delegate to the default behavior
for the targeted class. 
</description>
        </member>
        <member name="T:AcRxOverruleIteratorBase">
            <description>
Internal use only. Base class for all overrules.
</description>
        </member>
        <member name="M:AcRxDynamicLinker.registerApp(AcadApp.LoadReasons,System.Char!System.Runtime.CompilerServices.IsConst*,System.Void*)">
            <summary>
Registers an application for dynamic loading.
</summary>
            <returns>
AcadApp::eOk if success.
AcadApp::eRejected if entry cannot be removed.
AcadApp::eKeyNotFound if entry cannot be found.
</returns>
        </member>
        <member name="M:AcRxDynamicLinker.ProductLocale">
            <summary>
This function returns product locale
</summary>
            <returns>Return product locale.</returns>
        </member>
        <member name="F:kAutodeskInternal1">
            <summary>For Autodesk internal use.</summary>
        </member>
        <member name="M:AcDbObjectId.convertToRedirectedId">
            <summary>
Change this id's value to the host id value, if this id is currently being
redirected (forwarded) from an xref database to one in the host database.
Otherwise, do nothing.
</summary>
            <returns>True if the id was redirected, otherwise false.
</returns>
            <remarks>Only ids of symbol table records can be redirected
</remarks>
        </member>
        <member name="M:AcDbObjectId.isWellBehaved">
            <summary>
Checks, in a safe way (using an exception handler), whether this AcDbObjectId
is "well behaved".
Well-behaved ids may be null, valid or "stale", or they may be a garbage value
which happens to fail gracefully (without crashing) when operated on.
</summary>
            <returns>True if this id is well-behaved, false otherwise.
</returns>
            <remarks>It is safe to call functions like acdbOpenObject() and methods like
         objectClass(), database() and handle() on any well-behaved id.
         Non-well-behaved ids, however, can cause crashes in these functions.
         "Stale" ids are those which were once valid but whose owning
         AcDbDatabase has been destroyed, making them now invalid
         This method may have performance overhead if called in a tight loop.
</remarks>
        </member>
        <member name="M:AcDbObjectId.isValid">
            <summary>
Checks, in a safe way (using an exception handler), whether this AcDbObjectId is valid.
Valid ids are non-null and map to a non-null AcDbHandle (and to an AcDbObject) in an
existing AcDbDatabase.
</summary>
            <returns>True if the id is valid, false otherwise.
</returns>
            <remarks>Even though an id is valid, the AcDbObject it refers to may fail to open.
         This method may have performance overhead if called in a tight loop.
</remarks>
        </member>
        <member name="M:AcRxClass.isDerivedFrom(AcRxClass!System.Runtime.CompilerServices.IsConst*,AcRxClass!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Static method for checking if first (left) class arg is derived from second (right) one
</summary>
            <param name="pDerived"> Ptr to class to test for derivation from pBase </param>
            <param name="pBase"> Ptr to class to test for being in pDerived's parenthood chain </param>
            <returns> True if both class pointers are non-null and pDerived is derived from
          (i.e. in the sub-tree of children of) pBase.  Otherwise false. </returns>
            <remarks> Both classes should be already registered with the class system.
          All RxClasses are in the derived from AcRxObject::desc()
</remarks>
        </member>
        <member name="M:AcRxClass.queryX(AcRxClass!System.Runtime.CompilerServices.IsConst*)">
            <summary>
This method searches for a protocol extension object associated with this object.
</summary>
            <param name="protocolClass">
Input pointer to AcRxClass object of the protocol extension class being searched for 
</param>
        </member>
        <member name="F:kDefineImplicit">
            <summary>
Define point of a parametric curve, currently only valid for spline control point.
</summary>
        </member>
        <member name="F:kCenterImplicit">
            <summary>
Center point of a circle, arc, ellipse or bounded ellipse.
</summary>
        </member>
        <member name="F:kMidImplicit">
            <summary>
Mid point of a bounded line (not valid for ray) or arc.
</summary>
        </member>
        <member name="F:kEndImplicit">
            <summary>
End point of a bounded line (not valid for ray), arc or bounded ellipse.
</summary>
        </member>
        <member name="F:kStartImplicit">
            <summary>
Start point of bounded line, arc or bounded ellipse.
</summary>
        </member>
        <member name="T:AcDb.ImplicitPointType">
            <summary>
The type of a constrained implicit point.
</summary>
        </member>
        <!-- Discarding badly formed XML document comment for member 'M:AcRxOverrule.hasOverrule(AcRxObject!System.Runtime.CompilerServices.IsConst*,AcRxClass*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcString.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,AcString.Encoding,System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcString.Dispose'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcString.kwszPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcString.capacity'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcString.find(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcString.mid(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcString.compare(System.Char)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcString.compare(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,AcString.Encoding)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcString.compare(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcString.compare(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcString.collate(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcString.collate(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcString.compareNoCase(System.Char)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcString.compareNoCase(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,AcString.Encoding)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcString.compareNoCase(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcString.compareNoCase(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcString.collateNoCase(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcString.collateNoCase(AcString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcString.getBuffer(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:acdbOpenObject(AcDbObject**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcDbObjectId,AcDb.OpenMode,System.Boolean,AcRxClass!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcGiRapidRTRenderSettingsTraits.setQuitCondition(AcGiQuitCondition)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcDbDimension.formatMeasurement(AcString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcDbTextStyleTableRecord.font(AcString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Charset*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Autodesk.AutoCAD.PAL.FontUtils.FontPitch*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Autodesk.AutoCAD.PAL.FontUtils.FontFamily*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcGiVisualStyle.setTrait(AcGiVisualStyleProperties.Property,AcGiVariant!System.Runtime.CompilerServices.IsConst*,AcGiVisualStyleOperations.Operation)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcGiVisualStyle.setTrait(AcGiVisualStyleProperties.Property,AcCmColor!System.Runtime.CompilerServices.IsConst*,AcGiVisualStyleOperations.Operation)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcGiVisualStyle.setTrait(AcGiVisualStyleProperties.Property,AcString!System.Runtime.CompilerServices.IsConst*,AcGiVisualStyleOperations.Operation)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcDbHostApplicationServices.isRemoteFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char*,System.UInt64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcDbHostApplicationServices.getRemoteFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char*,System.UInt64,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:AcDbSurface.projectOnToSurface(AcDbEntity!System.Runtime.CompilerServices.IsConst*,AcGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AcArray<AcDbEntity**,AcArrayMemCopyReallocator<AcDbEntity**>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:acutNewString(System.Char**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:acutCopyStringToBuffer(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char*,System.UInt64)'. -->
    </members>
</doc>